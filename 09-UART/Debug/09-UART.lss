
09-UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002882  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00002882  00002916  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  0080006a  0080006a  00002920  2**0
                  ALLOC
  3 .stab         00002b80  00000000  00000000  00002920  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001523  00000000  00000000  000054a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000069c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006c73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000088bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000097a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a554  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a6b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a941  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b10f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__vector_10>
      2c:	0c 94 62 07 	jmp	0xec4	; 0xec4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 3a 0d 	jmp	0x1a74	; 0x1a74 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3c 13 	call	0x2678	; 0x2678 <main>
      8a:	0c 94 3f 14 	jmp	0x287e	; 0x287e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 08 14 	jmp	0x2810	; 0x2810 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 24 14 	jmp	0x2848	; 0x2848 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 08 14 	jmp	0x2810	; 0x2810 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 24 14 	jmp	0x2848	; 0x2848 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MWDT_vTurnOn>:
#include"WDT_int.h"
#include"WDT_prv.h"
#include"WDT_cfg.h"


void MWDT_vTurnOn(u8 A_u8Timeout){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01

	/* set timeout */

	WDTCR = (WDTCR& 0XF8) | A_u8Timeout;
     b52:	a1 e4       	ldi	r26, 0x41	; 65
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	e1 e4       	ldi	r30, 0x41	; 65
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	98 2f       	mov	r25, r24
     b5e:	98 7f       	andi	r25, 0xF8	; 248
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	89 2b       	or	r24, r25
     b64:	8c 93       	st	X, r24
	/* set WDE */

	SET_BIT(WDTCR,WDE);
     b66:	a1 e4       	ldi	r26, 0x41	; 65
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	e1 e4       	ldi	r30, 0x41	; 65
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	88 60       	ori	r24, 0x08	; 8
     b72:	8c 93       	st	X, r24



}
     b74:	0f 90       	pop	r0
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	08 95       	ret

00000b7c <MWDT_vTurnOff>:
void MWDT_vTurnOff(void){
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62

	WDTCR = 0b0011000;
     b84:	e1 e4       	ldi	r30, 0x41	; 65
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	88 e1       	ldi	r24, 0x18	; 24
     b8a:	80 83       	st	Z, r24
	WDTCR = 0;
     b8c:	e1 e4       	ldi	r30, 0x41	; 65
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	10 82       	st	Z, r1

}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <MUART_vInit>:
#include "UART_int.h"
#include "UART_prv.h"
#include "UART_cfg.h"

void MUART_vInit(void)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
	UCSRB = 0b00011000 ;
     ba0:	ea e2       	ldi	r30, 0x2A	; 42
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	88 e1       	ldi	r24, 0x18	; 24
     ba6:	80 83       	st	Z, r24
	UCSRC = 0b10000110 ;
     ba8:	e0 e4       	ldi	r30, 0x40	; 64
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	86 e8       	ldi	r24, 0x86	; 134
     bae:	80 83       	st	Z, r24
	UBRRL=51; 		//9600
     bb0:	e9 e2       	ldi	r30, 0x29	; 41
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	83 e3       	ldi	r24, 0x33	; 51
     bb6:	80 83       	st	Z, r24
}
     bb8:	cf 91       	pop	r28
     bba:	df 91       	pop	r29
     bbc:	08 95       	ret

00000bbe <MUART_vTransmit>:
void MUART_vTransmit(u8 A_u8Byte){
     bbe:	df 93       	push	r29
     bc0:	cf 93       	push	r28
     bc2:	0f 92       	push	r0
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
     bc8:	89 83       	std	Y+1, r24	; 0x01

	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
     bca:	eb e2       	ldi	r30, 0x2B	; 43
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	88 2f       	mov	r24, r24
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	80 72       	andi	r24, 0x20	; 32
     bd6:	90 70       	andi	r25, 0x00	; 0
     bd8:	00 97       	sbiw	r24, 0x00	; 0
     bda:	b9 f3       	breq	.-18     	; 0xbca <MUART_vTransmit+0xc>
	;
	/* Put data into buffer, sends the data */
	UDR = A_u8Byte;
     bdc:	ec e2       	ldi	r30, 0x2C	; 44
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	80 83       	st	Z, r24
}
     be4:	0f 90       	pop	r0
     be6:	cf 91       	pop	r28
     be8:	df 91       	pop	r29
     bea:	08 95       	ret

00000bec <MUART_u8Recieve>:

u8 MUART_u8Recieve(void){
     bec:	df 93       	push	r29
     bee:	cf 93       	push	r28
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62

	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) )
     bf4:	eb e2       	ldi	r30, 0x2B	; 43
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	88 23       	and	r24, r24
     bfc:	dc f7       	brge	.-10     	; 0xbf4 <MUART_u8Recieve+0x8>
	;
	/* Get and return received data from buffer */
	return UDR;
     bfe:	ec e2       	ldi	r30, 0x2C	; 44
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z

}
     c04:	cf 91       	pop	r28
     c06:	df 91       	pop	r29
     c08:	08 95       	ret

00000c0a <MTIMERS_vInit>:
//static void (*G_TIM0_Callback[2])(void);

u32  G_u32IntervalCount;

void MTIMERS_vInit(void)
{
     c0a:	df 93       	push	r29
     c0c:	cf 93       	push	r28
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62

#endif



    TCCR0 = 0b01101010;
     c12:	e3 e5       	ldi	r30, 0x53	; 83
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	8a e6       	ldi	r24, 0x6A	; 106
     c18:	80 83       	st	Z, r24
//	SET_BIT(TIMSK, 0) ; //TOIE0
//	SET_BIT(TIMSK, 1) ; //OCIE0
  	TCCR1A= 0b10000000 ;
     c1a:	ef e4       	ldi	r30, 0x4F	; 79
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 e8       	ldi	r24, 0x80	; 128
     c20:	80 83       	st	Z, r24
  	TCCR1B= 0b01000010 ;
     c22:	ee e4       	ldi	r30, 0x4E	; 78
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	82 e4       	ldi	r24, 0x42	; 66
     c28:	80 83       	st	Z, r24
// 	ICR1  = 625;  //	20ms

}
     c2a:	cf 91       	pop	r28
     c2c:	df 91       	pop	r29
     c2e:	08 95       	ret

00000c30 <MTIMERS_vSetPreloadValue>:

void MTIMERS_vSetPreloadValue(u8 A_u8TimerId , u16 A_u16Preload)
{
     c30:	df 93       	push	r29
     c32:	cf 93       	push	r28
     c34:	00 d0       	rcall	.+0      	; 0xc36 <MTIMERS_vSetPreloadValue+0x6>
     c36:	0f 92       	push	r0
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	89 83       	std	Y+1, r24	; 0x01
     c3e:	7b 83       	std	Y+3, r23	; 0x03
     c40:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8TimerId)
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	88 2f       	mov	r24, r24
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	00 97       	sbiw	r24, 0x00	; 0
     c4a:	21 f4       	brne	.+8      	; 0xc54 <MTIMERS_vSetPreloadValue+0x24>
	{
	case TIMER0:
		TCNT0 = A_u16Preload ;
     c4c:	e2 e5       	ldi	r30, 0x52	; 82
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	8a 81       	ldd	r24, Y+2	; 0x02
     c52:	80 83       	st	Z, r24
		break;
	}
}
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	cf 91       	pop	r28
     c5c:	df 91       	pop	r29
     c5e:	08 95       	ret

00000c60 <MTIMERS_vSetCompareValue>:
void MTIMERS_vSetCompareValue(u8 A_u8TimerId ,u16 A_u16CompareValue)
{
     c60:	df 93       	push	r29
     c62:	cf 93       	push	r28
     c64:	00 d0       	rcall	.+0      	; 0xc66 <MTIMERS_vSetCompareValue+0x6>
     c66:	00 d0       	rcall	.+0      	; 0xc68 <MTIMERS_vSetCompareValue+0x8>
     c68:	0f 92       	push	r0
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	89 83       	std	Y+1, r24	; 0x01
     c70:	7b 83       	std	Y+3, r23	; 0x03
     c72:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8TimerId)
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	28 2f       	mov	r18, r24
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	3d 83       	std	Y+5, r19	; 0x05
     c7c:	2c 83       	std	Y+4, r18	; 0x04
     c7e:	8c 81       	ldd	r24, Y+4	; 0x04
     c80:	9d 81       	ldd	r25, Y+5	; 0x05
     c82:	00 97       	sbiw	r24, 0x00	; 0
     c84:	31 f0       	breq	.+12     	; 0xc92 <MTIMERS_vSetCompareValue+0x32>
     c86:	2c 81       	ldd	r18, Y+4	; 0x04
     c88:	3d 81       	ldd	r19, Y+5	; 0x05
     c8a:	21 30       	cpi	r18, 0x01	; 1
     c8c:	31 05       	cpc	r19, r1
     c8e:	31 f0       	breq	.+12     	; 0xc9c <MTIMERS_vSetCompareValue+0x3c>
     c90:	0b c0       	rjmp	.+22     	; 0xca8 <MTIMERS_vSetCompareValue+0x48>
	{
	case TIMER0:
		OCR0 = A_u16CompareValue ;
     c92:	ec e5       	ldi	r30, 0x5C	; 92
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	8a 81       	ldd	r24, Y+2	; 0x02
     c98:	80 83       	st	Z, r24
     c9a:	06 c0       	rjmp	.+12     	; 0xca8 <MTIMERS_vSetCompareValue+0x48>
		break;
	case TIMER_1A:
		OCR1A = A_u16CompareValue ;
     c9c:	ea e4       	ldi	r30, 0x4A	; 74
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	8a 81       	ldd	r24, Y+2	; 0x02
     ca2:	9b 81       	ldd	r25, Y+3	; 0x03
     ca4:	91 83       	std	Z+1, r25	; 0x01
     ca6:	80 83       	st	Z, r24
		break;
	}
}
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	cf 91       	pop	r28
     cb4:	df 91       	pop	r29
     cb6:	08 95       	ret

00000cb8 <MTIMERS_vSetInterval_Asynch>:
void MTIMERS_vSetInterval_Asynch(u16 A_u16IntervalCounts, void (*A_fptr)(void))
{
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	00 d0       	rcall	.+0      	; 0xcbe <MTIMERS_vSetInterval_Asynch+0x6>
     cbe:	00 d0       	rcall	.+0      	; 0xcc0 <MTIMERS_vSetInterval_Asynch+0x8>
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
     cc4:	9a 83       	std	Y+2, r25	; 0x02
     cc6:	89 83       	std	Y+1, r24	; 0x01
     cc8:	7c 83       	std	Y+4, r23	; 0x04
     cca:	6b 83       	std	Y+3, r22	; 0x03
	G_u32IntervalCount = A_u16IntervalCounts ;
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	9a 81       	ldd	r25, Y+2	; 0x02
     cd0:	cc 01       	movw	r24, r24
     cd2:	a0 e0       	ldi	r26, 0x00	; 0
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	80 93 78 00 	sts	0x0078, r24
     cda:	90 93 79 00 	sts	0x0079, r25
     cde:	a0 93 7a 00 	sts	0x007A, r26
     ce2:	b0 93 7b 00 	sts	0x007B, r27
	G_TIM0_OVF_Callback = A_fptr ;
     ce6:	8b 81       	ldd	r24, Y+3	; 0x03
     ce8:	9c 81       	ldd	r25, Y+4	; 0x04
     cea:	90 93 73 00 	sts	0x0073, r25
     cee:	80 93 72 00 	sts	0x0072, r24
//	G_TIM0_Callback[TIM_CB_OVF] = A_fptr ;

	/*  start timer */
	MTIMERS_vStartTimer();
     cf2:	0e 94 ad 06 	call	0xd5a	; 0xd5a <MTIMERS_vStartTimer>

}
     cf6:	0f 90       	pop	r0
     cf8:	0f 90       	pop	r0
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	08 95       	ret

00000d04 <MTIMERS_vSetInterval_CTC_Asynch>:

void MTIMERS_vSetInterval_CTC_Asynch(u16 A_u16IntervalCounts,
									u16 A_u16CompareValue,
									void (*A_fptr)(void))
{
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	00 d0       	rcall	.+0      	; 0xd0a <MTIMERS_vSetInterval_CTC_Asynch+0x6>
     d0a:	00 d0       	rcall	.+0      	; 0xd0c <MTIMERS_vSetInterval_CTC_Asynch+0x8>
     d0c:	00 d0       	rcall	.+0      	; 0xd0e <MTIMERS_vSetInterval_CTC_Asynch+0xa>
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
     d12:	9a 83       	std	Y+2, r25	; 0x02
     d14:	89 83       	std	Y+1, r24	; 0x01
     d16:	7c 83       	std	Y+4, r23	; 0x04
     d18:	6b 83       	std	Y+3, r22	; 0x03
     d1a:	5e 83       	std	Y+6, r21	; 0x06
     d1c:	4d 83       	std	Y+5, r20	; 0x05
	G_u32IntervalCount = A_u16IntervalCounts ;
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	9a 81       	ldd	r25, Y+2	; 0x02
     d22:	cc 01       	movw	r24, r24
     d24:	a0 e0       	ldi	r26, 0x00	; 0
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	80 93 78 00 	sts	0x0078, r24
     d2c:	90 93 79 00 	sts	0x0079, r25
     d30:	a0 93 7a 00 	sts	0x007A, r26
     d34:	b0 93 7b 00 	sts	0x007B, r27
	G_TIM0_CTC_Callback = A_fptr ;
     d38:	8d 81       	ldd	r24, Y+5	; 0x05
     d3a:	9e 81       	ldd	r25, Y+6	; 0x06
     d3c:	90 93 75 00 	sts	0x0075, r25
     d40:	80 93 74 00 	sts	0x0074, r24
//	G_TIM0_Callback[TIM_CB_CTC] = AfPtr;

//	MTIMERS_vSetCompareValue(A_u16CompareValue);
	/*  start timer */
	MTIMERS_vStartTimer();
     d44:	0e 94 ad 06 	call	0xd5a	; 0xd5a <MTIMERS_vStartTimer>

}
     d48:	26 96       	adiw	r28, 0x06	; 6
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	f8 94       	cli
     d4e:	de bf       	out	0x3e, r29	; 62
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	cd bf       	out	0x3d, r28	; 61
     d54:	cf 91       	pop	r28
     d56:	df 91       	pop	r29
     d58:	08 95       	ret

00000d5a <MTIMERS_vStartTimer>:

void MTIMERS_vStartTimer(/* Timer ID ?*/)
{
     d5a:	df 93       	push	r29
     d5c:	cf 93       	push	r28
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (TCCR0 & 0xF8) | (TIMER0_PRESCALER) ;
     d62:	a3 e5       	ldi	r26, 0x53	; 83
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e3 e5       	ldi	r30, 0x53	; 83
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	88 7f       	andi	r24, 0xF8	; 248
     d6e:	82 60       	ori	r24, 0x02	; 2
     d70:	8c 93       	st	X, r24
}
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <MTIMERS_vStopTimer>:

void MTIMERS_vStopTimer(/* Timer ID ?*/)
{
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (TCCR0 & 0xF8) | (0b000) ;
     d80:	a3 e5       	ldi	r26, 0x53	; 83
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e3 e5       	ldi	r30, 0x53	; 83
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	88 7f       	andi	r24, 0xF8	; 248
     d8c:	8c 93       	st	X, r24
}
     d8e:	cf 91       	pop	r28
     d90:	df 91       	pop	r29
     d92:	08 95       	ret

00000d94 <MTIMERS_u16GetElapsedTime>:




u16 MTIMERS_u16GetElapsedTime(u8 A_u8TimerId)
{
     d94:	df 93       	push	r29
     d96:	cf 93       	push	r28
     d98:	00 d0       	rcall	.+0      	; 0xd9a <MTIMERS_u16GetElapsedTime+0x6>
     d9a:	00 d0       	rcall	.+0      	; 0xd9c <MTIMERS_u16GetElapsedTime+0x8>
     d9c:	0f 92       	push	r0
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
     da2:	8b 83       	std	Y+3, r24	; 0x03

	u16 L_u16ElapsedTime =0 ;
     da4:	1a 82       	std	Y+2, r1	; 0x02
     da6:	19 82       	std	Y+1, r1	; 0x01
	switch(A_u8TimerId)
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	3d 83       	std	Y+5, r19	; 0x05
     db0:	2c 83       	std	Y+4, r18	; 0x04
     db2:	8c 81       	ldd	r24, Y+4	; 0x04
     db4:	9d 81       	ldd	r25, Y+5	; 0x05
     db6:	00 97       	sbiw	r24, 0x00	; 0
     db8:	31 f0       	breq	.+12     	; 0xdc6 <MTIMERS_u16GetElapsedTime+0x32>
     dba:	2c 81       	ldd	r18, Y+4	; 0x04
     dbc:	3d 81       	ldd	r19, Y+5	; 0x05
     dbe:	22 30       	cpi	r18, 0x02	; 2
     dc0:	31 05       	cpc	r19, r1
     dc2:	49 f0       	breq	.+18     	; 0xdd6 <MTIMERS_u16GetElapsedTime+0x42>
     dc4:	0e c0       	rjmp	.+28     	; 0xde2 <MTIMERS_u16GetElapsedTime+0x4e>
	{
	case TIMER0:
		L_u16ElapsedTime =TCNT0;
     dc6:	e2 e5       	ldi	r30, 0x52	; 82
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	88 2f       	mov	r24, r24
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	9a 83       	std	Y+2, r25	; 0x02
     dd2:	89 83       	std	Y+1, r24	; 0x01
     dd4:	06 c0       	rjmp	.+12     	; 0xde2 <MTIMERS_u16GetElapsedTime+0x4e>
		break;
	case TIMER1:
		L_u16ElapsedTime =TCNT1;
     dd6:	ec e4       	ldi	r30, 0x4C	; 76
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	91 81       	ldd	r25, Z+1	; 0x01
     dde:	9a 83       	std	Y+2, r25	; 0x02
     de0:	89 83       	std	Y+1, r24	; 0x01
		break;

	}

	return L_u16ElapsedTime;
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	9a 81       	ldd	r25, Y+2	; 0x02

}
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	08 95       	ret

00000df6 <MTIMERS_u16GetCapturedTme>:

u16 MTIMERS_u16GetCapturedTme(void){
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
     dfe:	e6 e4       	ldi	r30, 0x46	; 70
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	91 81       	ldd	r25, Z+1	; 0x01

}
     e06:	cf 91       	pop	r28
     e08:	df 91       	pop	r29
     e0a:	08 95       	ret

00000e0c <MTIMERS_vSetIcuTrigger>:


void MTIMERS_vSetIcuTrigger(ICU_Trigger_t A_xIcuTrigger){
     e0c:	df 93       	push	r29
     e0e:	cf 93       	push	r28
     e10:	00 d0       	rcall	.+0      	; 0xe12 <MTIMERS_vSetIcuTrigger+0x6>
     e12:	0f 92       	push	r0
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
     e18:	89 83       	std	Y+1, r24	; 0x01

	switch(A_xIcuTrigger){
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	3b 83       	std	Y+3, r19	; 0x03
     e22:	2a 83       	std	Y+2, r18	; 0x02
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	9b 81       	ldd	r25, Y+3	; 0x03
     e28:	00 97       	sbiw	r24, 0x00	; 0
     e2a:	31 f0       	breq	.+12     	; 0xe38 <MTIMERS_vSetIcuTrigger+0x2c>
     e2c:	2a 81       	ldd	r18, Y+2	; 0x02
     e2e:	3b 81       	ldd	r19, Y+3	; 0x03
     e30:	21 30       	cpi	r18, 0x01	; 1
     e32:	31 05       	cpc	r19, r1
     e34:	49 f0       	breq	.+18     	; 0xe48 <MTIMERS_vSetIcuTrigger+0x3c>
     e36:	0f c0       	rjmp	.+30     	; 0xe56 <MTIMERS_vSetIcuTrigger+0x4a>
	case ICU_Falling:
		CLR_BIT(TCCR1B,6); //ICES
     e38:	ae e4       	ldi	r26, 0x4E	; 78
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	ee e4       	ldi	r30, 0x4E	; 78
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	8f 7b       	andi	r24, 0xBF	; 191
     e44:	8c 93       	st	X, r24
     e46:	07 c0       	rjmp	.+14     	; 0xe56 <MTIMERS_vSetIcuTrigger+0x4a>
		break;
	case ICU_Rising:
		SET_BIT(TCCR1B,6);
     e48:	ae e4       	ldi	r26, 0x4E	; 78
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	ee e4       	ldi	r30, 0x4E	; 78
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	80 64       	ori	r24, 0x40	; 64
     e54:	8c 93       	st	X, r24
		break;

	}

}
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <MTIMERS_vEnableInterrupt>:
void MTIMERS_vEnableInterrupt()/* Timer ID ?*/ //u8 A_u8InterruptType){
{
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,5);
     e6a:	a9 e5       	ldi	r26, 0x59	; 89
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e9 e5       	ldi	r30, 0x59	; 89
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	80 62       	ori	r24, 0x20	; 32
     e76:	8c 93       	st	X, r24
}
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <MTIMERS_vDisableInterrupt>:
void MTIMERS_vDisableInterrupt(/* Timer ID ?*/ u8 A_u8InterruptType){
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	0f 92       	push	r0
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(TIMSK,5);
     e8a:	a9 e5       	ldi	r26, 0x59	; 89
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e9 e5       	ldi	r30, 0x59	; 89
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	8f 7d       	andi	r24, 0xDF	; 223
     e96:	8c 93       	st	X, r24

}
     e98:	0f 90       	pop	r0
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	08 95       	ret

00000ea0 <MTIMERS_vSetCallback>:
void MTIMERS_vSetCallback( /* Timer ID ?*/ void (*A_xfptr)(void))
{
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <MTIMERS_vSetCallback+0x6>
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	9a 83       	std	Y+2, r25	; 0x02
     eac:	89 83       	std	Y+1, r24	; 0x01
	GS_TIM1_ICU_Callback=A_xfptr;
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	9a 81       	ldd	r25, Y+2	; 0x02
     eb2:	90 93 77 00 	sts	0x0077, r25
     eb6:	80 93 76 00 	sts	0x0076, r24
}
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	08 95       	ret

00000ec4 <__vector_11>:


/* Timer 0 Overflow ISR */
void __vector_11(void)  __attribute__((signal));
void __vector_11(void)
{
     ec4:	1f 92       	push	r1
     ec6:	0f 92       	push	r0
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	0f 92       	push	r0
     ecc:	11 24       	eor	r1, r1
     ece:	2f 93       	push	r18
     ed0:	3f 93       	push	r19
     ed2:	4f 93       	push	r20
     ed4:	5f 93       	push	r21
     ed6:	6f 93       	push	r22
     ed8:	7f 93       	push	r23
     eda:	8f 93       	push	r24
     edc:	9f 93       	push	r25
     ede:	af 93       	push	r26
     ee0:	bf 93       	push	r27
     ee2:	ef 93       	push	r30
     ee4:	ff 93       	push	r31
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
	static u32 LS_u32Counter = 0;

	LS_u32Counter++ ;
     eee:	80 91 6a 00 	lds	r24, 0x006A
     ef2:	90 91 6b 00 	lds	r25, 0x006B
     ef6:	a0 91 6c 00 	lds	r26, 0x006C
     efa:	b0 91 6d 00 	lds	r27, 0x006D
     efe:	01 96       	adiw	r24, 0x01	; 1
     f00:	a1 1d       	adc	r26, r1
     f02:	b1 1d       	adc	r27, r1
     f04:	80 93 6a 00 	sts	0x006A, r24
     f08:	90 93 6b 00 	sts	0x006B, r25
     f0c:	a0 93 6c 00 	sts	0x006C, r26
     f10:	b0 93 6d 00 	sts	0x006D, r27

	if(LS_u32Counter == G_u32IntervalCount)
     f14:	20 91 6a 00 	lds	r18, 0x006A
     f18:	30 91 6b 00 	lds	r19, 0x006B
     f1c:	40 91 6c 00 	lds	r20, 0x006C
     f20:	50 91 6d 00 	lds	r21, 0x006D
     f24:	80 91 78 00 	lds	r24, 0x0078
     f28:	90 91 79 00 	lds	r25, 0x0079
     f2c:	a0 91 7a 00 	lds	r26, 0x007A
     f30:	b0 91 7b 00 	lds	r27, 0x007B
     f34:	28 17       	cp	r18, r24
     f36:	39 07       	cpc	r19, r25
     f38:	4a 07       	cpc	r20, r26
     f3a:	5b 07       	cpc	r21, r27
     f3c:	99 f4       	brne	.+38     	; 0xf64 <__vector_11+0xa0>
	{
		if(G_TIM0_OVF_Callback != NULL)
     f3e:	80 91 72 00 	lds	r24, 0x0072
     f42:	90 91 73 00 	lds	r25, 0x0073
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	69 f0       	breq	.+26     	; 0xf64 <__vector_11+0xa0>
		{
			G_TIM0_OVF_Callback();
     f4a:	e0 91 72 00 	lds	r30, 0x0072
     f4e:	f0 91 73 00 	lds	r31, 0x0073
     f52:	09 95       	icall
			LS_u32Counter = 0;
     f54:	10 92 6a 00 	sts	0x006A, r1
     f58:	10 92 6b 00 	sts	0x006B, r1
     f5c:	10 92 6c 00 	sts	0x006C, r1
     f60:	10 92 6d 00 	sts	0x006D, r1
		}
	}
}
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	ff 91       	pop	r31
     f6a:	ef 91       	pop	r30
     f6c:	bf 91       	pop	r27
     f6e:	af 91       	pop	r26
     f70:	9f 91       	pop	r25
     f72:	8f 91       	pop	r24
     f74:	7f 91       	pop	r23
     f76:	6f 91       	pop	r22
     f78:	5f 91       	pop	r21
     f7a:	4f 91       	pop	r20
     f7c:	3f 91       	pop	r19
     f7e:	2f 91       	pop	r18
     f80:	0f 90       	pop	r0
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	0f 90       	pop	r0
     f86:	1f 90       	pop	r1
     f88:	18 95       	reti

00000f8a <__vector_10>:

/* Timer 0 CTC ISR */
void __vector_10(void) __attribute__((signal))  ;
void __vector_10(void)
{
     f8a:	1f 92       	push	r1
     f8c:	0f 92       	push	r0
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	0f 92       	push	r0
     f92:	11 24       	eor	r1, r1
     f94:	2f 93       	push	r18
     f96:	3f 93       	push	r19
     f98:	4f 93       	push	r20
     f9a:	5f 93       	push	r21
     f9c:	6f 93       	push	r22
     f9e:	7f 93       	push	r23
     fa0:	8f 93       	push	r24
     fa2:	9f 93       	push	r25
     fa4:	af 93       	push	r26
     fa6:	bf 93       	push	r27
     fa8:	ef 93       	push	r30
     faa:	ff 93       	push	r31
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
	static u32 LS_u32Counter = 0;

	LS_u32Counter++ ;
     fb4:	80 91 6e 00 	lds	r24, 0x006E
     fb8:	90 91 6f 00 	lds	r25, 0x006F
     fbc:	a0 91 70 00 	lds	r26, 0x0070
     fc0:	b0 91 71 00 	lds	r27, 0x0071
     fc4:	01 96       	adiw	r24, 0x01	; 1
     fc6:	a1 1d       	adc	r26, r1
     fc8:	b1 1d       	adc	r27, r1
     fca:	80 93 6e 00 	sts	0x006E, r24
     fce:	90 93 6f 00 	sts	0x006F, r25
     fd2:	a0 93 70 00 	sts	0x0070, r26
     fd6:	b0 93 71 00 	sts	0x0071, r27

	if(LS_u32Counter == G_u32IntervalCount)
     fda:	20 91 6e 00 	lds	r18, 0x006E
     fde:	30 91 6f 00 	lds	r19, 0x006F
     fe2:	40 91 70 00 	lds	r20, 0x0070
     fe6:	50 91 71 00 	lds	r21, 0x0071
     fea:	80 91 78 00 	lds	r24, 0x0078
     fee:	90 91 79 00 	lds	r25, 0x0079
     ff2:	a0 91 7a 00 	lds	r26, 0x007A
     ff6:	b0 91 7b 00 	lds	r27, 0x007B
     ffa:	28 17       	cp	r18, r24
     ffc:	39 07       	cpc	r19, r25
     ffe:	4a 07       	cpc	r20, r26
    1000:	5b 07       	cpc	r21, r27
    1002:	99 f4       	brne	.+38     	; 0x102a <__vector_10+0xa0>
	{
		if(G_TIM0_CTC_Callback != NULL)
    1004:	80 91 74 00 	lds	r24, 0x0074
    1008:	90 91 75 00 	lds	r25, 0x0075
    100c:	00 97       	sbiw	r24, 0x00	; 0
    100e:	69 f0       	breq	.+26     	; 0x102a <__vector_10+0xa0>
		{
			G_TIM0_CTC_Callback();
    1010:	e0 91 74 00 	lds	r30, 0x0074
    1014:	f0 91 75 00 	lds	r31, 0x0075
    1018:	09 95       	icall
			LS_u32Counter = 0;
    101a:	10 92 6e 00 	sts	0x006E, r1
    101e:	10 92 6f 00 	sts	0x006F, r1
    1022:	10 92 70 00 	sts	0x0070, r1
    1026:	10 92 71 00 	sts	0x0071, r1
		}
	}
}
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	ff 91       	pop	r31
    1030:	ef 91       	pop	r30
    1032:	bf 91       	pop	r27
    1034:	af 91       	pop	r26
    1036:	9f 91       	pop	r25
    1038:	8f 91       	pop	r24
    103a:	7f 91       	pop	r23
    103c:	6f 91       	pop	r22
    103e:	5f 91       	pop	r21
    1040:	4f 91       	pop	r20
    1042:	3f 91       	pop	r19
    1044:	2f 91       	pop	r18
    1046:	0f 90       	pop	r0
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	0f 90       	pop	r0
    104c:	1f 90       	pop	r1
    104e:	18 95       	reti

00001050 <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    1050:	1f 92       	push	r1
    1052:	0f 92       	push	r0
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	0f 92       	push	r0
    1058:	11 24       	eor	r1, r1
    105a:	2f 93       	push	r18
    105c:	3f 93       	push	r19
    105e:	4f 93       	push	r20
    1060:	5f 93       	push	r21
    1062:	6f 93       	push	r22
    1064:	7f 93       	push	r23
    1066:	8f 93       	push	r24
    1068:	9f 93       	push	r25
    106a:	af 93       	push	r26
    106c:	bf 93       	push	r27
    106e:	ef 93       	push	r30
    1070:	ff 93       	push	r31
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
	GS_TIM1_ICU_Callback();
    107a:	e0 91 76 00 	lds	r30, 0x0076
    107e:	f0 91 77 00 	lds	r31, 0x0077
    1082:	09 95       	icall
}
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	ff 91       	pop	r31
    108a:	ef 91       	pop	r30
    108c:	bf 91       	pop	r27
    108e:	af 91       	pop	r26
    1090:	9f 91       	pop	r25
    1092:	8f 91       	pop	r24
    1094:	7f 91       	pop	r23
    1096:	6f 91       	pop	r22
    1098:	5f 91       	pop	r21
    109a:	4f 91       	pop	r20
    109c:	3f 91       	pop	r19
    109e:	2f 91       	pop	r18
    10a0:	0f 90       	pop	r0
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	0f 90       	pop	r0
    10a6:	1f 90       	pop	r1
    10a8:	18 95       	reti

000010aa <MGIE_vEnableGlobalInterrupt>:

#include"GIE_int.h"



void MGIE_vEnableGlobalInterrupt(void){
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(SREG,7);
    10b2:	af e5       	ldi	r26, 0x5F	; 95
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	ef e5       	ldi	r30, 0x5F	; 95
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	80 68       	ori	r24, 0x80	; 128
    10be:	8c 93       	st	X, r24

}
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <MGIE_vDisableGlobalInterrupt>:
void MGIE_vDisableGlobalInterrupt(void){
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    10ce:	af e5       	ldi	r26, 0x5F	; 95
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	ef e5       	ldi	r30, 0x5F	; 95
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	8f 77       	andi	r24, 0x7F	; 127
    10da:	8c 93       	st	X, r24


}
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <MEXTI_vInit>:

#include "EXTI_int.h"
#include "EXTI_cfg.h"

void MEXTI_vInit(void)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62

#if EXTI_LINE0==ENABLE
	/* 1- Sense control    */
#if EXTI_LIN0_SENSE_CTRL==EXTI_FALLING
	/* Falling Edge for INT0 */
	SET_BIT(MCUCR, 3);
    10ea:	a5 e5       	ldi	r26, 0x55	; 85
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e5 e5       	ldi	r30, 0x55	; 85
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	88 60       	ori	r24, 0x08	; 8
    10f6:	8c 93       	st	X, r24
	CLR_BIT(MCUCR, 2);
    10f8:	a5 e5       	ldi	r26, 0x55	; 85
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e5 e5       	ldi	r30, 0x55	; 85
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	8b 7f       	andi	r24, 0xFB	; 251
    1104:	8c 93       	st	X, r24
	SET_BIT(MCUCR, 2);
#else
#error "Sense Control must be Falling, Rising, ..."
#endif
	/* 2- Enable interrupt */
	SET_BIT(GICR, 6);
    1106:	ab e5       	ldi	r26, 0x5B	; 91
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	eb e5       	ldi	r30, 0x5B	; 91
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	80 64       	ori	r24, 0x40	; 64
    1112:	8c 93       	st	X, r24
#endif

#if EXTI_LINE1==ENABLE
	/* 1- Sense control    */
	/* Falling Edge for INT0 */
	SET_BIT(MCUCR, 1);
    1114:	a5 e5       	ldi	r26, 0x55	; 85
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e5 e5       	ldi	r30, 0x55	; 85
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	82 60       	ori	r24, 0x02	; 2
    1120:	8c 93       	st	X, r24
	CLR_BIT(MCUCR, 0);
    1122:	a5 e5       	ldi	r26, 0x55	; 85
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e5 e5       	ldi	r30, 0x55	; 85
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	8e 7f       	andi	r24, 0xFE	; 254
    112e:	8c 93       	st	X, r24
	/* 2- Enable interrupt */
	SET_BIT(GICR, 6);
    1130:	ab e5       	ldi	r26, 0x5B	; 91
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	eb e5       	ldi	r30, 0x5B	; 91
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	80 64       	ori	r24, 0x40	; 64
    113c:	8c 93       	st	X, r24
#endif

#if EXTI_LINE2==ENABLE
	/* 1- Sense control    */
	/* Falling Edge for INT0 */
	SET_BIT(MCUCSR, 6);
    113e:	a4 e5       	ldi	r26, 0x54	; 84
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e4 e5       	ldi	r30, 0x54	; 84
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	80 64       	ori	r24, 0x40	; 64
    114a:	8c 93       	st	X, r24
	/* 2- Enable interrupt */
	SET_BIT(GICR, 6);
    114c:	ab e5       	ldi	r26, 0x5B	; 91
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	eb e5       	ldi	r30, 0x5B	; 91
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	80 64       	ori	r24, 0x40	; 64
    1158:	8c 93       	st	X, r24
#endif



}
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <MEXTI_vEnableInterrupt>:

void MEXTI_vEnableInterrupt(u8 A_u8ExtiLineNo)
{
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	0f 92       	push	r0
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	89 83       	std	Y+1, r24	; 0x01

}
    116c:	0f 90       	pop	r0
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <MEXTI_vDisableInterrupt>:

void MEXTI_vDisableInterrupt(u8 A_u8ExtiLineNo)
{
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	0f 92       	push	r0
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	89 83       	std	Y+1, r24	; 0x01

}
    1180:	0f 90       	pop	r0
    1182:	cf 91       	pop	r28
    1184:	df 91       	pop	r29
    1186:	08 95       	ret

00001188 <MEXTI_vSetSenseControl>:

void MEXTI_vSetSenseControl(u8 A_u8ExtiLineNo, u8 A_u8SenseCtrl)
{
    1188:	df 93       	push	r29
    118a:	cf 93       	push	r28
    118c:	00 d0       	rcall	.+0      	; 0x118e <MEXTI_vSetSenseControl+0x6>
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	6a 83       	std	Y+2, r22	; 0x02

}
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	cf 91       	pop	r28
    119c:	df 91       	pop	r29
    119e:	08 95       	ret

000011a0 <MDIO_vSetPinDIR>:




Error_t MDIO_vSetPinDIR(u8 A_u8PortNo , u8 A_u8PinNo , u8 A_u8Dir)
{
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	28 97       	sbiw	r28, 0x08	; 8
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	8a 83       	std	Y+2, r24	; 0x02
    11b6:	6b 83       	std	Y+3, r22	; 0x03
    11b8:	4c 83       	std	Y+4, r20	; 0x04
	Error_t err= OK;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	89 83       	std	Y+1, r24	; 0x01
	if (A_u8Dir== DIO_OUTPUT)
    11be:	8c 81       	ldd	r24, Y+4	; 0x04
    11c0:	81 30       	cpi	r24, 0x01	; 1
    11c2:	09 f0       	breq	.+2      	; 0x11c6 <MDIO_vSetPinDIR+0x26>
    11c4:	6f c0       	rjmp	.+222    	; 0x12a4 <MDIO_vSetPinDIR+0x104>
	{
		switch(A_u8PortNo)
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	38 87       	std	Y+8, r19	; 0x08
    11ce:	2f 83       	std	Y+7, r18	; 0x07
    11d0:	8f 81       	ldd	r24, Y+7	; 0x07
    11d2:	98 85       	ldd	r25, Y+8	; 0x08
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	91 05       	cpc	r25, r1
    11d8:	49 f1       	breq	.+82     	; 0x122c <MDIO_vSetPinDIR+0x8c>
    11da:	2f 81       	ldd	r18, Y+7	; 0x07
    11dc:	38 85       	ldd	r19, Y+8	; 0x08
    11de:	22 30       	cpi	r18, 0x02	; 2
    11e0:	31 05       	cpc	r19, r1
    11e2:	2c f4       	brge	.+10     	; 0x11ee <MDIO_vSetPinDIR+0x4e>
    11e4:	8f 81       	ldd	r24, Y+7	; 0x07
    11e6:	98 85       	ldd	r25, Y+8	; 0x08
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	61 f0       	breq	.+24     	; 0x1204 <MDIO_vSetPinDIR+0x64>
    11ec:	d4 c0       	rjmp	.+424    	; 0x1396 <MDIO_vSetPinDIR+0x1f6>
    11ee:	2f 81       	ldd	r18, Y+7	; 0x07
    11f0:	38 85       	ldd	r19, Y+8	; 0x08
    11f2:	22 30       	cpi	r18, 0x02	; 2
    11f4:	31 05       	cpc	r19, r1
    11f6:	71 f1       	breq	.+92     	; 0x1254 <MDIO_vSetPinDIR+0xb4>
    11f8:	8f 81       	ldd	r24, Y+7	; 0x07
    11fa:	98 85       	ldd	r25, Y+8	; 0x08
    11fc:	83 30       	cpi	r24, 0x03	; 3
    11fe:	91 05       	cpc	r25, r1
    1200:	e9 f1       	breq	.+122    	; 0x127c <MDIO_vSetPinDIR+0xdc>
    1202:	c9 c0       	rjmp	.+402    	; 0x1396 <MDIO_vSetPinDIR+0x1f6>
		{
			case DIO_PORTA:
				SET_BIT(DDRA , A_u8PinNo);
    1204:	aa e3       	ldi	r26, 0x3A	; 58
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	ea e3       	ldi	r30, 0x3A	; 58
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	48 2f       	mov	r20, r24
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	02 2e       	mov	r0, r18
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <MDIO_vSetPinDIR+0x82>
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	0a 94       	dec	r0
    1224:	e2 f7       	brpl	.-8      	; 0x121e <MDIO_vSetPinDIR+0x7e>
    1226:	84 2b       	or	r24, r20
    1228:	8c 93       	st	X, r24
    122a:	b5 c0       	rjmp	.+362    	; 0x1396 <MDIO_vSetPinDIR+0x1f6>
				break;
			case DIO_PORTB:
				SET_BIT(DDRB , A_u8PinNo);
    122c:	a7 e3       	ldi	r26, 0x37	; 55
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e7 e3       	ldi	r30, 0x37	; 55
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	48 2f       	mov	r20, r24
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	02 2e       	mov	r0, r18
    1244:	02 c0       	rjmp	.+4      	; 0x124a <MDIO_vSetPinDIR+0xaa>
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	0a 94       	dec	r0
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <MDIO_vSetPinDIR+0xa6>
    124e:	84 2b       	or	r24, r20
    1250:	8c 93       	st	X, r24
    1252:	a1 c0       	rjmp	.+322    	; 0x1396 <MDIO_vSetPinDIR+0x1f6>
				break;
			case DIO_PORTC:
				SET_BIT(DDRC , A_u8PinNo);
    1254:	a4 e3       	ldi	r26, 0x34	; 52
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e4 e3       	ldi	r30, 0x34	; 52
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	48 2f       	mov	r20, r24
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	02 2e       	mov	r0, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <MDIO_vSetPinDIR+0xd2>
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	0a 94       	dec	r0
    1274:	e2 f7       	brpl	.-8      	; 0x126e <MDIO_vSetPinDIR+0xce>
    1276:	84 2b       	or	r24, r20
    1278:	8c 93       	st	X, r24
    127a:	8d c0       	rjmp	.+282    	; 0x1396 <MDIO_vSetPinDIR+0x1f6>
				break;
			case DIO_PORTD:
				SET_BIT(DDRD , A_u8PinNo);
    127c:	a1 e3       	ldi	r26, 0x31	; 49
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e1 e3       	ldi	r30, 0x31	; 49
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	48 2f       	mov	r20, r24
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 2e       	mov	r0, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <MDIO_vSetPinDIR+0xfa>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <MDIO_vSetPinDIR+0xf6>
    129e:	84 2b       	or	r24, r20
    12a0:	8c 93       	st	X, r24
    12a2:	79 c0       	rjmp	.+242    	; 0x1396 <MDIO_vSetPinDIR+0x1f6>
				break;
		}
	}
	else if(A_u8Dir== DIO_INPUT)
    12a4:	8c 81       	ldd	r24, Y+4	; 0x04
    12a6:	88 23       	and	r24, r24
    12a8:	09 f0       	breq	.+2      	; 0x12ac <MDIO_vSetPinDIR+0x10c>
    12aa:	74 c0       	rjmp	.+232    	; 0x1394 <MDIO_vSetPinDIR+0x1f4>
	{
		switch(A_u8PortNo)
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	3e 83       	std	Y+6, r19	; 0x06
    12b4:	2d 83       	std	Y+5, r18	; 0x05
    12b6:	8d 81       	ldd	r24, Y+5	; 0x05
    12b8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ba:	81 30       	cpi	r24, 0x01	; 1
    12bc:	91 05       	cpc	r25, r1
    12be:	59 f1       	breq	.+86     	; 0x1316 <MDIO_vSetPinDIR+0x176>
    12c0:	2d 81       	ldd	r18, Y+5	; 0x05
    12c2:	3e 81       	ldd	r19, Y+6	; 0x06
    12c4:	22 30       	cpi	r18, 0x02	; 2
    12c6:	31 05       	cpc	r19, r1
    12c8:	2c f4       	brge	.+10     	; 0x12d4 <MDIO_vSetPinDIR+0x134>
    12ca:	8d 81       	ldd	r24, Y+5	; 0x05
    12cc:	9e 81       	ldd	r25, Y+6	; 0x06
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	69 f0       	breq	.+26     	; 0x12ec <MDIO_vSetPinDIR+0x14c>
    12d2:	61 c0       	rjmp	.+194    	; 0x1396 <MDIO_vSetPinDIR+0x1f6>
    12d4:	2d 81       	ldd	r18, Y+5	; 0x05
    12d6:	3e 81       	ldd	r19, Y+6	; 0x06
    12d8:	22 30       	cpi	r18, 0x02	; 2
    12da:	31 05       	cpc	r19, r1
    12dc:	89 f1       	breq	.+98     	; 0x1340 <MDIO_vSetPinDIR+0x1a0>
    12de:	8d 81       	ldd	r24, Y+5	; 0x05
    12e0:	9e 81       	ldd	r25, Y+6	; 0x06
    12e2:	83 30       	cpi	r24, 0x03	; 3
    12e4:	91 05       	cpc	r25, r1
    12e6:	09 f4       	brne	.+2      	; 0x12ea <MDIO_vSetPinDIR+0x14a>
    12e8:	40 c0       	rjmp	.+128    	; 0x136a <MDIO_vSetPinDIR+0x1ca>
    12ea:	55 c0       	rjmp	.+170    	; 0x1396 <MDIO_vSetPinDIR+0x1f6>
		{
			case DIO_PORTA:
				CLR_BIT(DDRA , A_u8PinNo);
    12ec:	aa e3       	ldi	r26, 0x3A	; 58
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	ea e3       	ldi	r30, 0x3A	; 58
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	48 2f       	mov	r20, r24
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	02 2e       	mov	r0, r18
    1304:	02 c0       	rjmp	.+4      	; 0x130a <MDIO_vSetPinDIR+0x16a>
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	0a 94       	dec	r0
    130c:	e2 f7       	brpl	.-8      	; 0x1306 <MDIO_vSetPinDIR+0x166>
    130e:	80 95       	com	r24
    1310:	84 23       	and	r24, r20
    1312:	8c 93       	st	X, r24
    1314:	40 c0       	rjmp	.+128    	; 0x1396 <MDIO_vSetPinDIR+0x1f6>
				break;
			case DIO_PORTB:
				CLR_BIT(DDRB , A_u8PinNo);
    1316:	a7 e3       	ldi	r26, 0x37	; 55
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e7 e3       	ldi	r30, 0x37	; 55
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	48 2f       	mov	r20, r24
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	02 2e       	mov	r0, r18
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <MDIO_vSetPinDIR+0x194>
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	0a 94       	dec	r0
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <MDIO_vSetPinDIR+0x190>
    1338:	80 95       	com	r24
    133a:	84 23       	and	r24, r20
    133c:	8c 93       	st	X, r24
    133e:	2b c0       	rjmp	.+86     	; 0x1396 <MDIO_vSetPinDIR+0x1f6>
				break;
			case DIO_PORTC:
				CLR_BIT(DDRC , A_u8PinNo);
    1340:	a4 e3       	ldi	r26, 0x34	; 52
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e4 e3       	ldi	r30, 0x34	; 52
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	48 2f       	mov	r20, r24
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 2e       	mov	r0, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <MDIO_vSetPinDIR+0x1be>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	0a 94       	dec	r0
    1360:	e2 f7       	brpl	.-8      	; 0x135a <MDIO_vSetPinDIR+0x1ba>
    1362:	80 95       	com	r24
    1364:	84 23       	and	r24, r20
    1366:	8c 93       	st	X, r24
    1368:	16 c0       	rjmp	.+44     	; 0x1396 <MDIO_vSetPinDIR+0x1f6>
				break;
			case DIO_PORTD:
				CLR_BIT(DDRD , A_u8PinNo);
    136a:	a1 e3       	ldi	r26, 0x31	; 49
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e1 e3       	ldi	r30, 0x31	; 49
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	48 2f       	mov	r20, r24
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	02 2e       	mov	r0, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <MDIO_vSetPinDIR+0x1e8>
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	0a 94       	dec	r0
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <MDIO_vSetPinDIR+0x1e4>
    138c:	80 95       	com	r24
    138e:	84 23       	and	r24, r20
    1390:	8c 93       	st	X, r24
    1392:	01 c0       	rjmp	.+2      	; 0x1396 <MDIO_vSetPinDIR+0x1f6>
		}
	}
	else{


		err= NOK;
    1394:	19 82       	std	Y+1, r1	; 0x01
	}
	return err;
    1396:	89 81       	ldd	r24, Y+1	; 0x01
}
    1398:	28 96       	adiw	r28, 0x08	; 8
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	de bf       	out	0x3e, r29	; 62
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	08 95       	ret

000013aa <MDIO_vSetPinVal>:
void MDIO_vSetPinVal(u8 A_u8PortNo , u8 A_u8PinNo , u8 A_u8Val)
{
    13aa:	df 93       	push	r29
    13ac:	cf 93       	push	r28
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    13b2:	27 97       	sbiw	r28, 0x07	; 7
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	de bf       	out	0x3e, r29	; 62
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	cd bf       	out	0x3d, r28	; 61
    13be:	89 83       	std	Y+1, r24	; 0x01
    13c0:	6a 83       	std	Y+2, r22	; 0x02
    13c2:	4b 83       	std	Y+3, r20	; 0x03

	if (A_u8Val== DIO_HIGH)
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	81 30       	cpi	r24, 0x01	; 1
    13c8:	09 f0       	breq	.+2      	; 0x13cc <MDIO_vSetPinVal+0x22>
    13ca:	6f c0       	rjmp	.+222    	; 0x14aa <MDIO_vSetPinVal+0x100>
	{
		switch(A_u8PortNo)
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	3f 83       	std	Y+7, r19	; 0x07
    13d4:	2e 83       	std	Y+6, r18	; 0x06
    13d6:	8e 81       	ldd	r24, Y+6	; 0x06
    13d8:	9f 81       	ldd	r25, Y+7	; 0x07
    13da:	81 30       	cpi	r24, 0x01	; 1
    13dc:	91 05       	cpc	r25, r1
    13de:	49 f1       	breq	.+82     	; 0x1432 <MDIO_vSetPinVal+0x88>
    13e0:	2e 81       	ldd	r18, Y+6	; 0x06
    13e2:	3f 81       	ldd	r19, Y+7	; 0x07
    13e4:	22 30       	cpi	r18, 0x02	; 2
    13e6:	31 05       	cpc	r19, r1
    13e8:	2c f4       	brge	.+10     	; 0x13f4 <MDIO_vSetPinVal+0x4a>
    13ea:	8e 81       	ldd	r24, Y+6	; 0x06
    13ec:	9f 81       	ldd	r25, Y+7	; 0x07
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	61 f0       	breq	.+24     	; 0x140a <MDIO_vSetPinVal+0x60>
    13f2:	d2 c0       	rjmp	.+420    	; 0x1598 <MDIO_vSetPinVal+0x1ee>
    13f4:	2e 81       	ldd	r18, Y+6	; 0x06
    13f6:	3f 81       	ldd	r19, Y+7	; 0x07
    13f8:	22 30       	cpi	r18, 0x02	; 2
    13fa:	31 05       	cpc	r19, r1
    13fc:	71 f1       	breq	.+92     	; 0x145a <MDIO_vSetPinVal+0xb0>
    13fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1400:	9f 81       	ldd	r25, Y+7	; 0x07
    1402:	83 30       	cpi	r24, 0x03	; 3
    1404:	91 05       	cpc	r25, r1
    1406:	e9 f1       	breq	.+122    	; 0x1482 <MDIO_vSetPinVal+0xd8>
    1408:	c7 c0       	rjmp	.+398    	; 0x1598 <MDIO_vSetPinVal+0x1ee>
		{
			case DIO_PORTA:
				SET_BIT(PORTA , A_u8PinNo);
    140a:	ab e3       	ldi	r26, 0x3B	; 59
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	eb e3       	ldi	r30, 0x3B	; 59
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	48 2f       	mov	r20, r24
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	02 2e       	mov	r0, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <MDIO_vSetPinVal+0x7e>
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	0a 94       	dec	r0
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <MDIO_vSetPinVal+0x7a>
    142c:	84 2b       	or	r24, r20
    142e:	8c 93       	st	X, r24
    1430:	b3 c0       	rjmp	.+358    	; 0x1598 <MDIO_vSetPinVal+0x1ee>
				break;
			case DIO_PORTB:
				SET_BIT(PORTB , A_u8PinNo);
    1432:	a8 e3       	ldi	r26, 0x38	; 56
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e8 e3       	ldi	r30, 0x38	; 56
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	48 2f       	mov	r20, r24
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	02 2e       	mov	r0, r18
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <MDIO_vSetPinVal+0xa6>
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	0a 94       	dec	r0
    1452:	e2 f7       	brpl	.-8      	; 0x144c <MDIO_vSetPinVal+0xa2>
    1454:	84 2b       	or	r24, r20
    1456:	8c 93       	st	X, r24
    1458:	9f c0       	rjmp	.+318    	; 0x1598 <MDIO_vSetPinVal+0x1ee>
				break;
			case DIO_PORTC:
				SET_BIT(PORTC , A_u8PinNo);
    145a:	a5 e3       	ldi	r26, 0x35	; 53
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e5 e3       	ldi	r30, 0x35	; 53
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	48 2f       	mov	r20, r24
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	02 2e       	mov	r0, r18
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <MDIO_vSetPinVal+0xce>
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	0a 94       	dec	r0
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <MDIO_vSetPinVal+0xca>
    147c:	84 2b       	or	r24, r20
    147e:	8c 93       	st	X, r24
    1480:	8b c0       	rjmp	.+278    	; 0x1598 <MDIO_vSetPinVal+0x1ee>
				break;
			case DIO_PORTD:
				SET_BIT(PORTD , A_u8PinNo);
    1482:	a2 e3       	ldi	r26, 0x32	; 50
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e2 e3       	ldi	r30, 0x32	; 50
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	48 2f       	mov	r20, r24
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	02 2e       	mov	r0, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <MDIO_vSetPinVal+0xf6>
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	0a 94       	dec	r0
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <MDIO_vSetPinVal+0xf2>
    14a4:	84 2b       	or	r24, r20
    14a6:	8c 93       	st	X, r24
    14a8:	77 c0       	rjmp	.+238    	; 0x1598 <MDIO_vSetPinVal+0x1ee>
				break;
		}
	}
	else if(A_u8Val== DIO_LOW)
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	88 23       	and	r24, r24
    14ae:	09 f0       	breq	.+2      	; 0x14b2 <MDIO_vSetPinVal+0x108>
    14b0:	73 c0       	rjmp	.+230    	; 0x1598 <MDIO_vSetPinVal+0x1ee>
	{
		switch(A_u8PortNo)
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	3d 83       	std	Y+5, r19	; 0x05
    14ba:	2c 83       	std	Y+4, r18	; 0x04
    14bc:	8c 81       	ldd	r24, Y+4	; 0x04
    14be:	9d 81       	ldd	r25, Y+5	; 0x05
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	91 05       	cpc	r25, r1
    14c4:	59 f1       	breq	.+86     	; 0x151c <MDIO_vSetPinVal+0x172>
    14c6:	2c 81       	ldd	r18, Y+4	; 0x04
    14c8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ca:	22 30       	cpi	r18, 0x02	; 2
    14cc:	31 05       	cpc	r19, r1
    14ce:	2c f4       	brge	.+10     	; 0x14da <MDIO_vSetPinVal+0x130>
    14d0:	8c 81       	ldd	r24, Y+4	; 0x04
    14d2:	9d 81       	ldd	r25, Y+5	; 0x05
    14d4:	00 97       	sbiw	r24, 0x00	; 0
    14d6:	69 f0       	breq	.+26     	; 0x14f2 <MDIO_vSetPinVal+0x148>
    14d8:	5f c0       	rjmp	.+190    	; 0x1598 <MDIO_vSetPinVal+0x1ee>
    14da:	2c 81       	ldd	r18, Y+4	; 0x04
    14dc:	3d 81       	ldd	r19, Y+5	; 0x05
    14de:	22 30       	cpi	r18, 0x02	; 2
    14e0:	31 05       	cpc	r19, r1
    14e2:	89 f1       	breq	.+98     	; 0x1546 <MDIO_vSetPinVal+0x19c>
    14e4:	8c 81       	ldd	r24, Y+4	; 0x04
    14e6:	9d 81       	ldd	r25, Y+5	; 0x05
    14e8:	83 30       	cpi	r24, 0x03	; 3
    14ea:	91 05       	cpc	r25, r1
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <MDIO_vSetPinVal+0x146>
    14ee:	40 c0       	rjmp	.+128    	; 0x1570 <MDIO_vSetPinVal+0x1c6>
    14f0:	53 c0       	rjmp	.+166    	; 0x1598 <MDIO_vSetPinVal+0x1ee>
		{
			case DIO_PORTA:
				CLR_BIT(PORTA , A_u8PinNo);
    14f2:	ab e3       	ldi	r26, 0x3B	; 59
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	eb e3       	ldi	r30, 0x3B	; 59
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	48 2f       	mov	r20, r24
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 2e       	mov	r0, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <MDIO_vSetPinVal+0x166>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	0a 94       	dec	r0
    1512:	e2 f7       	brpl	.-8      	; 0x150c <MDIO_vSetPinVal+0x162>
    1514:	80 95       	com	r24
    1516:	84 23       	and	r24, r20
    1518:	8c 93       	st	X, r24
    151a:	3e c0       	rjmp	.+124    	; 0x1598 <MDIO_vSetPinVal+0x1ee>
				break;
			case DIO_PORTB:
				CLR_BIT(PORTB , A_u8PinNo);
    151c:	a8 e3       	ldi	r26, 0x38	; 56
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e8 e3       	ldi	r30, 0x38	; 56
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	48 2f       	mov	r20, r24
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 2e       	mov	r0, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <MDIO_vSetPinVal+0x190>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	0a 94       	dec	r0
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <MDIO_vSetPinVal+0x18c>
    153e:	80 95       	com	r24
    1540:	84 23       	and	r24, r20
    1542:	8c 93       	st	X, r24
    1544:	29 c0       	rjmp	.+82     	; 0x1598 <MDIO_vSetPinVal+0x1ee>
				break;
			case DIO_PORTC:
				CLR_BIT(PORTC , A_u8PinNo);
    1546:	a5 e3       	ldi	r26, 0x35	; 53
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e5 e3       	ldi	r30, 0x35	; 53
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	48 2f       	mov	r20, r24
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	02 2e       	mov	r0, r18
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <MDIO_vSetPinVal+0x1ba>
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	0a 94       	dec	r0
    1566:	e2 f7       	brpl	.-8      	; 0x1560 <MDIO_vSetPinVal+0x1b6>
    1568:	80 95       	com	r24
    156a:	84 23       	and	r24, r20
    156c:	8c 93       	st	X, r24
    156e:	14 c0       	rjmp	.+40     	; 0x1598 <MDIO_vSetPinVal+0x1ee>
				break;
			case DIO_PORTD:
				CLR_BIT(PORTD , A_u8PinNo);
    1570:	a2 e3       	ldi	r26, 0x32	; 50
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e2 e3       	ldi	r30, 0x32	; 50
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	48 2f       	mov	r20, r24
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	02 2e       	mov	r0, r18
    1588:	02 c0       	rjmp	.+4      	; 0x158e <MDIO_vSetPinVal+0x1e4>
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	0a 94       	dec	r0
    1590:	e2 f7       	brpl	.-8      	; 0x158a <MDIO_vSetPinVal+0x1e0>
    1592:	80 95       	com	r24
    1594:	84 23       	and	r24, r20
    1596:	8c 93       	st	X, r24
				break;
		}
	}
}
    1598:	27 96       	adiw	r28, 0x07	; 7
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	f8 94       	cli
    159e:	de bf       	out	0x3e, r29	; 62
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	cd bf       	out	0x3d, r28	; 61
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <MDIO_u8GetPinVal>:
u8   MDIO_u8GetPinVal(u8 A_u8PortNo , u8 A_u8PinNo)
{
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <MDIO_u8GetPinVal+0x6>
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <MDIO_u8GetPinVal+0x8>
    15b2:	0f 92       	push	r0
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	8a 83       	std	Y+2, r24	; 0x02
    15ba:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8PinVal=0;   //local variable
    15bc:	19 82       	std	Y+1, r1	; 0x01
	switch(A_u8PortNo)
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	3d 83       	std	Y+5, r19	; 0x05
    15c6:	2c 83       	std	Y+4, r18	; 0x04
    15c8:	4c 81       	ldd	r20, Y+4	; 0x04
    15ca:	5d 81       	ldd	r21, Y+5	; 0x05
    15cc:	41 30       	cpi	r20, 0x01	; 1
    15ce:	51 05       	cpc	r21, r1
    15d0:	41 f1       	breq	.+80     	; 0x1622 <MDIO_u8GetPinVal+0x78>
    15d2:	8c 81       	ldd	r24, Y+4	; 0x04
    15d4:	9d 81       	ldd	r25, Y+5	; 0x05
    15d6:	82 30       	cpi	r24, 0x02	; 2
    15d8:	91 05       	cpc	r25, r1
    15da:	34 f4       	brge	.+12     	; 0x15e8 <MDIO_u8GetPinVal+0x3e>
    15dc:	2c 81       	ldd	r18, Y+4	; 0x04
    15de:	3d 81       	ldd	r19, Y+5	; 0x05
    15e0:	21 15       	cp	r18, r1
    15e2:	31 05       	cpc	r19, r1
    15e4:	61 f0       	breq	.+24     	; 0x15fe <MDIO_u8GetPinVal+0x54>
    15e6:	52 c0       	rjmp	.+164    	; 0x168c <MDIO_u8GetPinVal+0xe2>
    15e8:	4c 81       	ldd	r20, Y+4	; 0x04
    15ea:	5d 81       	ldd	r21, Y+5	; 0x05
    15ec:	42 30       	cpi	r20, 0x02	; 2
    15ee:	51 05       	cpc	r21, r1
    15f0:	51 f1       	breq	.+84     	; 0x1646 <MDIO_u8GetPinVal+0x9c>
    15f2:	8c 81       	ldd	r24, Y+4	; 0x04
    15f4:	9d 81       	ldd	r25, Y+5	; 0x05
    15f6:	83 30       	cpi	r24, 0x03	; 3
    15f8:	91 05       	cpc	r25, r1
    15fa:	b9 f1       	breq	.+110    	; 0x166a <MDIO_u8GetPinVal+0xc0>
    15fc:	47 c0       	rjmp	.+142    	; 0x168c <MDIO_u8GetPinVal+0xe2>
	{
		case DIO_PORTA:
			L_u8PinVal=GET_BIT(PINA , A_u8PinNo);
    15fe:	e9 e3       	ldi	r30, 0x39	; 57
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	88 2f       	mov	r24, r24
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	a9 01       	movw	r20, r18
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <MDIO_u8GetPinVal+0x6c>
    1612:	55 95       	asr	r21
    1614:	47 95       	ror	r20
    1616:	8a 95       	dec	r24
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <MDIO_u8GetPinVal+0x68>
    161a:	ca 01       	movw	r24, r20
    161c:	81 70       	andi	r24, 0x01	; 1
    161e:	89 83       	std	Y+1, r24	; 0x01
    1620:	35 c0       	rjmp	.+106    	; 0x168c <MDIO_u8GetPinVal+0xe2>
			break;
		case DIO_PORTB:
			L_u8PinVal=GET_BIT(PINB , A_u8PinNo);
    1622:	e6 e3       	ldi	r30, 0x36	; 54
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	88 2f       	mov	r24, r24
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	a9 01       	movw	r20, r18
    1634:	02 c0       	rjmp	.+4      	; 0x163a <MDIO_u8GetPinVal+0x90>
    1636:	55 95       	asr	r21
    1638:	47 95       	ror	r20
    163a:	8a 95       	dec	r24
    163c:	e2 f7       	brpl	.-8      	; 0x1636 <MDIO_u8GetPinVal+0x8c>
    163e:	ca 01       	movw	r24, r20
    1640:	81 70       	andi	r24, 0x01	; 1
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	23 c0       	rjmp	.+70     	; 0x168c <MDIO_u8GetPinVal+0xe2>
			break;
		case DIO_PORTC:
			L_u8PinVal=GET_BIT(PINC , A_u8PinNo);
    1646:	e3 e3       	ldi	r30, 0x33	; 51
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	88 2f       	mov	r24, r24
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	a9 01       	movw	r20, r18
    1658:	02 c0       	rjmp	.+4      	; 0x165e <MDIO_u8GetPinVal+0xb4>
    165a:	55 95       	asr	r21
    165c:	47 95       	ror	r20
    165e:	8a 95       	dec	r24
    1660:	e2 f7       	brpl	.-8      	; 0x165a <MDIO_u8GetPinVal+0xb0>
    1662:	ca 01       	movw	r24, r20
    1664:	81 70       	andi	r24, 0x01	; 1
    1666:	89 83       	std	Y+1, r24	; 0x01
    1668:	11 c0       	rjmp	.+34     	; 0x168c <MDIO_u8GetPinVal+0xe2>
			break;
		case DIO_PORTD:
			L_u8PinVal=GET_BIT(PIND , A_u8PinNo);
    166a:	e0 e3       	ldi	r30, 0x30	; 48
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	88 2f       	mov	r24, r24
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	a9 01       	movw	r20, r18
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <MDIO_u8GetPinVal+0xd8>
    167e:	55 95       	asr	r21
    1680:	47 95       	ror	r20
    1682:	8a 95       	dec	r24
    1684:	e2 f7       	brpl	.-8      	; 0x167e <MDIO_u8GetPinVal+0xd4>
    1686:	ca 01       	movw	r24, r20
    1688:	81 70       	andi	r24, 0x01	; 1
    168a:	89 83       	std	Y+1, r24	; 0x01
			break;
	}

	return L_u8PinVal;
    168c:	89 81       	ldd	r24, Y+1	; 0x01
}
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	08 95       	ret

0000169e <MDIO_vSetPortDIR>:
void MDIO_vSetPortDIR(u8 A_u8PortNo , u8 A_u8Dir)
{
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <MDIO_vSetPortDIR+0x6>
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <MDIO_vSetPortDIR+0x8>
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	89 83       	std	Y+1, r24	; 0x01
    16ac:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNo)
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	3c 83       	std	Y+4, r19	; 0x04
    16b6:	2b 83       	std	Y+3, r18	; 0x03
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	9c 81       	ldd	r25, Y+4	; 0x04
    16bc:	81 30       	cpi	r24, 0x01	; 1
    16be:	91 05       	cpc	r25, r1
    16c0:	d1 f0       	breq	.+52     	; 0x16f6 <MDIO_vSetPortDIR+0x58>
    16c2:	2b 81       	ldd	r18, Y+3	; 0x03
    16c4:	3c 81       	ldd	r19, Y+4	; 0x04
    16c6:	22 30       	cpi	r18, 0x02	; 2
    16c8:	31 05       	cpc	r19, r1
    16ca:	2c f4       	brge	.+10     	; 0x16d6 <MDIO_vSetPortDIR+0x38>
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	9c 81       	ldd	r25, Y+4	; 0x04
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	61 f0       	breq	.+24     	; 0x16ec <MDIO_vSetPortDIR+0x4e>
    16d4:	1e c0       	rjmp	.+60     	; 0x1712 <MDIO_vSetPortDIR+0x74>
    16d6:	2b 81       	ldd	r18, Y+3	; 0x03
    16d8:	3c 81       	ldd	r19, Y+4	; 0x04
    16da:	22 30       	cpi	r18, 0x02	; 2
    16dc:	31 05       	cpc	r19, r1
    16de:	81 f0       	breq	.+32     	; 0x1700 <MDIO_vSetPortDIR+0x62>
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	9c 81       	ldd	r25, Y+4	; 0x04
    16e4:	83 30       	cpi	r24, 0x03	; 3
    16e6:	91 05       	cpc	r25, r1
    16e8:	81 f0       	breq	.+32     	; 0x170a <MDIO_vSetPortDIR+0x6c>
    16ea:	13 c0       	rjmp	.+38     	; 0x1712 <MDIO_vSetPortDIR+0x74>
	{
		case DIO_PORTA:
			DDRA = A_u8Dir;
    16ec:	ea e3       	ldi	r30, 0x3A	; 58
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	80 83       	st	Z, r24
    16f4:	0e c0       	rjmp	.+28     	; 0x1712 <MDIO_vSetPortDIR+0x74>
			break;
		case DIO_PORTB:
			DDRB = A_u8Dir;
    16f6:	e7 e3       	ldi	r30, 0x37	; 55
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	80 83       	st	Z, r24
    16fe:	09 c0       	rjmp	.+18     	; 0x1712 <MDIO_vSetPortDIR+0x74>
			break;
		case DIO_PORTC:
			DDRC = A_u8Dir;
    1700:	e4 e3       	ldi	r30, 0x34	; 52
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	80 83       	st	Z, r24
    1708:	04 c0       	rjmp	.+8      	; 0x1712 <MDIO_vSetPortDIR+0x74>
			break;
		case DIO_PORTD:
			DDRD = A_u8Dir;
    170a:	e1 e3       	ldi	r30, 0x31	; 49
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	80 83       	st	Z, r24
			break;
	}
}
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	08 95       	ret

00001720 <MDIO_vSetPortVal>:
void MDIO_vSetPortVal(u8 A_u8PortNo , u8 A_u8Val)
{
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	00 d0       	rcall	.+0      	; 0x1726 <MDIO_vSetPortVal+0x6>
    1726:	00 d0       	rcall	.+0      	; 0x1728 <MDIO_vSetPortVal+0x8>
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
    172c:	89 83       	std	Y+1, r24	; 0x01
    172e:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNo)
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	3c 83       	std	Y+4, r19	; 0x04
    1738:	2b 83       	std	Y+3, r18	; 0x03
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	9c 81       	ldd	r25, Y+4	; 0x04
    173e:	81 30       	cpi	r24, 0x01	; 1
    1740:	91 05       	cpc	r25, r1
    1742:	d1 f0       	breq	.+52     	; 0x1778 <MDIO_vSetPortVal+0x58>
    1744:	2b 81       	ldd	r18, Y+3	; 0x03
    1746:	3c 81       	ldd	r19, Y+4	; 0x04
    1748:	22 30       	cpi	r18, 0x02	; 2
    174a:	31 05       	cpc	r19, r1
    174c:	2c f4       	brge	.+10     	; 0x1758 <MDIO_vSetPortVal+0x38>
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	9c 81       	ldd	r25, Y+4	; 0x04
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	61 f0       	breq	.+24     	; 0x176e <MDIO_vSetPortVal+0x4e>
    1756:	1e c0       	rjmp	.+60     	; 0x1794 <MDIO_vSetPortVal+0x74>
    1758:	2b 81       	ldd	r18, Y+3	; 0x03
    175a:	3c 81       	ldd	r19, Y+4	; 0x04
    175c:	22 30       	cpi	r18, 0x02	; 2
    175e:	31 05       	cpc	r19, r1
    1760:	81 f0       	breq	.+32     	; 0x1782 <MDIO_vSetPortVal+0x62>
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	9c 81       	ldd	r25, Y+4	; 0x04
    1766:	83 30       	cpi	r24, 0x03	; 3
    1768:	91 05       	cpc	r25, r1
    176a:	81 f0       	breq	.+32     	; 0x178c <MDIO_vSetPortVal+0x6c>
    176c:	13 c0       	rjmp	.+38     	; 0x1794 <MDIO_vSetPortVal+0x74>
	{
		case DIO_PORTA:
			PORTA = A_u8Val;
    176e:	eb e3       	ldi	r30, 0x3B	; 59
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	80 83       	st	Z, r24
    1776:	0e c0       	rjmp	.+28     	; 0x1794 <MDIO_vSetPortVal+0x74>
			break;
		case DIO_PORTB:
			PORTB = A_u8Val;
    1778:	e8 e3       	ldi	r30, 0x38	; 56
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	80 83       	st	Z, r24
    1780:	09 c0       	rjmp	.+18     	; 0x1794 <MDIO_vSetPortVal+0x74>
			break;
		case DIO_PORTC:
			PORTC = A_u8Val;
    1782:	e5 e3       	ldi	r30, 0x35	; 53
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	80 83       	st	Z, r24
    178a:	04 c0       	rjmp	.+8      	; 0x1794 <MDIO_vSetPortVal+0x74>
			break;
		case DIO_PORTD:
			PORTD = A_u8Val;
    178c:	e2 e3       	ldi	r30, 0x32	; 50
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	80 83       	st	Z, r24
			break;
	}
}
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <MDIO_vTogPinVal>:
//u8   DIO_u8GetPortVal(u8 A_u8PortNo )
//{}
void MDIO_vTogPinVal(u8 A_u8PortNo , u8 A_u8PinNo)

{
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	00 d0       	rcall	.+0      	; 0x17a8 <MDIO_vTogPinVal+0x6>
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <MDIO_vTogPinVal+0x8>
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	89 83       	std	Y+1, r24	; 0x01
    17b0:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNo)
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	3c 83       	std	Y+4, r19	; 0x04
    17ba:	2b 83       	std	Y+3, r18	; 0x03
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	9c 81       	ldd	r25, Y+4	; 0x04
    17c0:	81 30       	cpi	r24, 0x01	; 1
    17c2:	91 05       	cpc	r25, r1
    17c4:	49 f1       	breq	.+82     	; 0x1818 <MDIO_vTogPinVal+0x76>
    17c6:	2b 81       	ldd	r18, Y+3	; 0x03
    17c8:	3c 81       	ldd	r19, Y+4	; 0x04
    17ca:	22 30       	cpi	r18, 0x02	; 2
    17cc:	31 05       	cpc	r19, r1
    17ce:	2c f4       	brge	.+10     	; 0x17da <MDIO_vTogPinVal+0x38>
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	9c 81       	ldd	r25, Y+4	; 0x04
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	61 f0       	breq	.+24     	; 0x17f0 <MDIO_vTogPinVal+0x4e>
    17d8:	5a c0       	rjmp	.+180    	; 0x188e <MDIO_vTogPinVal+0xec>
    17da:	2b 81       	ldd	r18, Y+3	; 0x03
    17dc:	3c 81       	ldd	r19, Y+4	; 0x04
    17de:	22 30       	cpi	r18, 0x02	; 2
    17e0:	31 05       	cpc	r19, r1
    17e2:	71 f1       	breq	.+92     	; 0x1840 <MDIO_vTogPinVal+0x9e>
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	9c 81       	ldd	r25, Y+4	; 0x04
    17e8:	83 30       	cpi	r24, 0x03	; 3
    17ea:	91 05       	cpc	r25, r1
    17ec:	e9 f1       	breq	.+122    	; 0x1868 <MDIO_vTogPinVal+0xc6>
    17ee:	4f c0       	rjmp	.+158    	; 0x188e <MDIO_vTogPinVal+0xec>
	{
		case DIO_PORTA:
			TOGGLE_BIT(PORTA , A_u8PinNo);
    17f0:	ab e3       	ldi	r26, 0x3B	; 59
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	eb e3       	ldi	r30, 0x3B	; 59
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	48 2f       	mov	r20, r24
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	02 2e       	mov	r0, r18
    1808:	02 c0       	rjmp	.+4      	; 0x180e <MDIO_vTogPinVal+0x6c>
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	0a 94       	dec	r0
    1810:	e2 f7       	brpl	.-8      	; 0x180a <MDIO_vTogPinVal+0x68>
    1812:	84 27       	eor	r24, r20
    1814:	8c 93       	st	X, r24
    1816:	3b c0       	rjmp	.+118    	; 0x188e <MDIO_vTogPinVal+0xec>
			break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB , A_u8PinNo);
    1818:	a8 e3       	ldi	r26, 0x38	; 56
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e8 e3       	ldi	r30, 0x38	; 56
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	48 2f       	mov	r20, r24
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	02 2e       	mov	r0, r18
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <MDIO_vTogPinVal+0x94>
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	0a 94       	dec	r0
    1838:	e2 f7       	brpl	.-8      	; 0x1832 <MDIO_vTogPinVal+0x90>
    183a:	84 27       	eor	r24, r20
    183c:	8c 93       	st	X, r24
    183e:	27 c0       	rjmp	.+78     	; 0x188e <MDIO_vTogPinVal+0xec>
			break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC , A_u8PinNo);
    1840:	a5 e3       	ldi	r26, 0x35	; 53
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e5 e3       	ldi	r30, 0x35	; 53
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	48 2f       	mov	r20, r24
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	02 2e       	mov	r0, r18
    1858:	02 c0       	rjmp	.+4      	; 0x185e <MDIO_vTogPinVal+0xbc>
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	0a 94       	dec	r0
    1860:	e2 f7       	brpl	.-8      	; 0x185a <MDIO_vTogPinVal+0xb8>
    1862:	84 27       	eor	r24, r20
    1864:	8c 93       	st	X, r24
    1866:	13 c0       	rjmp	.+38     	; 0x188e <MDIO_vTogPinVal+0xec>
			break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD , A_u8PinNo);
    1868:	a2 e3       	ldi	r26, 0x32	; 50
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e2 e3       	ldi	r30, 0x32	; 50
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	48 2f       	mov	r20, r24
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	02 2e       	mov	r0, r18
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <MDIO_vTogPinVal+0xe4>
    1882:	88 0f       	add	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	0a 94       	dec	r0
    1888:	e2 f7       	brpl	.-8      	; 0x1882 <MDIO_vTogPinVal+0xe0>
    188a:	84 27       	eor	r24, r20
    188c:	8c 93       	st	X, r24
			break;
	}

}
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <MADC_vInit>:

FlagStatus_t xADCFlag =DOWN;


void MADC_vInit(void)
{
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
	/* 1- referance voltage selection */
#if ADC_REF_VOLT==AVCC
	CLR_BIT(ADMUX,REFS1);
    18a4:	a7 e2       	ldi	r26, 0x27	; 39
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	e7 e2       	ldi	r30, 0x27	; 39
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	8f 77       	andi	r24, 0x7F	; 127
    18b0:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS0);
    18b2:	a7 e2       	ldi	r26, 0x27	; 39
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e7 e2       	ldi	r30, 0x27	; 39
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	80 64       	ori	r24, 0x40	; 64
    18be:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS0);
#else
#error "PLEASE ENTER ONE OF THE OPTIONS"
#endif
	/* 2- data direction adjustment */
	CLR_BIT(ADMUX,ADLAR);
    18c0:	a7 e2       	ldi	r26, 0x27	; 39
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	e7 e2       	ldi	r30, 0x27	; 39
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	8f 7d       	andi	r24, 0xDF	; 223
    18cc:	8c 93       	st	X, r24
	/* 3- prescaler bits selection */
	ADCSRA = (ADCSRA & 0XF8 ) | ( ADC_PRESCALER );
    18ce:	a6 e2       	ldi	r26, 0x26	; 38
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	e6 e2       	ldi	r30, 0x26	; 38
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	88 7f       	andi	r24, 0xF8	; 248
    18da:	83 60       	ori	r24, 0x03	; 3
    18dc:	8c 93       	st	X, r24
	/* 4- auto trigger enable*/
	/* 4a auto trigger source*/
	CLR_BIT(ADCSRA,ADATE);
    18de:	a6 e2       	ldi	r26, 0x26	; 38
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e6 e2       	ldi	r30, 0x26	; 38
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	8f 7d       	andi	r24, 0xDF	; 223
    18ea:	8c 93       	st	X, r24
	/* 5-interrupt enable disable */
#if ADC_INTERUPT_VOLT==DISABLE
	CLR_BIT(ADCSRA,ADIE);
#elif ADC_INTERUPT_VOLT==ENABLE
	SET_BIT(ADCSRA,ADIE);
    18ec:	a6 e2       	ldi	r26, 0x26	; 38
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e6 e2       	ldi	r30, 0x26	; 38
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	88 60       	ori	r24, 0x08	; 8
    18f8:	8c 93       	st	X, r24
#endif
	/*  6-enable adc peripheral*/
	SET_BIT(ADCSRA,ADEN);
    18fa:	a6 e2       	ldi	r26, 0x26	; 38
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e6 e2       	ldi	r30, 0x26	; 38
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	80 68       	ori	r24, 0x80	; 128
    1906:	8c 93       	st	X, r24


}
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <MADC_u16AnalogRead>:
u16  MADC_u16AnalogRead(u8 A_u8ChannelNo ){
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	0f 92       	push	r0
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	89 83       	std	Y+1, r24	; 0x01

	/*1- select channel */
	ADMUX=(ADMUX & 0XE0) | (A_u8ChannelNo & 0X07);  //(A_u8ChannelNo & 0X1F)      DIFFERENTIAL
    191a:	a7 e2       	ldi	r26, 0x27	; 39
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	e7 e2       	ldi	r30, 0x27	; 39
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	98 2f       	mov	r25, r24
    1926:	90 7e       	andi	r25, 0xE0	; 224
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	87 70       	andi	r24, 0x07	; 7
    192c:	89 2b       	or	r24, r25
    192e:	8c 93       	st	X, r24
	/*2- start conversion */
	SET_BIT(ADCSRA,ADSC);
    1930:	a6 e2       	ldi	r26, 0x26	; 38
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	e6 e2       	ldi	r30, 0x26	; 38
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	80 64       	ori	r24, 0x40	; 64
    193c:	8c 93       	st	X, r24
	/*3- poll on flag */
	while (GET_BIT(ADCSRA,ADIF) != 1){}
    193e:	e6 e2       	ldi	r30, 0x26	; 38
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	82 95       	swap	r24
    1946:	8f 70       	andi	r24, 0x0F	; 15
    1948:	88 2f       	mov	r24, r24
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	81 70       	andi	r24, 0x01	; 1
    194e:	90 70       	andi	r25, 0x00	; 0
    1950:	00 97       	sbiw	r24, 0x00	; 0
    1952:	a9 f3       	breq	.-22     	; 0x193e <MADC_u16AnalogRead+0x30>
	/*4- clear flag */
	SET_BIT(ADCSRA,ADIF);
    1954:	a6 e2       	ldi	r26, 0x26	; 38
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	e6 e2       	ldi	r30, 0x26	; 38
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	80 61       	ori	r24, 0x10	; 16
    1960:	8c 93       	st	X, r24

	/*5- return adc data */

	return ADC;
    1962:	e4 e2       	ldi	r30, 0x24	; 36
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	91 81       	ldd	r25, Z+1	; 0x01


}
    196a:	0f 90       	pop	r0
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <MADC_vStartConversion>:
/*INTERUPT BASED APIs*/
void MADC_vStartConversion(u8 A_u8ChannelNo){
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	0f 92       	push	r0
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	89 83       	std	Y+1, r24	; 0x01
	/*1- select channel */
	ADMUX=(ADMUX & 0XE0) | (A_u8ChannelNo & 0X07);  //(A_u8ChannelNo & 0X1F)      DIFFERENTIAL
    197e:	a7 e2       	ldi	r26, 0x27	; 39
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e7 e2       	ldi	r30, 0x27	; 39
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	98 2f       	mov	r25, r24
    198a:	90 7e       	andi	r25, 0xE0	; 224
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	87 70       	andi	r24, 0x07	; 7
    1990:	89 2b       	or	r24, r25
    1992:	8c 93       	st	X, r24
	/*2- start conversion */
	SET_BIT(ADCSRA,ADSC);
    1994:	a6 e2       	ldi	r26, 0x26	; 38
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	e6 e2       	ldi	r30, 0x26	; 38
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	80 64       	ori	r24, 0x40	; 64
    19a0:	8c 93       	st	X, r24
}
    19a2:	0f 90       	pop	r0
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	08 95       	ret

000019aa <MADC_u16GetADCData>:
u16  MADC_u16GetADCData(void){
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62

	/*5- return adc data */

	return ADC;
    19b2:	e4 e2       	ldi	r30, 0x24	; 36
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	91 81       	ldd	r25, Z+1	; 0x01

}
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	08 95       	ret

000019c0 <MADC_vSetCallback>:
void MADC_vSetCallback(void(*A_fptr)(void)){
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	00 d0       	rcall	.+0      	; 0x19c6 <MADC_vSetCallback+0x6>
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
    19ca:	9a 83       	std	Y+2, r25	; 0x02
    19cc:	89 83       	std	Y+1, r24	; 0x01

	ADC_Callback=A_fptr;
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	9a 81       	ldd	r25, Y+2	; 0x02
    19d2:	90 93 7f 00 	sts	0x007F, r25
    19d6:	80 93 7e 00 	sts	0x007E, r24
}
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	cf 91       	pop	r28
    19e0:	df 91       	pop	r29
    19e2:	08 95       	ret

000019e4 <MADC_vStartADCConversion_Asynch>:

/*alternative method for the three top APIs*/

void MADC_vStartADCConversion_Asynch(u8 A_u8ChannelNo,
										u16* A_pu16ADCData,
											void(*A_fptr)(void) ){
    19e4:	df 93       	push	r29
    19e6:	cf 93       	push	r28
    19e8:	00 d0       	rcall	.+0      	; 0x19ea <MADC_vStartADCConversion_Asynch+0x6>
    19ea:	00 d0       	rcall	.+0      	; 0x19ec <MADC_vStartADCConversion_Asynch+0x8>
    19ec:	0f 92       	push	r0
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
    19f2:	89 83       	std	Y+1, r24	; 0x01
    19f4:	7b 83       	std	Y+3, r23	; 0x03
    19f6:	6a 83       	std	Y+2, r22	; 0x02
    19f8:	5d 83       	std	Y+5, r21	; 0x05
    19fa:	4c 83       	std	Y+4, r20	; 0x04
	/*1- set callback function pointer */
	ADC_Callback = A_fptr;
    19fc:	8c 81       	ldd	r24, Y+4	; 0x04
    19fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1a00:	90 93 7f 00 	sts	0x007F, r25
    1a04:	80 93 7e 00 	sts	0x007E, r24
	/*2- set adc data pointer */
	G_pu16ADC_Data = A_pu16ADCData;
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a0c:	90 93 81 00 	sts	0x0081, r25
    1a10:	80 93 80 00 	sts	0x0080, r24

	/*3- select channel */
	ADMUX=(ADMUX & 0XE0) | (A_u8ChannelNo & 0X07);  //(A_u8ChannelNo & 0X1F)      DIFFERENTIAL
    1a14:	a7 e2       	ldi	r26, 0x27	; 39
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e7 e2       	ldi	r30, 0x27	; 39
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	98 2f       	mov	r25, r24
    1a20:	90 7e       	andi	r25, 0xE0	; 224
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	87 70       	andi	r24, 0x07	; 7
    1a26:	89 2b       	or	r24, r25
    1a28:	8c 93       	st	X, r24
	/*4- start conversion */
	SET_BIT(ADCSRA,ADSC);
    1a2a:	a6 e2       	ldi	r26, 0x26	; 38
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	e6 e2       	ldi	r30, 0x26	; 38
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	80 64       	ori	r24, 0x40	; 64
    1a36:	8c 93       	st	X, r24


}
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <MADC_xGetFlagStatus>:


FlagStatus_t   MADC_xGetFlagStatus(void){
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
	if(GET_BIT(ADCSRA,ADIF)==1){
    1a50:	e6 e2       	ldi	r30, 0x26	; 38
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	82 95       	swap	r24
    1a58:	8f 70       	andi	r24, 0x0F	; 15
    1a5a:	88 2f       	mov	r24, r24
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	81 70       	andi	r24, 0x01	; 1
    1a60:	90 70       	andi	r25, 0x00	; 0
    1a62:	88 23       	and	r24, r24
    1a64:	11 f0       	breq	.+4      	; 0x1a6a <MADC_xGetFlagStatus+0x22>
		xADCFlag =UP;
    1a66:	10 92 68 00 	sts	0x0068, r1
	}
	return xADCFlag;
    1a6a:	80 91 68 00 	lds	r24, 0x0068
}
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	08 95       	ret

00001a74 <__vector_16>:

/*ADC_ISR*/

void __vector_16(void)  __attribute__((signal));
void __vector_16(void)
{
    1a74:	1f 92       	push	r1
    1a76:	0f 92       	push	r0
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	0f 92       	push	r0
    1a7c:	11 24       	eor	r1, r1
    1a7e:	2f 93       	push	r18
    1a80:	3f 93       	push	r19
    1a82:	4f 93       	push	r20
    1a84:	5f 93       	push	r21
    1a86:	6f 93       	push	r22
    1a88:	7f 93       	push	r23
    1a8a:	8f 93       	push	r24
    1a8c:	9f 93       	push	r25
    1a8e:	af 93       	push	r26
    1a90:	bf 93       	push	r27
    1a92:	ef 93       	push	r30
    1a94:	ff 93       	push	r31
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
	if (G_pu16ADC_Data!=NULL)
    1a9e:	80 91 80 00 	lds	r24, 0x0080
    1aa2:	90 91 81 00 	lds	r25, 0x0081
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	59 f0       	breq	.+22     	; 0x1ac0 <__vector_16+0x4c>
	{
		*G_pu16ADC_Data=ADC; //FIRST U GET DATA THEN U EXCUTE CALLBACK MECHANISM
    1aaa:	e0 91 80 00 	lds	r30, 0x0080
    1aae:	f0 91 81 00 	lds	r31, 0x0081
    1ab2:	a4 e2       	ldi	r26, 0x24	; 36
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	8d 91       	ld	r24, X+
    1ab8:	9c 91       	ld	r25, X
    1aba:	11 97       	sbiw	r26, 0x01	; 1
    1abc:	91 83       	std	Z+1, r25	; 0x01
    1abe:	80 83       	st	Z, r24
	}
	if (ADC_Callback!=NULL)
    1ac0:	80 91 7e 00 	lds	r24, 0x007E
    1ac4:	90 91 7f 00 	lds	r25, 0x007F
    1ac8:	00 97       	sbiw	r24, 0x00	; 0
    1aca:	49 f0       	breq	.+18     	; 0x1ade <__vector_16+0x6a>
	{
//		ADC_Callback();
		ADC_Callback_2(ADC);
    1acc:	e0 91 7c 00 	lds	r30, 0x007C
    1ad0:	f0 91 7d 00 	lds	r31, 0x007D
    1ad4:	a4 e2       	ldi	r26, 0x24	; 36
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	8d 91       	ld	r24, X+
    1ada:	9c 91       	ld	r25, X
    1adc:	09 95       	icall

	}
	xADCFlag =UP;
    1ade:	10 92 68 00 	sts	0x0068, r1


}
    1ae2:	cf 91       	pop	r28
    1ae4:	df 91       	pop	r29
    1ae6:	ff 91       	pop	r31
    1ae8:	ef 91       	pop	r30
    1aea:	bf 91       	pop	r27
    1aec:	af 91       	pop	r26
    1aee:	9f 91       	pop	r25
    1af0:	8f 91       	pop	r24
    1af2:	7f 91       	pop	r23
    1af4:	6f 91       	pop	r22
    1af6:	5f 91       	pop	r21
    1af8:	4f 91       	pop	r20
    1afa:	3f 91       	pop	r19
    1afc:	2f 91       	pop	r18
    1afe:	0f 90       	pop	r0
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	0f 90       	pop	r0
    1b04:	1f 90       	pop	r1
    1b06:	18 95       	reti

00001b08 <HLCD_vSendCommand>:




void HLCD_vSendCommand(u8 A_u8Comand)
{
    1b08:	df 93       	push	r29
    1b0a:	cf 93       	push	r28
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
    1b10:	6d 97       	sbiw	r28, 0x1d	; 29
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	f8 94       	cli
    1b16:	de bf       	out	0x3e, r29	; 62
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	cd bf       	out	0x3d, r28	; 61
    1b1c:	8d 8f       	std	Y+29, r24	; 0x1d

	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RS_PIN , DIO_LOW);
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	60 e0       	ldi	r22, 0x00	; 0
    1b22:	40 e0       	ldi	r20, 0x00	; 0
    1b24:	0e 94 d5 09 	call	0x13aa	; 0x13aa <MDIO_vSetPinVal>
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RW_PIN , DIO_LOW);
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	61 e0       	ldi	r22, 0x01	; 1
    1b2c:	40 e0       	ldi	r20, 0x00	; 0
    1b2e:	0e 94 d5 09 	call	0x13aa	; 0x13aa <MDIO_vSetPinVal>
	MDIO_vSetPortVal(LCD_DATA_PORT , A_u8Comand);
    1b32:	82 e0       	ldi	r24, 0x02	; 2
    1b34:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b36:	0e 94 90 0b 	call	0x1720	; 0x1720 <MDIO_vSetPortVal>

	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_EN_PIN , DIO_HIGH);
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	62 e0       	ldi	r22, 0x02	; 2
    1b3e:	41 e0       	ldi	r20, 0x01	; 1
    1b40:	0e 94 d5 09 	call	0x13aa	; 0x13aa <MDIO_vSetPinVal>
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	a0 e8       	ldi	r26, 0x80	; 128
    1b4a:	bf e3       	ldi	r27, 0x3F	; 63
    1b4c:	89 8f       	std	Y+25, r24	; 0x19
    1b4e:	9a 8f       	std	Y+26, r25	; 0x1a
    1b50:	ab 8f       	std	Y+27, r26	; 0x1b
    1b52:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b54:	69 8d       	ldd	r22, Y+25	; 0x19
    1b56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	4a ef       	ldi	r20, 0xFA	; 250
    1b62:	54 e4       	ldi	r21, 0x44	; 68
    1b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	8d 8b       	std	Y+21, r24	; 0x15
    1b6e:	9e 8b       	std	Y+22, r25	; 0x16
    1b70:	af 8b       	std	Y+23, r26	; 0x17
    1b72:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b74:	6d 89       	ldd	r22, Y+21	; 0x15
    1b76:	7e 89       	ldd	r23, Y+22	; 0x16
    1b78:	8f 89       	ldd	r24, Y+23	; 0x17
    1b7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	40 e8       	ldi	r20, 0x80	; 128
    1b82:	5f e3       	ldi	r21, 0x3F	; 63
    1b84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b88:	88 23       	and	r24, r24
    1b8a:	2c f4       	brge	.+10     	; 0x1b96 <HLCD_vSendCommand+0x8e>
		__ticks = 1;
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	9c 8b       	std	Y+20, r25	; 0x14
    1b92:	8b 8b       	std	Y+19, r24	; 0x13
    1b94:	3f c0       	rjmp	.+126    	; 0x1c14 <HLCD_vSendCommand+0x10c>
	else if (__tmp > 65535)
    1b96:	6d 89       	ldd	r22, Y+21	; 0x15
    1b98:	7e 89       	ldd	r23, Y+22	; 0x16
    1b9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	3f ef       	ldi	r19, 0xFF	; 255
    1ba2:	4f e7       	ldi	r20, 0x7F	; 127
    1ba4:	57 e4       	ldi	r21, 0x47	; 71
    1ba6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1baa:	18 16       	cp	r1, r24
    1bac:	4c f5       	brge	.+82     	; 0x1c00 <HLCD_vSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bae:	69 8d       	ldd	r22, Y+25	; 0x19
    1bb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e2       	ldi	r20, 0x20	; 32
    1bbc:	51 e4       	ldi	r21, 0x41	; 65
    1bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	bc 01       	movw	r22, r24
    1bc8:	cd 01       	movw	r24, r26
    1bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	9c 8b       	std	Y+20, r25	; 0x14
    1bd4:	8b 8b       	std	Y+19, r24	; 0x13
    1bd6:	0f c0       	rjmp	.+30     	; 0x1bf6 <HLCD_vSendCommand+0xee>
    1bd8:	88 ec       	ldi	r24, 0xC8	; 200
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	9a 8b       	std	Y+18, r25	; 0x12
    1bde:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1be0:	89 89       	ldd	r24, Y+17	; 0x11
    1be2:	9a 89       	ldd	r25, Y+18	; 0x12
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <HLCD_vSendCommand+0xdc>
    1be8:	9a 8b       	std	Y+18, r25	; 0x12
    1bea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bec:	8b 89       	ldd	r24, Y+19	; 0x13
    1bee:	9c 89       	ldd	r25, Y+20	; 0x14
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	9c 8b       	std	Y+20, r25	; 0x14
    1bf4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf6:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bfa:	00 97       	sbiw	r24, 0x00	; 0
    1bfc:	69 f7       	brne	.-38     	; 0x1bd8 <HLCD_vSendCommand+0xd0>
    1bfe:	14 c0       	rjmp	.+40     	; 0x1c28 <HLCD_vSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c00:	6d 89       	ldd	r22, Y+21	; 0x15
    1c02:	7e 89       	ldd	r23, Y+22	; 0x16
    1c04:	8f 89       	ldd	r24, Y+23	; 0x17
    1c06:	98 8d       	ldd	r25, Y+24	; 0x18
    1c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	9c 8b       	std	Y+20, r25	; 0x14
    1c12:	8b 8b       	std	Y+19, r24	; 0x13
    1c14:	8b 89       	ldd	r24, Y+19	; 0x13
    1c16:	9c 89       	ldd	r25, Y+20	; 0x14
    1c18:	98 8b       	std	Y+16, r25	; 0x10
    1c1a:	8f 87       	std	Y+15, r24	; 0x0f
    1c1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c1e:	98 89       	ldd	r25, Y+16	; 0x10
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <HLCD_vSendCommand+0x118>
    1c24:	98 8b       	std	Y+16, r25	; 0x10
    1c26:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_EN_PIN , DIO_LOW);
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	62 e0       	ldi	r22, 0x02	; 2
    1c2c:	40 e0       	ldi	r20, 0x00	; 0
    1c2e:	0e 94 d5 09 	call	0x13aa	; 0x13aa <MDIO_vSetPinVal>
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	a0 e8       	ldi	r26, 0x80	; 128
    1c38:	bf e3       	ldi	r27, 0x3F	; 63
    1c3a:	8b 87       	std	Y+11, r24	; 0x0b
    1c3c:	9c 87       	std	Y+12, r25	; 0x0c
    1c3e:	ad 87       	std	Y+13, r26	; 0x0d
    1c40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	4a ef       	ldi	r20, 0xFA	; 250
    1c50:	54 e4       	ldi	r21, 0x44	; 68
    1c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	8f 83       	std	Y+7, r24	; 0x07
    1c5c:	98 87       	std	Y+8, r25	; 0x08
    1c5e:	a9 87       	std	Y+9, r26	; 0x09
    1c60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c62:	6f 81       	ldd	r22, Y+7	; 0x07
    1c64:	78 85       	ldd	r23, Y+8	; 0x08
    1c66:	89 85       	ldd	r24, Y+9	; 0x09
    1c68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	40 e8       	ldi	r20, 0x80	; 128
    1c70:	5f e3       	ldi	r21, 0x3F	; 63
    1c72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c76:	88 23       	and	r24, r24
    1c78:	2c f4       	brge	.+10     	; 0x1c84 <HLCD_vSendCommand+0x17c>
		__ticks = 1;
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	9e 83       	std	Y+6, r25	; 0x06
    1c80:	8d 83       	std	Y+5, r24	; 0x05
    1c82:	3f c0       	rjmp	.+126    	; 0x1d02 <HLCD_vSendCommand+0x1fa>
	else if (__tmp > 65535)
    1c84:	6f 81       	ldd	r22, Y+7	; 0x07
    1c86:	78 85       	ldd	r23, Y+8	; 0x08
    1c88:	89 85       	ldd	r24, Y+9	; 0x09
    1c8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	3f ef       	ldi	r19, 0xFF	; 255
    1c90:	4f e7       	ldi	r20, 0x7F	; 127
    1c92:	57 e4       	ldi	r21, 0x47	; 71
    1c94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c98:	18 16       	cp	r1, r24
    1c9a:	4c f5       	brge	.+82     	; 0x1cee <HLCD_vSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	40 e2       	ldi	r20, 0x20	; 32
    1caa:	51 e4       	ldi	r21, 0x41	; 65
    1cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	bc 01       	movw	r22, r24
    1cb6:	cd 01       	movw	r24, r26
    1cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	9e 83       	std	Y+6, r25	; 0x06
    1cc2:	8d 83       	std	Y+5, r24	; 0x05
    1cc4:	0f c0       	rjmp	.+30     	; 0x1ce4 <HLCD_vSendCommand+0x1dc>
    1cc6:	88 ec       	ldi	r24, 0xC8	; 200
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	9c 83       	std	Y+4, r25	; 0x04
    1ccc:	8b 83       	std	Y+3, r24	; 0x03
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	f1 f7       	brne	.-4      	; 0x1cd2 <HLCD_vSendCommand+0x1ca>
    1cd6:	9c 83       	std	Y+4, r25	; 0x04
    1cd8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cda:	8d 81       	ldd	r24, Y+5	; 0x05
    1cdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cde:	01 97       	sbiw	r24, 0x01	; 1
    1ce0:	9e 83       	std	Y+6, r25	; 0x06
    1ce2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce8:	00 97       	sbiw	r24, 0x00	; 0
    1cea:	69 f7       	brne	.-38     	; 0x1cc6 <HLCD_vSendCommand+0x1be>
    1cec:	14 c0       	rjmp	.+40     	; 0x1d16 <HLCD_vSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cee:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf0:	78 85       	ldd	r23, Y+8	; 0x08
    1cf2:	89 85       	ldd	r24, Y+9	; 0x09
    1cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	9e 83       	std	Y+6, r25	; 0x06
    1d00:	8d 83       	std	Y+5, r24	; 0x05
    1d02:	8d 81       	ldd	r24, Y+5	; 0x05
    1d04:	9e 81       	ldd	r25, Y+6	; 0x06
    1d06:	9a 83       	std	Y+2, r25	; 0x02
    1d08:	89 83       	std	Y+1, r24	; 0x01
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	f1 f7       	brne	.-4      	; 0x1d0e <HLCD_vSendCommand+0x206>
    1d12:	9a 83       	std	Y+2, r25	; 0x02
    1d14:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    1d16:	6d 96       	adiw	r28, 0x1d	; 29
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	cd bf       	out	0x3d, r28	; 61
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	08 95       	ret

00001d28 <HLCD_vSendChar>:

void HLCD_vSendChar(u8 A_u8Char)
{
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	6d 97       	sbiw	r28, 0x1d	; 29
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	de bf       	out	0x3e, r29	; 62
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	cd bf       	out	0x3d, r28	; 61
    1d3c:	8d 8f       	std	Y+29, r24	; 0x1d

	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RS_PIN , DIO_HIGH);
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	60 e0       	ldi	r22, 0x00	; 0
    1d42:	41 e0       	ldi	r20, 0x01	; 1
    1d44:	0e 94 d5 09 	call	0x13aa	; 0x13aa <MDIO_vSetPinVal>
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RW_PIN , DIO_LOW);
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	61 e0       	ldi	r22, 0x01	; 1
    1d4c:	40 e0       	ldi	r20, 0x00	; 0
    1d4e:	0e 94 d5 09 	call	0x13aa	; 0x13aa <MDIO_vSetPinVal>
	MDIO_vSetPortVal(LCD_DATA_PORT , A_u8Char);
    1d52:	82 e0       	ldi	r24, 0x02	; 2
    1d54:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1d56:	0e 94 90 0b 	call	0x1720	; 0x1720 <MDIO_vSetPortVal>

	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_EN_PIN , DIO_HIGH);
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	62 e0       	ldi	r22, 0x02	; 2
    1d5e:	41 e0       	ldi	r20, 0x01	; 1
    1d60:	0e 94 d5 09 	call	0x13aa	; 0x13aa <MDIO_vSetPinVal>
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	a0 e8       	ldi	r26, 0x80	; 128
    1d6a:	bf e3       	ldi	r27, 0x3F	; 63
    1d6c:	89 8f       	std	Y+25, r24	; 0x19
    1d6e:	9a 8f       	std	Y+26, r25	; 0x1a
    1d70:	ab 8f       	std	Y+27, r26	; 0x1b
    1d72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d74:	69 8d       	ldd	r22, Y+25	; 0x19
    1d76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	4a ef       	ldi	r20, 0xFA	; 250
    1d82:	54 e4       	ldi	r21, 0x44	; 68
    1d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	8d 8b       	std	Y+21, r24	; 0x15
    1d8e:	9e 8b       	std	Y+22, r25	; 0x16
    1d90:	af 8b       	std	Y+23, r26	; 0x17
    1d92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d94:	6d 89       	ldd	r22, Y+21	; 0x15
    1d96:	7e 89       	ldd	r23, Y+22	; 0x16
    1d98:	8f 89       	ldd	r24, Y+23	; 0x17
    1d9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	40 e8       	ldi	r20, 0x80	; 128
    1da2:	5f e3       	ldi	r21, 0x3F	; 63
    1da4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1da8:	88 23       	and	r24, r24
    1daa:	2c f4       	brge	.+10     	; 0x1db6 <HLCD_vSendChar+0x8e>
		__ticks = 1;
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	9c 8b       	std	Y+20, r25	; 0x14
    1db2:	8b 8b       	std	Y+19, r24	; 0x13
    1db4:	3f c0       	rjmp	.+126    	; 0x1e34 <HLCD_vSendChar+0x10c>
	else if (__tmp > 65535)
    1db6:	6d 89       	ldd	r22, Y+21	; 0x15
    1db8:	7e 89       	ldd	r23, Y+22	; 0x16
    1dba:	8f 89       	ldd	r24, Y+23	; 0x17
    1dbc:	98 8d       	ldd	r25, Y+24	; 0x18
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	3f ef       	ldi	r19, 0xFF	; 255
    1dc2:	4f e7       	ldi	r20, 0x7F	; 127
    1dc4:	57 e4       	ldi	r21, 0x47	; 71
    1dc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dca:	18 16       	cp	r1, r24
    1dcc:	4c f5       	brge	.+82     	; 0x1e20 <HLCD_vSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dce:	69 8d       	ldd	r22, Y+25	; 0x19
    1dd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e2       	ldi	r20, 0x20	; 32
    1ddc:	51 e4       	ldi	r21, 0x41	; 65
    1dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	bc 01       	movw	r22, r24
    1de8:	cd 01       	movw	r24, r26
    1dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	9c 8b       	std	Y+20, r25	; 0x14
    1df4:	8b 8b       	std	Y+19, r24	; 0x13
    1df6:	0f c0       	rjmp	.+30     	; 0x1e16 <HLCD_vSendChar+0xee>
    1df8:	88 ec       	ldi	r24, 0xC8	; 200
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	9a 8b       	std	Y+18, r25	; 0x12
    1dfe:	89 8b       	std	Y+17, r24	; 0x11
    1e00:	89 89       	ldd	r24, Y+17	; 0x11
    1e02:	9a 89       	ldd	r25, Y+18	; 0x12
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	f1 f7       	brne	.-4      	; 0x1e04 <HLCD_vSendChar+0xdc>
    1e08:	9a 8b       	std	Y+18, r25	; 0x12
    1e0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	9c 8b       	std	Y+20, r25	; 0x14
    1e14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e16:	8b 89       	ldd	r24, Y+19	; 0x13
    1e18:	9c 89       	ldd	r25, Y+20	; 0x14
    1e1a:	00 97       	sbiw	r24, 0x00	; 0
    1e1c:	69 f7       	brne	.-38     	; 0x1df8 <HLCD_vSendChar+0xd0>
    1e1e:	14 c0       	rjmp	.+40     	; 0x1e48 <HLCD_vSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e20:	6d 89       	ldd	r22, Y+21	; 0x15
    1e22:	7e 89       	ldd	r23, Y+22	; 0x16
    1e24:	8f 89       	ldd	r24, Y+23	; 0x17
    1e26:	98 8d       	ldd	r25, Y+24	; 0x18
    1e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	9c 8b       	std	Y+20, r25	; 0x14
    1e32:	8b 8b       	std	Y+19, r24	; 0x13
    1e34:	8b 89       	ldd	r24, Y+19	; 0x13
    1e36:	9c 89       	ldd	r25, Y+20	; 0x14
    1e38:	98 8b       	std	Y+16, r25	; 0x10
    1e3a:	8f 87       	std	Y+15, r24	; 0x0f
    1e3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e3e:	98 89       	ldd	r25, Y+16	; 0x10
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <HLCD_vSendChar+0x118>
    1e44:	98 8b       	std	Y+16, r25	; 0x10
    1e46:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_EN_PIN , DIO_LOW);
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	62 e0       	ldi	r22, 0x02	; 2
    1e4c:	40 e0       	ldi	r20, 0x00	; 0
    1e4e:	0e 94 d5 09 	call	0x13aa	; 0x13aa <MDIO_vSetPinVal>
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	a0 e8       	ldi	r26, 0x80	; 128
    1e58:	bf e3       	ldi	r27, 0x3F	; 63
    1e5a:	8b 87       	std	Y+11, r24	; 0x0b
    1e5c:	9c 87       	std	Y+12, r25	; 0x0c
    1e5e:	ad 87       	std	Y+13, r26	; 0x0d
    1e60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	4a ef       	ldi	r20, 0xFA	; 250
    1e70:	54 e4       	ldi	r21, 0x44	; 68
    1e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	8f 83       	std	Y+7, r24	; 0x07
    1e7c:	98 87       	std	Y+8, r25	; 0x08
    1e7e:	a9 87       	std	Y+9, r26	; 0x09
    1e80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e82:	6f 81       	ldd	r22, Y+7	; 0x07
    1e84:	78 85       	ldd	r23, Y+8	; 0x08
    1e86:	89 85       	ldd	r24, Y+9	; 0x09
    1e88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	40 e8       	ldi	r20, 0x80	; 128
    1e90:	5f e3       	ldi	r21, 0x3F	; 63
    1e92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e96:	88 23       	and	r24, r24
    1e98:	2c f4       	brge	.+10     	; 0x1ea4 <HLCD_vSendChar+0x17c>
		__ticks = 1;
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	9e 83       	std	Y+6, r25	; 0x06
    1ea0:	8d 83       	std	Y+5, r24	; 0x05
    1ea2:	3f c0       	rjmp	.+126    	; 0x1f22 <HLCD_vSendChar+0x1fa>
	else if (__tmp > 65535)
    1ea4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea6:	78 85       	ldd	r23, Y+8	; 0x08
    1ea8:	89 85       	ldd	r24, Y+9	; 0x09
    1eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	3f ef       	ldi	r19, 0xFF	; 255
    1eb0:	4f e7       	ldi	r20, 0x7F	; 127
    1eb2:	57 e4       	ldi	r21, 0x47	; 71
    1eb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eb8:	18 16       	cp	r1, r24
    1eba:	4c f5       	brge	.+82     	; 0x1f0e <HLCD_vSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ebc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ebe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	40 e2       	ldi	r20, 0x20	; 32
    1eca:	51 e4       	ldi	r21, 0x41	; 65
    1ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	bc 01       	movw	r22, r24
    1ed6:	cd 01       	movw	r24, r26
    1ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	9e 83       	std	Y+6, r25	; 0x06
    1ee2:	8d 83       	std	Y+5, r24	; 0x05
    1ee4:	0f c0       	rjmp	.+30     	; 0x1f04 <HLCD_vSendChar+0x1dc>
    1ee6:	88 ec       	ldi	r24, 0xC8	; 200
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	9c 83       	std	Y+4, r25	; 0x04
    1eec:	8b 83       	std	Y+3, r24	; 0x03
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	f1 f7       	brne	.-4      	; 0x1ef2 <HLCD_vSendChar+0x1ca>
    1ef6:	9c 83       	std	Y+4, r25	; 0x04
    1ef8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1efa:	8d 81       	ldd	r24, Y+5	; 0x05
    1efc:	9e 81       	ldd	r25, Y+6	; 0x06
    1efe:	01 97       	sbiw	r24, 0x01	; 1
    1f00:	9e 83       	std	Y+6, r25	; 0x06
    1f02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f04:	8d 81       	ldd	r24, Y+5	; 0x05
    1f06:	9e 81       	ldd	r25, Y+6	; 0x06
    1f08:	00 97       	sbiw	r24, 0x00	; 0
    1f0a:	69 f7       	brne	.-38     	; 0x1ee6 <HLCD_vSendChar+0x1be>
    1f0c:	14 c0       	rjmp	.+40     	; 0x1f36 <HLCD_vSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f10:	78 85       	ldd	r23, Y+8	; 0x08
    1f12:	89 85       	ldd	r24, Y+9	; 0x09
    1f14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	9e 83       	std	Y+6, r25	; 0x06
    1f20:	8d 83       	std	Y+5, r24	; 0x05
    1f22:	8d 81       	ldd	r24, Y+5	; 0x05
    1f24:	9e 81       	ldd	r25, Y+6	; 0x06
    1f26:	9a 83       	std	Y+2, r25	; 0x02
    1f28:	89 83       	std	Y+1, r24	; 0x01
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2e:	01 97       	sbiw	r24, 0x01	; 1
    1f30:	f1 f7       	brne	.-4      	; 0x1f2e <HLCD_vSendChar+0x206>
    1f32:	9a 83       	std	Y+2, r25	; 0x02
    1f34:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);


}
    1f36:	6d 96       	adiw	r28, 0x1d	; 29
    1f38:	0f b6       	in	r0, 0x3f	; 63
    1f3a:	f8 94       	cli
    1f3c:	de bf       	out	0x3e, r29	; 62
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	cd bf       	out	0x3d, r28	; 61
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	08 95       	ret

00001f48 <HLCD_vInit>:
void HLCD_vInit(void)
{
    1f48:	0f 93       	push	r16
    1f4a:	1f 93       	push	r17
    1f4c:	df 93       	push	r29
    1f4e:	cf 93       	push	r28
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	c6 54       	subi	r28, 0x46	; 70
    1f56:	d0 40       	sbci	r29, 0x00	; 0
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	de bf       	out	0x3e, r29	; 62
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	cd bf       	out	0x3d, r28	; 61

	//set pin direction
	MDIO_vSetPortDIR(LCD_DATA_PORT , 0XFF);
    1f62:	82 e0       	ldi	r24, 0x02	; 2
    1f64:	6f ef       	ldi	r22, 0xFF	; 255
    1f66:	0e 94 4f 0b 	call	0x169e	; 0x169e <MDIO_vSetPortDIR>
	MDIO_vSetPinDIR(LCD_CTRL_PORT,LCD_RS_PIN,DIO_OUTPUT);
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	60 e0       	ldi	r22, 0x00	; 0
    1f6e:	41 e0       	ldi	r20, 0x01	; 1
    1f70:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <MDIO_vSetPinDIR>
	MDIO_vSetPinDIR(LCD_CTRL_PORT,LCD_RW_PIN,DIO_OUTPUT);
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	61 e0       	ldi	r22, 0x01	; 1
    1f78:	41 e0       	ldi	r20, 0x01	; 1
    1f7a:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <MDIO_vSetPinDIR>
	MDIO_vSetPinDIR(LCD_CTRL_PORT,LCD_EN_PIN,DIO_OUTPUT);
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	62 e0       	ldi	r22, 0x02	; 2
    1f82:	41 e0       	ldi	r20, 0x01	; 1
    1f84:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <MDIO_vSetPinDIR>
    1f88:	fe 01       	movw	r30, r28
    1f8a:	ed 5b       	subi	r30, 0xBD	; 189
    1f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	a8 e4       	ldi	r26, 0x48	; 72
    1f94:	b2 e4       	ldi	r27, 0x42	; 66
    1f96:	80 83       	st	Z, r24
    1f98:	91 83       	std	Z+1, r25	; 0x01
    1f9a:	a2 83       	std	Z+2, r26	; 0x02
    1f9c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f9e:	8e 01       	movw	r16, r28
    1fa0:	01 5c       	subi	r16, 0xC1	; 193
    1fa2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	ed 5b       	subi	r30, 0xBD	; 189
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	60 81       	ld	r22, Z
    1fac:	71 81       	ldd	r23, Z+1	; 0x01
    1fae:	82 81       	ldd	r24, Z+2	; 0x02
    1fb0:	93 81       	ldd	r25, Z+3	; 0x03
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	4a ef       	ldi	r20, 0xFA	; 250
    1fb8:	54 e4       	ldi	r21, 0x44	; 68
    1fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	f8 01       	movw	r30, r16
    1fc4:	80 83       	st	Z, r24
    1fc6:	91 83       	std	Z+1, r25	; 0x01
    1fc8:	a2 83       	std	Z+2, r26	; 0x02
    1fca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fcc:	fe 01       	movw	r30, r28
    1fce:	ff 96       	adiw	r30, 0x3f	; 63
    1fd0:	60 81       	ld	r22, Z
    1fd2:	71 81       	ldd	r23, Z+1	; 0x01
    1fd4:	82 81       	ldd	r24, Z+2	; 0x02
    1fd6:	93 81       	ldd	r25, Z+3	; 0x03
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e8       	ldi	r20, 0x80	; 128
    1fde:	5f e3       	ldi	r21, 0x3F	; 63
    1fe0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fe4:	88 23       	and	r24, r24
    1fe6:	2c f4       	brge	.+10     	; 0x1ff2 <HLCD_vInit+0xaa>
		__ticks = 1;
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	9e af       	std	Y+62, r25	; 0x3e
    1fee:	8d af       	std	Y+61, r24	; 0x3d
    1ff0:	46 c0       	rjmp	.+140    	; 0x207e <HLCD_vInit+0x136>
	else if (__tmp > 65535)
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	ff 96       	adiw	r30, 0x3f	; 63
    1ff6:	60 81       	ld	r22, Z
    1ff8:	71 81       	ldd	r23, Z+1	; 0x01
    1ffa:	82 81       	ldd	r24, Z+2	; 0x02
    1ffc:	93 81       	ldd	r25, Z+3	; 0x03
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	3f ef       	ldi	r19, 0xFF	; 255
    2002:	4f e7       	ldi	r20, 0x7F	; 127
    2004:	57 e4       	ldi	r21, 0x47	; 71
    2006:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    200a:	18 16       	cp	r1, r24
    200c:	64 f5       	brge	.+88     	; 0x2066 <HLCD_vInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200e:	fe 01       	movw	r30, r28
    2010:	ed 5b       	subi	r30, 0xBD	; 189
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	60 81       	ld	r22, Z
    2016:	71 81       	ldd	r23, Z+1	; 0x01
    2018:	82 81       	ldd	r24, Z+2	; 0x02
    201a:	93 81       	ldd	r25, Z+3	; 0x03
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	40 e2       	ldi	r20, 0x20	; 32
    2022:	51 e4       	ldi	r21, 0x41	; 65
    2024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	bc 01       	movw	r22, r24
    202e:	cd 01       	movw	r24, r26
    2030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	9e af       	std	Y+62, r25	; 0x3e
    203a:	8d af       	std	Y+61, r24	; 0x3d
    203c:	0f c0       	rjmp	.+30     	; 0x205c <HLCD_vInit+0x114>
    203e:	88 ec       	ldi	r24, 0xC8	; 200
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	9c af       	std	Y+60, r25	; 0x3c
    2044:	8b af       	std	Y+59, r24	; 0x3b
    2046:	8b ad       	ldd	r24, Y+59	; 0x3b
    2048:	9c ad       	ldd	r25, Y+60	; 0x3c
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	f1 f7       	brne	.-4      	; 0x204a <HLCD_vInit+0x102>
    204e:	9c af       	std	Y+60, r25	; 0x3c
    2050:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2052:	8d ad       	ldd	r24, Y+61	; 0x3d
    2054:	9e ad       	ldd	r25, Y+62	; 0x3e
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	9e af       	std	Y+62, r25	; 0x3e
    205a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    205c:	8d ad       	ldd	r24, Y+61	; 0x3d
    205e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2060:	00 97       	sbiw	r24, 0x00	; 0
    2062:	69 f7       	brne	.-38     	; 0x203e <HLCD_vInit+0xf6>
    2064:	16 c0       	rjmp	.+44     	; 0x2092 <HLCD_vInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2066:	fe 01       	movw	r30, r28
    2068:	ff 96       	adiw	r30, 0x3f	; 63
    206a:	60 81       	ld	r22, Z
    206c:	71 81       	ldd	r23, Z+1	; 0x01
    206e:	82 81       	ldd	r24, Z+2	; 0x02
    2070:	93 81       	ldd	r25, Z+3	; 0x03
    2072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	9e af       	std	Y+62, r25	; 0x3e
    207c:	8d af       	std	Y+61, r24	; 0x3d
    207e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2080:	9e ad       	ldd	r25, Y+62	; 0x3e
    2082:	9a af       	std	Y+58, r25	; 0x3a
    2084:	89 af       	std	Y+57, r24	; 0x39
    2086:	89 ad       	ldd	r24, Y+57	; 0x39
    2088:	9a ad       	ldd	r25, Y+58	; 0x3a
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	f1 f7       	brne	.-4      	; 0x208a <HLCD_vInit+0x142>
    208e:	9a af       	std	Y+58, r25	; 0x3a
    2090:	89 af       	std	Y+57, r24	; 0x39

	//start init sequance

	_delay_ms(50);
	HLCD_vSendCommand(0b00111000);
    2092:	88 e3       	ldi	r24, 0x38	; 56
    2094:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <HLCD_vSendCommand>
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	a0 e8       	ldi	r26, 0x80	; 128
    209e:	bf e3       	ldi	r27, 0x3F	; 63
    20a0:	8d ab       	std	Y+53, r24	; 0x35
    20a2:	9e ab       	std	Y+54, r25	; 0x36
    20a4:	af ab       	std	Y+55, r26	; 0x37
    20a6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a8:	6d a9       	ldd	r22, Y+53	; 0x35
    20aa:	7e a9       	ldd	r23, Y+54	; 0x36
    20ac:	8f a9       	ldd	r24, Y+55	; 0x37
    20ae:	98 ad       	ldd	r25, Y+56	; 0x38
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	4a ef       	ldi	r20, 0xFA	; 250
    20b6:	54 e4       	ldi	r21, 0x44	; 68
    20b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	89 ab       	std	Y+49, r24	; 0x31
    20c2:	9a ab       	std	Y+50, r25	; 0x32
    20c4:	ab ab       	std	Y+51, r26	; 0x33
    20c6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20c8:	69 a9       	ldd	r22, Y+49	; 0x31
    20ca:	7a a9       	ldd	r23, Y+50	; 0x32
    20cc:	8b a9       	ldd	r24, Y+51	; 0x33
    20ce:	9c a9       	ldd	r25, Y+52	; 0x34
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	40 e8       	ldi	r20, 0x80	; 128
    20d6:	5f e3       	ldi	r21, 0x3F	; 63
    20d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20dc:	88 23       	and	r24, r24
    20de:	2c f4       	brge	.+10     	; 0x20ea <HLCD_vInit+0x1a2>
		__ticks = 1;
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	98 ab       	std	Y+48, r25	; 0x30
    20e6:	8f a7       	std	Y+47, r24	; 0x2f
    20e8:	3f c0       	rjmp	.+126    	; 0x2168 <HLCD_vInit+0x220>
	else if (__tmp > 65535)
    20ea:	69 a9       	ldd	r22, Y+49	; 0x31
    20ec:	7a a9       	ldd	r23, Y+50	; 0x32
    20ee:	8b a9       	ldd	r24, Y+51	; 0x33
    20f0:	9c a9       	ldd	r25, Y+52	; 0x34
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	3f ef       	ldi	r19, 0xFF	; 255
    20f6:	4f e7       	ldi	r20, 0x7F	; 127
    20f8:	57 e4       	ldi	r21, 0x47	; 71
    20fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20fe:	18 16       	cp	r1, r24
    2100:	4c f5       	brge	.+82     	; 0x2154 <HLCD_vInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2102:	6d a9       	ldd	r22, Y+53	; 0x35
    2104:	7e a9       	ldd	r23, Y+54	; 0x36
    2106:	8f a9       	ldd	r24, Y+55	; 0x37
    2108:	98 ad       	ldd	r25, Y+56	; 0x38
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	40 e2       	ldi	r20, 0x20	; 32
    2110:	51 e4       	ldi	r21, 0x41	; 65
    2112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	bc 01       	movw	r22, r24
    211c:	cd 01       	movw	r24, r26
    211e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	98 ab       	std	Y+48, r25	; 0x30
    2128:	8f a7       	std	Y+47, r24	; 0x2f
    212a:	0f c0       	rjmp	.+30     	; 0x214a <HLCD_vInit+0x202>
    212c:	88 ec       	ldi	r24, 0xC8	; 200
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	9e a7       	std	Y+46, r25	; 0x2e
    2132:	8d a7       	std	Y+45, r24	; 0x2d
    2134:	8d a5       	ldd	r24, Y+45	; 0x2d
    2136:	9e a5       	ldd	r25, Y+46	; 0x2e
    2138:	01 97       	sbiw	r24, 0x01	; 1
    213a:	f1 f7       	brne	.-4      	; 0x2138 <HLCD_vInit+0x1f0>
    213c:	9e a7       	std	Y+46, r25	; 0x2e
    213e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2140:	8f a5       	ldd	r24, Y+47	; 0x2f
    2142:	98 a9       	ldd	r25, Y+48	; 0x30
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	98 ab       	std	Y+48, r25	; 0x30
    2148:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214a:	8f a5       	ldd	r24, Y+47	; 0x2f
    214c:	98 a9       	ldd	r25, Y+48	; 0x30
    214e:	00 97       	sbiw	r24, 0x00	; 0
    2150:	69 f7       	brne	.-38     	; 0x212c <HLCD_vInit+0x1e4>
    2152:	14 c0       	rjmp	.+40     	; 0x217c <HLCD_vInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2154:	69 a9       	ldd	r22, Y+49	; 0x31
    2156:	7a a9       	ldd	r23, Y+50	; 0x32
    2158:	8b a9       	ldd	r24, Y+51	; 0x33
    215a:	9c a9       	ldd	r25, Y+52	; 0x34
    215c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	98 ab       	std	Y+48, r25	; 0x30
    2166:	8f a7       	std	Y+47, r24	; 0x2f
    2168:	8f a5       	ldd	r24, Y+47	; 0x2f
    216a:	98 a9       	ldd	r25, Y+48	; 0x30
    216c:	9c a7       	std	Y+44, r25	; 0x2c
    216e:	8b a7       	std	Y+43, r24	; 0x2b
    2170:	8b a5       	ldd	r24, Y+43	; 0x2b
    2172:	9c a5       	ldd	r25, Y+44	; 0x2c
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	f1 f7       	brne	.-4      	; 0x2174 <HLCD_vInit+0x22c>
    2178:	9c a7       	std	Y+44, r25	; 0x2c
    217a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	HLCD_vSendCommand(0b00001111);
    217c:	8f e0       	ldi	r24, 0x0F	; 15
    217e:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <HLCD_vSendCommand>
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	a0 e8       	ldi	r26, 0x80	; 128
    2188:	bf e3       	ldi	r27, 0x3F	; 63
    218a:	8f a3       	std	Y+39, r24	; 0x27
    218c:	98 a7       	std	Y+40, r25	; 0x28
    218e:	a9 a7       	std	Y+41, r26	; 0x29
    2190:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2192:	6f a1       	ldd	r22, Y+39	; 0x27
    2194:	78 a5       	ldd	r23, Y+40	; 0x28
    2196:	89 a5       	ldd	r24, Y+41	; 0x29
    2198:	9a a5       	ldd	r25, Y+42	; 0x2a
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	4a ef       	ldi	r20, 0xFA	; 250
    21a0:	54 e4       	ldi	r21, 0x44	; 68
    21a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	8b a3       	std	Y+35, r24	; 0x23
    21ac:	9c a3       	std	Y+36, r25	; 0x24
    21ae:	ad a3       	std	Y+37, r26	; 0x25
    21b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21b2:	6b a1       	ldd	r22, Y+35	; 0x23
    21b4:	7c a1       	ldd	r23, Y+36	; 0x24
    21b6:	8d a1       	ldd	r24, Y+37	; 0x25
    21b8:	9e a1       	ldd	r25, Y+38	; 0x26
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 e8       	ldi	r20, 0x80	; 128
    21c0:	5f e3       	ldi	r21, 0x3F	; 63
    21c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21c6:	88 23       	and	r24, r24
    21c8:	2c f4       	brge	.+10     	; 0x21d4 <HLCD_vInit+0x28c>
		__ticks = 1;
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	9a a3       	std	Y+34, r25	; 0x22
    21d0:	89 a3       	std	Y+33, r24	; 0x21
    21d2:	3f c0       	rjmp	.+126    	; 0x2252 <HLCD_vInit+0x30a>
	else if (__tmp > 65535)
    21d4:	6b a1       	ldd	r22, Y+35	; 0x23
    21d6:	7c a1       	ldd	r23, Y+36	; 0x24
    21d8:	8d a1       	ldd	r24, Y+37	; 0x25
    21da:	9e a1       	ldd	r25, Y+38	; 0x26
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	3f ef       	ldi	r19, 0xFF	; 255
    21e0:	4f e7       	ldi	r20, 0x7F	; 127
    21e2:	57 e4       	ldi	r21, 0x47	; 71
    21e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21e8:	18 16       	cp	r1, r24
    21ea:	4c f5       	brge	.+82     	; 0x223e <HLCD_vInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ec:	6f a1       	ldd	r22, Y+39	; 0x27
    21ee:	78 a5       	ldd	r23, Y+40	; 0x28
    21f0:	89 a5       	ldd	r24, Y+41	; 0x29
    21f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	40 e2       	ldi	r20, 0x20	; 32
    21fa:	51 e4       	ldi	r21, 0x41	; 65
    21fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	bc 01       	movw	r22, r24
    2206:	cd 01       	movw	r24, r26
    2208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	9a a3       	std	Y+34, r25	; 0x22
    2212:	89 a3       	std	Y+33, r24	; 0x21
    2214:	0f c0       	rjmp	.+30     	; 0x2234 <HLCD_vInit+0x2ec>
    2216:	88 ec       	ldi	r24, 0xC8	; 200
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	98 a3       	std	Y+32, r25	; 0x20
    221c:	8f 8f       	std	Y+31, r24	; 0x1f
    221e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2220:	98 a1       	ldd	r25, Y+32	; 0x20
    2222:	01 97       	sbiw	r24, 0x01	; 1
    2224:	f1 f7       	brne	.-4      	; 0x2222 <HLCD_vInit+0x2da>
    2226:	98 a3       	std	Y+32, r25	; 0x20
    2228:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222a:	89 a1       	ldd	r24, Y+33	; 0x21
    222c:	9a a1       	ldd	r25, Y+34	; 0x22
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	9a a3       	std	Y+34, r25	; 0x22
    2232:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2234:	89 a1       	ldd	r24, Y+33	; 0x21
    2236:	9a a1       	ldd	r25, Y+34	; 0x22
    2238:	00 97       	sbiw	r24, 0x00	; 0
    223a:	69 f7       	brne	.-38     	; 0x2216 <HLCD_vInit+0x2ce>
    223c:	14 c0       	rjmp	.+40     	; 0x2266 <HLCD_vInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223e:	6b a1       	ldd	r22, Y+35	; 0x23
    2240:	7c a1       	ldd	r23, Y+36	; 0x24
    2242:	8d a1       	ldd	r24, Y+37	; 0x25
    2244:	9e a1       	ldd	r25, Y+38	; 0x26
    2246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	9a a3       	std	Y+34, r25	; 0x22
    2250:	89 a3       	std	Y+33, r24	; 0x21
    2252:	89 a1       	ldd	r24, Y+33	; 0x21
    2254:	9a a1       	ldd	r25, Y+34	; 0x22
    2256:	9e 8f       	std	Y+30, r25	; 0x1e
    2258:	8d 8f       	std	Y+29, r24	; 0x1d
    225a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    225c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	f1 f7       	brne	.-4      	; 0x225e <HLCD_vInit+0x316>
    2262:	9e 8f       	std	Y+30, r25	; 0x1e
    2264:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	HLCD_vSendCommand(0b00000001);
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <HLCD_vSendCommand>
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	a0 e4       	ldi	r26, 0x40	; 64
    2272:	b0 e4       	ldi	r27, 0x40	; 64
    2274:	89 8f       	std	Y+25, r24	; 0x19
    2276:	9a 8f       	std	Y+26, r25	; 0x1a
    2278:	ab 8f       	std	Y+27, r26	; 0x1b
    227a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    227c:	69 8d       	ldd	r22, Y+25	; 0x19
    227e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2280:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2282:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	4a ef       	ldi	r20, 0xFA	; 250
    228a:	54 e4       	ldi	r21, 0x44	; 68
    228c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	8d 8b       	std	Y+21, r24	; 0x15
    2296:	9e 8b       	std	Y+22, r25	; 0x16
    2298:	af 8b       	std	Y+23, r26	; 0x17
    229a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    229c:	6d 89       	ldd	r22, Y+21	; 0x15
    229e:	7e 89       	ldd	r23, Y+22	; 0x16
    22a0:	8f 89       	ldd	r24, Y+23	; 0x17
    22a2:	98 8d       	ldd	r25, Y+24	; 0x18
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	40 e8       	ldi	r20, 0x80	; 128
    22aa:	5f e3       	ldi	r21, 0x3F	; 63
    22ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22b0:	88 23       	and	r24, r24
    22b2:	2c f4       	brge	.+10     	; 0x22be <HLCD_vInit+0x376>
		__ticks = 1;
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	9c 8b       	std	Y+20, r25	; 0x14
    22ba:	8b 8b       	std	Y+19, r24	; 0x13
    22bc:	3f c0       	rjmp	.+126    	; 0x233c <HLCD_vInit+0x3f4>
	else if (__tmp > 65535)
    22be:	6d 89       	ldd	r22, Y+21	; 0x15
    22c0:	7e 89       	ldd	r23, Y+22	; 0x16
    22c2:	8f 89       	ldd	r24, Y+23	; 0x17
    22c4:	98 8d       	ldd	r25, Y+24	; 0x18
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	3f ef       	ldi	r19, 0xFF	; 255
    22ca:	4f e7       	ldi	r20, 0x7F	; 127
    22cc:	57 e4       	ldi	r21, 0x47	; 71
    22ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22d2:	18 16       	cp	r1, r24
    22d4:	4c f5       	brge	.+82     	; 0x2328 <HLCD_vInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d6:	69 8d       	ldd	r22, Y+25	; 0x19
    22d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	40 e2       	ldi	r20, 0x20	; 32
    22e4:	51 e4       	ldi	r21, 0x41	; 65
    22e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	bc 01       	movw	r22, r24
    22f0:	cd 01       	movw	r24, r26
    22f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	9c 8b       	std	Y+20, r25	; 0x14
    22fc:	8b 8b       	std	Y+19, r24	; 0x13
    22fe:	0f c0       	rjmp	.+30     	; 0x231e <HLCD_vInit+0x3d6>
    2300:	88 ec       	ldi	r24, 0xC8	; 200
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	9a 8b       	std	Y+18, r25	; 0x12
    2306:	89 8b       	std	Y+17, r24	; 0x11
    2308:	89 89       	ldd	r24, Y+17	; 0x11
    230a:	9a 89       	ldd	r25, Y+18	; 0x12
    230c:	01 97       	sbiw	r24, 0x01	; 1
    230e:	f1 f7       	brne	.-4      	; 0x230c <HLCD_vInit+0x3c4>
    2310:	9a 8b       	std	Y+18, r25	; 0x12
    2312:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2314:	8b 89       	ldd	r24, Y+19	; 0x13
    2316:	9c 89       	ldd	r25, Y+20	; 0x14
    2318:	01 97       	sbiw	r24, 0x01	; 1
    231a:	9c 8b       	std	Y+20, r25	; 0x14
    231c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    231e:	8b 89       	ldd	r24, Y+19	; 0x13
    2320:	9c 89       	ldd	r25, Y+20	; 0x14
    2322:	00 97       	sbiw	r24, 0x00	; 0
    2324:	69 f7       	brne	.-38     	; 0x2300 <HLCD_vInit+0x3b8>
    2326:	14 c0       	rjmp	.+40     	; 0x2350 <HLCD_vInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2328:	6d 89       	ldd	r22, Y+21	; 0x15
    232a:	7e 89       	ldd	r23, Y+22	; 0x16
    232c:	8f 89       	ldd	r24, Y+23	; 0x17
    232e:	98 8d       	ldd	r25, Y+24	; 0x18
    2330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	9c 8b       	std	Y+20, r25	; 0x14
    233a:	8b 8b       	std	Y+19, r24	; 0x13
    233c:	8b 89       	ldd	r24, Y+19	; 0x13
    233e:	9c 89       	ldd	r25, Y+20	; 0x14
    2340:	98 8b       	std	Y+16, r25	; 0x10
    2342:	8f 87       	std	Y+15, r24	; 0x0f
    2344:	8f 85       	ldd	r24, Y+15	; 0x0f
    2346:	98 89       	ldd	r25, Y+16	; 0x10
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	f1 f7       	brne	.-4      	; 0x2348 <HLCD_vInit+0x400>
    234c:	98 8b       	std	Y+16, r25	; 0x10
    234e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3);
	HLCD_vSendCommand(0b00000110);
    2350:	86 e0       	ldi	r24, 0x06	; 6
    2352:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <HLCD_vSendCommand>
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	a0 e8       	ldi	r26, 0x80	; 128
    235c:	bf e3       	ldi	r27, 0x3F	; 63
    235e:	8b 87       	std	Y+11, r24	; 0x0b
    2360:	9c 87       	std	Y+12, r25	; 0x0c
    2362:	ad 87       	std	Y+13, r26	; 0x0d
    2364:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2366:	6b 85       	ldd	r22, Y+11	; 0x0b
    2368:	7c 85       	ldd	r23, Y+12	; 0x0c
    236a:	8d 85       	ldd	r24, Y+13	; 0x0d
    236c:	9e 85       	ldd	r25, Y+14	; 0x0e
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	4a ef       	ldi	r20, 0xFA	; 250
    2374:	54 e4       	ldi	r21, 0x44	; 68
    2376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	8f 83       	std	Y+7, r24	; 0x07
    2380:	98 87       	std	Y+8, r25	; 0x08
    2382:	a9 87       	std	Y+9, r26	; 0x09
    2384:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2386:	6f 81       	ldd	r22, Y+7	; 0x07
    2388:	78 85       	ldd	r23, Y+8	; 0x08
    238a:	89 85       	ldd	r24, Y+9	; 0x09
    238c:	9a 85       	ldd	r25, Y+10	; 0x0a
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e8       	ldi	r20, 0x80	; 128
    2394:	5f e3       	ldi	r21, 0x3F	; 63
    2396:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    239a:	88 23       	and	r24, r24
    239c:	2c f4       	brge	.+10     	; 0x23a8 <HLCD_vInit+0x460>
		__ticks = 1;
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	9e 83       	std	Y+6, r25	; 0x06
    23a4:	8d 83       	std	Y+5, r24	; 0x05
    23a6:	3f c0       	rjmp	.+126    	; 0x2426 <HLCD_vInit+0x4de>
	else if (__tmp > 65535)
    23a8:	6f 81       	ldd	r22, Y+7	; 0x07
    23aa:	78 85       	ldd	r23, Y+8	; 0x08
    23ac:	89 85       	ldd	r24, Y+9	; 0x09
    23ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	3f ef       	ldi	r19, 0xFF	; 255
    23b4:	4f e7       	ldi	r20, 0x7F	; 127
    23b6:	57 e4       	ldi	r21, 0x47	; 71
    23b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23bc:	18 16       	cp	r1, r24
    23be:	4c f5       	brge	.+82     	; 0x2412 <HLCD_vInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	40 e2       	ldi	r20, 0x20	; 32
    23ce:	51 e4       	ldi	r21, 0x41	; 65
    23d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	bc 01       	movw	r22, r24
    23da:	cd 01       	movw	r24, r26
    23dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	9e 83       	std	Y+6, r25	; 0x06
    23e6:	8d 83       	std	Y+5, r24	; 0x05
    23e8:	0f c0       	rjmp	.+30     	; 0x2408 <HLCD_vInit+0x4c0>
    23ea:	88 ec       	ldi	r24, 0xC8	; 200
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	9c 83       	std	Y+4, r25	; 0x04
    23f0:	8b 83       	std	Y+3, r24	; 0x03
    23f2:	8b 81       	ldd	r24, Y+3	; 0x03
    23f4:	9c 81       	ldd	r25, Y+4	; 0x04
    23f6:	01 97       	sbiw	r24, 0x01	; 1
    23f8:	f1 f7       	brne	.-4      	; 0x23f6 <HLCD_vInit+0x4ae>
    23fa:	9c 83       	std	Y+4, r25	; 0x04
    23fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2400:	9e 81       	ldd	r25, Y+6	; 0x06
    2402:	01 97       	sbiw	r24, 0x01	; 1
    2404:	9e 83       	std	Y+6, r25	; 0x06
    2406:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2408:	8d 81       	ldd	r24, Y+5	; 0x05
    240a:	9e 81       	ldd	r25, Y+6	; 0x06
    240c:	00 97       	sbiw	r24, 0x00	; 0
    240e:	69 f7       	brne	.-38     	; 0x23ea <HLCD_vInit+0x4a2>
    2410:	14 c0       	rjmp	.+40     	; 0x243a <HLCD_vInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2412:	6f 81       	ldd	r22, Y+7	; 0x07
    2414:	78 85       	ldd	r23, Y+8	; 0x08
    2416:	89 85       	ldd	r24, Y+9	; 0x09
    2418:	9a 85       	ldd	r25, Y+10	; 0x0a
    241a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	9e 83       	std	Y+6, r25	; 0x06
    2424:	8d 83       	std	Y+5, r24	; 0x05
    2426:	8d 81       	ldd	r24, Y+5	; 0x05
    2428:	9e 81       	ldd	r25, Y+6	; 0x06
    242a:	9a 83       	std	Y+2, r25	; 0x02
    242c:	89 83       	std	Y+1, r24	; 0x01
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	9a 81       	ldd	r25, Y+2	; 0x02
    2432:	01 97       	sbiw	r24, 0x01	; 1
    2434:	f1 f7       	brne	.-4      	; 0x2432 <HLCD_vInit+0x4ea>
    2436:	9a 83       	std	Y+2, r25	; 0x02
    2438:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    243a:	ca 5b       	subi	r28, 0xBA	; 186
    243c:	df 4f       	sbci	r29, 0xFF	; 255
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	f8 94       	cli
    2442:	de bf       	out	0x3e, r29	; 62
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	cd bf       	out	0x3d, r28	; 61
    2448:	cf 91       	pop	r28
    244a:	df 91       	pop	r29
    244c:	1f 91       	pop	r17
    244e:	0f 91       	pop	r16
    2450:	08 95       	ret

00002452 <HLCD_vPrintString>:
void HLCD_vPrintString(u8 A_u8string[])
{
    2452:	df 93       	push	r29
    2454:	cf 93       	push	r28
    2456:	00 d0       	rcall	.+0      	; 0x2458 <HLCD_vPrintString+0x6>
    2458:	0f 92       	push	r0
    245a:	cd b7       	in	r28, 0x3d	; 61
    245c:	de b7       	in	r29, 0x3e	; 62
    245e:	9b 83       	std	Y+3, r25	; 0x03
    2460:	8a 83       	std	Y+2, r24	; 0x02

	for (u8 L_u8i =0 ; A_u8string[L_u8i] !='\0' ;L_u8i++)
    2462:	19 82       	std	Y+1, r1	; 0x01
    2464:	0e c0       	rjmp	.+28     	; 0x2482 <HLCD_vPrintString+0x30>
	{
		HLCD_vSendChar(A_u8string[L_u8i]);
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	28 2f       	mov	r18, r24
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	8a 81       	ldd	r24, Y+2	; 0x02
    246e:	9b 81       	ldd	r25, Y+3	; 0x03
    2470:	fc 01       	movw	r30, r24
    2472:	e2 0f       	add	r30, r18
    2474:	f3 1f       	adc	r31, r19
    2476:	80 81       	ld	r24, Z
    2478:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <HLCD_vSendChar>

}
void HLCD_vPrintString(u8 A_u8string[])
{

	for (u8 L_u8i =0 ; A_u8string[L_u8i] !='\0' ;L_u8i++)
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	8f 5f       	subi	r24, 0xFF	; 255
    2480:	89 83       	std	Y+1, r24	; 0x01
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	28 2f       	mov	r18, r24
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	8a 81       	ldd	r24, Y+2	; 0x02
    248a:	9b 81       	ldd	r25, Y+3	; 0x03
    248c:	fc 01       	movw	r30, r24
    248e:	e2 0f       	add	r30, r18
    2490:	f3 1f       	adc	r31, r19
    2492:	80 81       	ld	r24, Z
    2494:	88 23       	and	r24, r24
    2496:	39 f7       	brne	.-50     	; 0x2466 <HLCD_vPrintString+0x14>
		HLCD_vSendChar(A_u8string[L_u8i]);

	}


}
    2498:	0f 90       	pop	r0
    249a:	0f 90       	pop	r0
    249c:	0f 90       	pop	r0
    249e:	cf 91       	pop	r28
    24a0:	df 91       	pop	r29
    24a2:	08 95       	ret

000024a4 <HLCD_vPrintNumber>:

void HLCD_vPrintNumber(s32 A_s32Number)
{
    24a4:	0f 93       	push	r16
    24a6:	1f 93       	push	r17
    24a8:	df 93       	push	r29
    24aa:	cf 93       	push	r28
    24ac:	cd b7       	in	r28, 0x3d	; 61
    24ae:	de b7       	in	r29, 0x3e	; 62
    24b0:	60 97       	sbiw	r28, 0x10	; 16
    24b2:	0f b6       	in	r0, 0x3f	; 63
    24b4:	f8 94       	cli
    24b6:	de bf       	out	0x3e, r29	; 62
    24b8:	0f be       	out	0x3f, r0	; 63
    24ba:	cd bf       	out	0x3d, r28	; 61
    24bc:	6d 87       	std	Y+13, r22	; 0x0d
    24be:	7e 87       	std	Y+14, r23	; 0x0e
    24c0:	8f 87       	std	Y+15, r24	; 0x0f
    24c2:	98 8b       	std	Y+16, r25	; 0x10
	u8 L_u8Digits[10]={0};
    24c4:	8a e0       	ldi	r24, 0x0A	; 10
    24c6:	fe 01       	movw	r30, r28
    24c8:	33 96       	adiw	r30, 0x03	; 3
    24ca:	df 01       	movw	r26, r30
    24cc:	98 2f       	mov	r25, r24
    24ce:	1d 92       	st	X+, r1
    24d0:	9a 95       	dec	r25
    24d2:	e9 f7       	brne	.-6      	; 0x24ce <HLCD_vPrintNumber+0x2a>

	u8 L_u8Counter=0;
    24d4:	1a 82       	std	Y+2, r1	; 0x02
    24d6:	2e c0       	rjmp	.+92     	; 0x2534 <HLCD_vPrintNumber+0x90>
	//TODO zero at the right

	while( A_s32Number > 0)
	{

		L_u8Digits[L_u8Counter] = A_s32Number%10+'0';
    24d8:	8a 81       	ldd	r24, Y+2	; 0x02
    24da:	08 2f       	mov	r16, r24
    24dc:	10 e0       	ldi	r17, 0x00	; 0
    24de:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e2:	af 85       	ldd	r26, Y+15	; 0x0f
    24e4:	b8 89       	ldd	r27, Y+16	; 0x10
    24e6:	2a e0       	ldi	r18, 0x0A	; 10
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	40 e0       	ldi	r20, 0x00	; 0
    24ec:	50 e0       	ldi	r21, 0x00	; 0
    24ee:	bc 01       	movw	r22, r24
    24f0:	cd 01       	movw	r24, r26
    24f2:	0e 94 cb 13 	call	0x2796	; 0x2796 <__divmodsi4>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	28 2f       	mov	r18, r24
    24fc:	20 5d       	subi	r18, 0xD0	; 208
    24fe:	ce 01       	movw	r24, r28
    2500:	03 96       	adiw	r24, 0x03	; 3
    2502:	fc 01       	movw	r30, r24
    2504:	e0 0f       	add	r30, r16
    2506:	f1 1f       	adc	r31, r17
    2508:	20 83       	st	Z, r18
		L_u8Counter++;
    250a:	8a 81       	ldd	r24, Y+2	; 0x02
    250c:	8f 5f       	subi	r24, 0xFF	; 255
    250e:	8a 83       	std	Y+2, r24	; 0x02
		A_s32Number/=10;
    2510:	8d 85       	ldd	r24, Y+13	; 0x0d
    2512:	9e 85       	ldd	r25, Y+14	; 0x0e
    2514:	af 85       	ldd	r26, Y+15	; 0x0f
    2516:	b8 89       	ldd	r27, Y+16	; 0x10
    2518:	2a e0       	ldi	r18, 0x0A	; 10
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	40 e0       	ldi	r20, 0x00	; 0
    251e:	50 e0       	ldi	r21, 0x00	; 0
    2520:	bc 01       	movw	r22, r24
    2522:	cd 01       	movw	r24, r26
    2524:	0e 94 cb 13 	call	0x2796	; 0x2796 <__divmodsi4>
    2528:	da 01       	movw	r26, r20
    252a:	c9 01       	movw	r24, r18
    252c:	8d 87       	std	Y+13, r24	; 0x0d
    252e:	9e 87       	std	Y+14, r25	; 0x0e
    2530:	af 87       	std	Y+15, r26	; 0x0f
    2532:	b8 8b       	std	Y+16, r27	; 0x10
	u8 L_u8Counter=0;

	//TODO negative number
	//TODO zero at the right

	while( A_s32Number > 0)
    2534:	8d 85       	ldd	r24, Y+13	; 0x0d
    2536:	9e 85       	ldd	r25, Y+14	; 0x0e
    2538:	af 85       	ldd	r26, Y+15	; 0x0f
    253a:	b8 89       	ldd	r27, Y+16	; 0x10
    253c:	18 16       	cp	r1, r24
    253e:	19 06       	cpc	r1, r25
    2540:	1a 06       	cpc	r1, r26
    2542:	1b 06       	cpc	r1, r27
    2544:	4c f2       	brlt	.-110    	; 0x24d8 <HLCD_vPrintNumber+0x34>
		L_u8Digits[L_u8Counter] = A_s32Number%10+'0';
		L_u8Counter++;
		A_s32Number/=10;
	}
	/* print array in reverese  */
	for(s8 L_s8PrintIndex=L_u8Counter-1; L_s8PrintIndex >= 0; L_s8PrintIndex-- )
    2546:	8a 81       	ldd	r24, Y+2	; 0x02
    2548:	81 50       	subi	r24, 0x01	; 1
    254a:	89 83       	std	Y+1, r24	; 0x01
    254c:	10 c0       	rjmp	.+32     	; 0x256e <HLCD_vPrintNumber+0xca>
	{
		HLCD_vSendChar(L_u8Digits[L_s8PrintIndex]);
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	28 2f       	mov	r18, r24
    2552:	33 27       	eor	r19, r19
    2554:	27 fd       	sbrc	r18, 7
    2556:	30 95       	com	r19
    2558:	ce 01       	movw	r24, r28
    255a:	03 96       	adiw	r24, 0x03	; 3
    255c:	fc 01       	movw	r30, r24
    255e:	e2 0f       	add	r30, r18
    2560:	f3 1f       	adc	r31, r19
    2562:	80 81       	ld	r24, Z
    2564:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <HLCD_vSendChar>
		L_u8Digits[L_u8Counter] = A_s32Number%10+'0';
		L_u8Counter++;
		A_s32Number/=10;
	}
	/* print array in reverese  */
	for(s8 L_s8PrintIndex=L_u8Counter-1; L_s8PrintIndex >= 0; L_s8PrintIndex-- )
    2568:	89 81       	ldd	r24, Y+1	; 0x01
    256a:	81 50       	subi	r24, 0x01	; 1
    256c:	89 83       	std	Y+1, r24	; 0x01
    256e:	89 81       	ldd	r24, Y+1	; 0x01
    2570:	88 23       	and	r24, r24
    2572:	6c f7       	brge	.-38     	; 0x254e <HLCD_vPrintNumber+0xaa>
	{
		HLCD_vSendChar(L_u8Digits[L_s8PrintIndex]);
	}
}
    2574:	60 96       	adiw	r28, 0x10	; 16
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	f8 94       	cli
    257a:	de bf       	out	0x3e, r29	; 62
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	cd bf       	out	0x3d, r28	; 61
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	1f 91       	pop	r17
    2586:	0f 91       	pop	r16
    2588:	08 95       	ret

0000258a <HLCD_vSetCursorPosition>:

void HLCD_vSetCursorPosition(u8 A_u8LinePos,u8 A_u8LineNo)
{
    258a:	df 93       	push	r29
    258c:	cf 93       	push	r28
    258e:	00 d0       	rcall	.+0      	; 0x2590 <HLCD_vSetCursorPosition+0x6>
    2590:	00 d0       	rcall	.+0      	; 0x2592 <HLCD_vSetCursorPosition+0x8>
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
    2596:	89 83       	std	Y+1, r24	; 0x01
    2598:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8LineNo)
    259a:	8a 81       	ldd	r24, Y+2	; 0x02
    259c:	28 2f       	mov	r18, r24
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	3c 83       	std	Y+4, r19	; 0x04
    25a2:	2b 83       	std	Y+3, r18	; 0x03
    25a4:	8b 81       	ldd	r24, Y+3	; 0x03
    25a6:	9c 81       	ldd	r25, Y+4	; 0x04
    25a8:	00 97       	sbiw	r24, 0x00	; 0
    25aa:	31 f0       	breq	.+12     	; 0x25b8 <HLCD_vSetCursorPosition+0x2e>
    25ac:	2b 81       	ldd	r18, Y+3	; 0x03
    25ae:	3c 81       	ldd	r19, Y+4	; 0x04
    25b0:	21 30       	cpi	r18, 0x01	; 1
    25b2:	31 05       	cpc	r19, r1
    25b4:	31 f0       	breq	.+12     	; 0x25c2 <HLCD_vSetCursorPosition+0x38>
    25b6:	17 c0       	rjmp	.+46     	; 0x25e6 <HLCD_vSetCursorPosition+0x5c>
	{
	case LCD_LINE0:
		HLCD_vSendCommand(0x80+A_u8LinePos+0);
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	80 58       	subi	r24, 0x80	; 128
    25bc:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <HLCD_vSendCommand>
    25c0:	12 c0       	rjmp	.+36     	; 0x25e6 <HLCD_vSetCursorPosition+0x5c>
		break;
	case LCD_LINE1:
		HLCD_vSendCommand(0x80+A_u8LinePos+A_u8LineNo*64);
    25c2:	8a 81       	ldd	r24, Y+2	; 0x02
    25c4:	88 2f       	mov	r24, r24
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	00 24       	eor	r0, r0
    25ca:	96 95       	lsr	r25
    25cc:	87 95       	ror	r24
    25ce:	07 94       	ror	r0
    25d0:	96 95       	lsr	r25
    25d2:	87 95       	ror	r24
    25d4:	07 94       	ror	r0
    25d6:	98 2f       	mov	r25, r24
    25d8:	80 2d       	mov	r24, r0
    25da:	98 2f       	mov	r25, r24
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	89 0f       	add	r24, r25
    25e0:	80 58       	subi	r24, 0x80	; 128
    25e2:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <HLCD_vSendCommand>





}
    25e6:	0f 90       	pop	r0
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	08 95       	ret

000025f4 <HLCD_vSaveCustomChar>:

void HLCD_vSaveCustomChar(u8 A_u8CgramIndex,u8 A_u8CustomCharData[] )
{
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	00 d0       	rcall	.+0      	; 0x25fa <HLCD_vSaveCustomChar+0x6>
    25fa:	00 d0       	rcall	.+0      	; 0x25fc <HLCD_vSaveCustomChar+0x8>
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
    2600:	8a 83       	std	Y+2, r24	; 0x02
    2602:	7c 83       	std	Y+4, r23	; 0x04
    2604:	6b 83       	std	Y+3, r22	; 0x03
// 1  set cgram address

	HLCD_vSendCommand(0b01000000 + (A_u8CgramIndex*8) );
    2606:	8a 81       	ldd	r24, Y+2	; 0x02
    2608:	88 2f       	mov	r24, r24
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	08 96       	adiw	r24, 0x08	; 8
    260e:	88 0f       	add	r24, r24
    2610:	99 1f       	adc	r25, r25
    2612:	88 0f       	add	r24, r24
    2614:	99 1f       	adc	r25, r25
    2616:	88 0f       	add	r24, r24
    2618:	99 1f       	adc	r25, r25
    261a:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <HLCD_vSendCommand>
//2 send custom character data
	for (u8 L_u8Idx=0 ; L_u8Idx<8 ; L_u8Idx++)
    261e:	19 82       	std	Y+1, r1	; 0x01
    2620:	0e c0       	rjmp	.+28     	; 0x263e <HLCD_vSaveCustomChar+0x4a>
	{

		HLCD_vSendChar(A_u8CustomCharData[L_u8Idx]);
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	28 2f       	mov	r18, r24
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	8b 81       	ldd	r24, Y+3	; 0x03
    262a:	9c 81       	ldd	r25, Y+4	; 0x04
    262c:	fc 01       	movw	r30, r24
    262e:	e2 0f       	add	r30, r18
    2630:	f3 1f       	adc	r31, r19
    2632:	80 81       	ld	r24, Z
    2634:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <HLCD_vSendChar>
{
// 1  set cgram address

	HLCD_vSendCommand(0b01000000 + (A_u8CgramIndex*8) );
//2 send custom character data
	for (u8 L_u8Idx=0 ; L_u8Idx<8 ; L_u8Idx++)
    2638:	89 81       	ldd	r24, Y+1	; 0x01
    263a:	8f 5f       	subi	r24, 0xFF	; 255
    263c:	89 83       	std	Y+1, r24	; 0x01
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	88 30       	cpi	r24, 0x08	; 8
    2642:	78 f3       	brcs	.-34     	; 0x2622 <HLCD_vSaveCustomChar+0x2e>
	{

		HLCD_vSendChar(A_u8CustomCharData[L_u8Idx]);
	}
	//3   set ddram address
	HLCD_vSendCommand(0x80);
    2644:	80 e8       	ldi	r24, 0x80	; 128
    2646:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <HLCD_vSendCommand>

}
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	cf 91       	pop	r28
    2654:	df 91       	pop	r29
    2656:	08 95       	ret

00002658 <HLCD_vDisplayCustomChar>:

void HLCD_vDisplayCustomChar(u8 A_u8CgramIndex)
{
    2658:	df 93       	push	r29
    265a:	cf 93       	push	r28
    265c:	0f 92       	push	r0
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
    2662:	89 83       	std	Y+1, r24	; 0x01
	if (A_u8CgramIndex >=0 && A_u8CgramIndex < 8)
    2664:	89 81       	ldd	r24, Y+1	; 0x01
    2666:	88 30       	cpi	r24, 0x08	; 8
    2668:	18 f4       	brcc	.+6      	; 0x2670 <HLCD_vDisplayCustomChar+0x18>
	{

		HLCD_vSendChar(A_u8CgramIndex);
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <HLCD_vSendChar>

	}

}
    2670:	0f 90       	pop	r0
    2672:	cf 91       	pop	r28
    2674:	df 91       	pop	r29
    2676:	08 95       	ret

00002678 <main>:
#include "../MCAL/DIO/DIO_int.h"
#include "../MCAL/WDT/WDT_int.h"

#include <util/delay.h>
int main(void)
{
    2678:	df 93       	push	r29
    267a:	cf 93       	push	r28
    267c:	cd b7       	in	r28, 0x3d	; 61
    267e:	de b7       	in	r29, 0x3e	; 62
    2680:	2e 97       	sbiw	r28, 0x0e	; 14
    2682:	0f b6       	in	r0, 0x3f	; 63
    2684:	f8 94       	cli
    2686:	de bf       	out	0x3e, r29	; 62
    2688:	0f be       	out	0x3f, r0	; 63
    268a:	cd bf       	out	0x3d, r28	; 61
	MDIO_vSetPinDIR(DIO_PORTA,DIO_PIN0,DIO_OUTPUT);
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	60 e0       	ldi	r22, 0x00	; 0
    2690:	41 e0       	ldi	r20, 0x01	; 1
    2692:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <MDIO_vSetPinDIR>


	MWDT_vTurnOn(WDT_1s);
    2696:	86 e0       	ldi	r24, 0x06	; 6
    2698:	0e 94 a3 05 	call	0xb46	; 0xb46 <MWDT_vTurnOn>
	MDIO_vSetPinVal(DIO_PORTA,DIO_PIN0,DIO_HIGH);
    269c:	80 e0       	ldi	r24, 0x00	; 0
    269e:	60 e0       	ldi	r22, 0x00	; 0
    26a0:	41 e0       	ldi	r20, 0x01	; 1
    26a2:	0e 94 d5 09 	call	0x13aa	; 0x13aa <MDIO_vSetPinVal>
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	aa ef       	ldi	r26, 0xFA	; 250
    26ac:	b3 e4       	ldi	r27, 0x43	; 67
    26ae:	8b 87       	std	Y+11, r24	; 0x0b
    26b0:	9c 87       	std	Y+12, r25	; 0x0c
    26b2:	ad 87       	std	Y+13, r26	; 0x0d
    26b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    26bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	4a ef       	ldi	r20, 0xFA	; 250
    26c4:	54 e4       	ldi	r21, 0x44	; 68
    26c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	8f 83       	std	Y+7, r24	; 0x07
    26d0:	98 87       	std	Y+8, r25	; 0x08
    26d2:	a9 87       	std	Y+9, r26	; 0x09
    26d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26d6:	6f 81       	ldd	r22, Y+7	; 0x07
    26d8:	78 85       	ldd	r23, Y+8	; 0x08
    26da:	89 85       	ldd	r24, Y+9	; 0x09
    26dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	40 e8       	ldi	r20, 0x80	; 128
    26e4:	5f e3       	ldi	r21, 0x3F	; 63
    26e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ea:	88 23       	and	r24, r24
    26ec:	2c f4       	brge	.+10     	; 0x26f8 <main+0x80>
		__ticks = 1;
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	9e 83       	std	Y+6, r25	; 0x06
    26f4:	8d 83       	std	Y+5, r24	; 0x05
    26f6:	3f c0       	rjmp	.+126    	; 0x2776 <main+0xfe>
	else if (__tmp > 65535)
    26f8:	6f 81       	ldd	r22, Y+7	; 0x07
    26fa:	78 85       	ldd	r23, Y+8	; 0x08
    26fc:	89 85       	ldd	r24, Y+9	; 0x09
    26fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	3f ef       	ldi	r19, 0xFF	; 255
    2704:	4f e7       	ldi	r20, 0x7F	; 127
    2706:	57 e4       	ldi	r21, 0x47	; 71
    2708:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    270c:	18 16       	cp	r1, r24
    270e:	4c f5       	brge	.+82     	; 0x2762 <main+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2710:	6b 85       	ldd	r22, Y+11	; 0x0b
    2712:	7c 85       	ldd	r23, Y+12	; 0x0c
    2714:	8d 85       	ldd	r24, Y+13	; 0x0d
    2716:	9e 85       	ldd	r25, Y+14	; 0x0e
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	40 e2       	ldi	r20, 0x20	; 32
    271e:	51 e4       	ldi	r21, 0x41	; 65
    2720:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	bc 01       	movw	r22, r24
    272a:	cd 01       	movw	r24, r26
    272c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	9e 83       	std	Y+6, r25	; 0x06
    2736:	8d 83       	std	Y+5, r24	; 0x05
    2738:	0f c0       	rjmp	.+30     	; 0x2758 <main+0xe0>
    273a:	88 ec       	ldi	r24, 0xC8	; 200
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	9c 83       	std	Y+4, r25	; 0x04
    2740:	8b 83       	std	Y+3, r24	; 0x03
    2742:	8b 81       	ldd	r24, Y+3	; 0x03
    2744:	9c 81       	ldd	r25, Y+4	; 0x04
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	f1 f7       	brne	.-4      	; 0x2746 <main+0xce>
    274a:	9c 83       	std	Y+4, r25	; 0x04
    274c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    274e:	8d 81       	ldd	r24, Y+5	; 0x05
    2750:	9e 81       	ldd	r25, Y+6	; 0x06
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	9e 83       	std	Y+6, r25	; 0x06
    2756:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2758:	8d 81       	ldd	r24, Y+5	; 0x05
    275a:	9e 81       	ldd	r25, Y+6	; 0x06
    275c:	00 97       	sbiw	r24, 0x00	; 0
    275e:	69 f7       	brne	.-38     	; 0x273a <main+0xc2>
    2760:	14 c0       	rjmp	.+40     	; 0x278a <main+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2762:	6f 81       	ldd	r22, Y+7	; 0x07
    2764:	78 85       	ldd	r23, Y+8	; 0x08
    2766:	89 85       	ldd	r24, Y+9	; 0x09
    2768:	9a 85       	ldd	r25, Y+10	; 0x0a
    276a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	9e 83       	std	Y+6, r25	; 0x06
    2774:	8d 83       	std	Y+5, r24	; 0x05
    2776:	8d 81       	ldd	r24, Y+5	; 0x05
    2778:	9e 81       	ldd	r25, Y+6	; 0x06
    277a:	9a 83       	std	Y+2, r25	; 0x02
    277c:	89 83       	std	Y+1, r24	; 0x01
    277e:	89 81       	ldd	r24, Y+1	; 0x01
    2780:	9a 81       	ldd	r25, Y+2	; 0x02
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	f1 f7       	brne	.-4      	; 0x2782 <main+0x10a>
    2786:	9a 83       	std	Y+2, r25	; 0x02
    2788:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	MDIO_vSetPinVal(DIO_PORTA,DIO_PIN0,DIO_LOW);
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	60 e0       	ldi	r22, 0x00	; 0
    278e:	40 e0       	ldi	r20, 0x00	; 0
    2790:	0e 94 d5 09 	call	0x13aa	; 0x13aa <MDIO_vSetPinVal>
    2794:	ff cf       	rjmp	.-2      	; 0x2794 <main+0x11c>

00002796 <__divmodsi4>:
    2796:	97 fb       	bst	r25, 7
    2798:	09 2e       	mov	r0, r25
    279a:	05 26       	eor	r0, r21
    279c:	0e d0       	rcall	.+28     	; 0x27ba <__divmodsi4_neg1>
    279e:	57 fd       	sbrc	r21, 7
    27a0:	04 d0       	rcall	.+8      	; 0x27aa <__divmodsi4_neg2>
    27a2:	14 d0       	rcall	.+40     	; 0x27cc <__udivmodsi4>
    27a4:	0a d0       	rcall	.+20     	; 0x27ba <__divmodsi4_neg1>
    27a6:	00 1c       	adc	r0, r0
    27a8:	38 f4       	brcc	.+14     	; 0x27b8 <__divmodsi4_exit>

000027aa <__divmodsi4_neg2>:
    27aa:	50 95       	com	r21
    27ac:	40 95       	com	r20
    27ae:	30 95       	com	r19
    27b0:	21 95       	neg	r18
    27b2:	3f 4f       	sbci	r19, 0xFF	; 255
    27b4:	4f 4f       	sbci	r20, 0xFF	; 255
    27b6:	5f 4f       	sbci	r21, 0xFF	; 255

000027b8 <__divmodsi4_exit>:
    27b8:	08 95       	ret

000027ba <__divmodsi4_neg1>:
    27ba:	f6 f7       	brtc	.-4      	; 0x27b8 <__divmodsi4_exit>
    27bc:	90 95       	com	r25
    27be:	80 95       	com	r24
    27c0:	70 95       	com	r23
    27c2:	61 95       	neg	r22
    27c4:	7f 4f       	sbci	r23, 0xFF	; 255
    27c6:	8f 4f       	sbci	r24, 0xFF	; 255
    27c8:	9f 4f       	sbci	r25, 0xFF	; 255
    27ca:	08 95       	ret

000027cc <__udivmodsi4>:
    27cc:	a1 e2       	ldi	r26, 0x21	; 33
    27ce:	1a 2e       	mov	r1, r26
    27d0:	aa 1b       	sub	r26, r26
    27d2:	bb 1b       	sub	r27, r27
    27d4:	fd 01       	movw	r30, r26
    27d6:	0d c0       	rjmp	.+26     	; 0x27f2 <__udivmodsi4_ep>

000027d8 <__udivmodsi4_loop>:
    27d8:	aa 1f       	adc	r26, r26
    27da:	bb 1f       	adc	r27, r27
    27dc:	ee 1f       	adc	r30, r30
    27de:	ff 1f       	adc	r31, r31
    27e0:	a2 17       	cp	r26, r18
    27e2:	b3 07       	cpc	r27, r19
    27e4:	e4 07       	cpc	r30, r20
    27e6:	f5 07       	cpc	r31, r21
    27e8:	20 f0       	brcs	.+8      	; 0x27f2 <__udivmodsi4_ep>
    27ea:	a2 1b       	sub	r26, r18
    27ec:	b3 0b       	sbc	r27, r19
    27ee:	e4 0b       	sbc	r30, r20
    27f0:	f5 0b       	sbc	r31, r21

000027f2 <__udivmodsi4_ep>:
    27f2:	66 1f       	adc	r22, r22
    27f4:	77 1f       	adc	r23, r23
    27f6:	88 1f       	adc	r24, r24
    27f8:	99 1f       	adc	r25, r25
    27fa:	1a 94       	dec	r1
    27fc:	69 f7       	brne	.-38     	; 0x27d8 <__udivmodsi4_loop>
    27fe:	60 95       	com	r22
    2800:	70 95       	com	r23
    2802:	80 95       	com	r24
    2804:	90 95       	com	r25
    2806:	9b 01       	movw	r18, r22
    2808:	ac 01       	movw	r20, r24
    280a:	bd 01       	movw	r22, r26
    280c:	cf 01       	movw	r24, r30
    280e:	08 95       	ret

00002810 <__prologue_saves__>:
    2810:	2f 92       	push	r2
    2812:	3f 92       	push	r3
    2814:	4f 92       	push	r4
    2816:	5f 92       	push	r5
    2818:	6f 92       	push	r6
    281a:	7f 92       	push	r7
    281c:	8f 92       	push	r8
    281e:	9f 92       	push	r9
    2820:	af 92       	push	r10
    2822:	bf 92       	push	r11
    2824:	cf 92       	push	r12
    2826:	df 92       	push	r13
    2828:	ef 92       	push	r14
    282a:	ff 92       	push	r15
    282c:	0f 93       	push	r16
    282e:	1f 93       	push	r17
    2830:	cf 93       	push	r28
    2832:	df 93       	push	r29
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62
    2838:	ca 1b       	sub	r28, r26
    283a:	db 0b       	sbc	r29, r27
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	f8 94       	cli
    2840:	de bf       	out	0x3e, r29	; 62
    2842:	0f be       	out	0x3f, r0	; 63
    2844:	cd bf       	out	0x3d, r28	; 61
    2846:	09 94       	ijmp

00002848 <__epilogue_restores__>:
    2848:	2a 88       	ldd	r2, Y+18	; 0x12
    284a:	39 88       	ldd	r3, Y+17	; 0x11
    284c:	48 88       	ldd	r4, Y+16	; 0x10
    284e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2850:	6e 84       	ldd	r6, Y+14	; 0x0e
    2852:	7d 84       	ldd	r7, Y+13	; 0x0d
    2854:	8c 84       	ldd	r8, Y+12	; 0x0c
    2856:	9b 84       	ldd	r9, Y+11	; 0x0b
    2858:	aa 84       	ldd	r10, Y+10	; 0x0a
    285a:	b9 84       	ldd	r11, Y+9	; 0x09
    285c:	c8 84       	ldd	r12, Y+8	; 0x08
    285e:	df 80       	ldd	r13, Y+7	; 0x07
    2860:	ee 80       	ldd	r14, Y+6	; 0x06
    2862:	fd 80       	ldd	r15, Y+5	; 0x05
    2864:	0c 81       	ldd	r16, Y+4	; 0x04
    2866:	1b 81       	ldd	r17, Y+3	; 0x03
    2868:	aa 81       	ldd	r26, Y+2	; 0x02
    286a:	b9 81       	ldd	r27, Y+1	; 0x01
    286c:	ce 0f       	add	r28, r30
    286e:	d1 1d       	adc	r29, r1
    2870:	0f b6       	in	r0, 0x3f	; 63
    2872:	f8 94       	cli
    2874:	de bf       	out	0x3e, r29	; 62
    2876:	0f be       	out	0x3f, r0	; 63
    2878:	cd bf       	out	0x3d, r28	; 61
    287a:	ed 01       	movw	r28, r26
    287c:	08 95       	ret

0000287e <_exit>:
    287e:	f8 94       	cli

00002880 <__stop_program>:
    2880:	ff cf       	rjmp	.-2      	; 0x2880 <__stop_program>
