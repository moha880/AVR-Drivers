
WatchDogTimer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002810  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00002810  000028a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  0080006a  0080006a  000028ae  2**0
                  ALLOC
  3 .stab         00002940  00000000  00000000  000028b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001495  00000000  00000000  000051f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006685  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000067c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006935  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000857e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009469  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a218  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a378  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a605  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000add3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__vector_10>
      2c:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 01 0d 	jmp	0x1a02	; 0x1a02 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 03 13 	call	0x2606	; 0x2606 <main>
      8a:	0c 94 06 14 	jmp	0x280c	; 0x280c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 eb 13 	jmp	0x27d6	; 0x27d6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 eb 13 	jmp	0x27d6	; 0x27d6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 df 13 	jmp	0x27be	; 0x27be <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MWDT_vTurnOn>:
#include"WDT_int.h"
#include"WDT_prv.h"
#include"WDT_cfg.h"


void MWDT_vTurnOn(u8 A_u8Timeout){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01

	/* set timeout */

	WDTCR = (WDTCR& 0XF8) | A_u8Timeout;
     b52:	a1 e4       	ldi	r26, 0x41	; 65
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	e1 e4       	ldi	r30, 0x41	; 65
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	98 2f       	mov	r25, r24
     b5e:	98 7f       	andi	r25, 0xF8	; 248
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	89 2b       	or	r24, r25
     b64:	8c 93       	st	X, r24
	/* set WDE */

	SET_BIT(WDTCR,WDE);
     b66:	a1 e4       	ldi	r26, 0x41	; 65
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	e1 e4       	ldi	r30, 0x41	; 65
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	88 60       	ori	r24, 0x08	; 8
     b72:	8c 93       	st	X, r24



}
     b74:	0f 90       	pop	r0
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	08 95       	ret

00000b7c <MWDT_vTurnOff>:
void MWDT_vTurnOff(void){
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62

	WDTCR = 0b0011000;
     b84:	e1 e4       	ldi	r30, 0x41	; 65
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	88 e1       	ldi	r24, 0x18	; 24
     b8a:	80 83       	st	Z, r24
	WDTCR = 0;
     b8c:	e1 e4       	ldi	r30, 0x41	; 65
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	10 82       	st	Z, r1

}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <MTIMERS_vInit>:
//static void (*G_TIM0_Callback[2])(void);

u32  G_u32IntervalCount;

void MTIMERS_vInit(void)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62

#endif



    TCCR0 = 0b01101010;
     ba0:	e3 e5       	ldi	r30, 0x53	; 83
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	8a e6       	ldi	r24, 0x6A	; 106
     ba6:	80 83       	st	Z, r24
//	SET_BIT(TIMSK, 0) ; //TOIE0
//	SET_BIT(TIMSK, 1) ; //OCIE0
  	TCCR1A= 0b10000000 ;
     ba8:	ef e4       	ldi	r30, 0x4F	; 79
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 e8       	ldi	r24, 0x80	; 128
     bae:	80 83       	st	Z, r24
  	TCCR1B= 0b01000010 ;
     bb0:	ee e4       	ldi	r30, 0x4E	; 78
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	82 e4       	ldi	r24, 0x42	; 66
     bb6:	80 83       	st	Z, r24
// 	ICR1  = 625;  //	20ms

}
     bb8:	cf 91       	pop	r28
     bba:	df 91       	pop	r29
     bbc:	08 95       	ret

00000bbe <MTIMERS_vSetPreloadValue>:

void MTIMERS_vSetPreloadValue(u8 A_u8TimerId , u16 A_u16Preload)
{
     bbe:	df 93       	push	r29
     bc0:	cf 93       	push	r28
     bc2:	00 d0       	rcall	.+0      	; 0xbc4 <MTIMERS_vSetPreloadValue+0x6>
     bc4:	0f 92       	push	r0
     bc6:	cd b7       	in	r28, 0x3d	; 61
     bc8:	de b7       	in	r29, 0x3e	; 62
     bca:	89 83       	std	Y+1, r24	; 0x01
     bcc:	7b 83       	std	Y+3, r23	; 0x03
     bce:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8TimerId)
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	88 2f       	mov	r24, r24
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	00 97       	sbiw	r24, 0x00	; 0
     bd8:	21 f4       	brne	.+8      	; 0xbe2 <MTIMERS_vSetPreloadValue+0x24>
	{
	case TIMER0:
		TCNT0 = A_u16Preload ;
     bda:	e2 e5       	ldi	r30, 0x52	; 82
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	8a 81       	ldd	r24, Y+2	; 0x02
     be0:	80 83       	st	Z, r24
		break;
	}
}
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	0f 90       	pop	r0
     be8:	cf 91       	pop	r28
     bea:	df 91       	pop	r29
     bec:	08 95       	ret

00000bee <MTIMERS_vSetCompareValue>:
void MTIMERS_vSetCompareValue(u8 A_u8TimerId ,u16 A_u16CompareValue)
{
     bee:	df 93       	push	r29
     bf0:	cf 93       	push	r28
     bf2:	00 d0       	rcall	.+0      	; 0xbf4 <MTIMERS_vSetCompareValue+0x6>
     bf4:	00 d0       	rcall	.+0      	; 0xbf6 <MTIMERS_vSetCompareValue+0x8>
     bf6:	0f 92       	push	r0
     bf8:	cd b7       	in	r28, 0x3d	; 61
     bfa:	de b7       	in	r29, 0x3e	; 62
     bfc:	89 83       	std	Y+1, r24	; 0x01
     bfe:	7b 83       	std	Y+3, r23	; 0x03
     c00:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8TimerId)
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	3d 83       	std	Y+5, r19	; 0x05
     c0a:	2c 83       	std	Y+4, r18	; 0x04
     c0c:	8c 81       	ldd	r24, Y+4	; 0x04
     c0e:	9d 81       	ldd	r25, Y+5	; 0x05
     c10:	00 97       	sbiw	r24, 0x00	; 0
     c12:	31 f0       	breq	.+12     	; 0xc20 <MTIMERS_vSetCompareValue+0x32>
     c14:	2c 81       	ldd	r18, Y+4	; 0x04
     c16:	3d 81       	ldd	r19, Y+5	; 0x05
     c18:	21 30       	cpi	r18, 0x01	; 1
     c1a:	31 05       	cpc	r19, r1
     c1c:	31 f0       	breq	.+12     	; 0xc2a <MTIMERS_vSetCompareValue+0x3c>
     c1e:	0b c0       	rjmp	.+22     	; 0xc36 <MTIMERS_vSetCompareValue+0x48>
	{
	case TIMER0:
		OCR0 = A_u16CompareValue ;
     c20:	ec e5       	ldi	r30, 0x5C	; 92
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	8a 81       	ldd	r24, Y+2	; 0x02
     c26:	80 83       	st	Z, r24
     c28:	06 c0       	rjmp	.+12     	; 0xc36 <MTIMERS_vSetCompareValue+0x48>
		break;
	case TIMER_1A:
		OCR1A = A_u16CompareValue ;
     c2a:	ea e4       	ldi	r30, 0x4A	; 74
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	8a 81       	ldd	r24, Y+2	; 0x02
     c30:	9b 81       	ldd	r25, Y+3	; 0x03
     c32:	91 83       	std	Z+1, r25	; 0x01
     c34:	80 83       	st	Z, r24
		break;
	}
}
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	cf 91       	pop	r28
     c42:	df 91       	pop	r29
     c44:	08 95       	ret

00000c46 <MTIMERS_vSetInterval_Asynch>:
void MTIMERS_vSetInterval_Asynch(u16 A_u16IntervalCounts, void (*A_fptr)(void))
{
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	00 d0       	rcall	.+0      	; 0xc4c <MTIMERS_vSetInterval_Asynch+0x6>
     c4c:	00 d0       	rcall	.+0      	; 0xc4e <MTIMERS_vSetInterval_Asynch+0x8>
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
     c52:	9a 83       	std	Y+2, r25	; 0x02
     c54:	89 83       	std	Y+1, r24	; 0x01
     c56:	7c 83       	std	Y+4, r23	; 0x04
     c58:	6b 83       	std	Y+3, r22	; 0x03
	G_u32IntervalCount = A_u16IntervalCounts ;
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	cc 01       	movw	r24, r24
     c60:	a0 e0       	ldi	r26, 0x00	; 0
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	80 93 78 00 	sts	0x0078, r24
     c68:	90 93 79 00 	sts	0x0079, r25
     c6c:	a0 93 7a 00 	sts	0x007A, r26
     c70:	b0 93 7b 00 	sts	0x007B, r27
	G_TIM0_OVF_Callback = A_fptr ;
     c74:	8b 81       	ldd	r24, Y+3	; 0x03
     c76:	9c 81       	ldd	r25, Y+4	; 0x04
     c78:	90 93 73 00 	sts	0x0073, r25
     c7c:	80 93 72 00 	sts	0x0072, r24
//	G_TIM0_Callback[TIM_CB_OVF] = A_fptr ;

	/*  start timer */
	MTIMERS_vStartTimer();
     c80:	0e 94 74 06 	call	0xce8	; 0xce8 <MTIMERS_vStartTimer>

}
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	cf 91       	pop	r28
     c8e:	df 91       	pop	r29
     c90:	08 95       	ret

00000c92 <MTIMERS_vSetInterval_CTC_Asynch>:

void MTIMERS_vSetInterval_CTC_Asynch(u16 A_u16IntervalCounts,
									u16 A_u16CompareValue,
									void (*A_fptr)(void))
{
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	00 d0       	rcall	.+0      	; 0xc98 <MTIMERS_vSetInterval_CTC_Asynch+0x6>
     c98:	00 d0       	rcall	.+0      	; 0xc9a <MTIMERS_vSetInterval_CTC_Asynch+0x8>
     c9a:	00 d0       	rcall	.+0      	; 0xc9c <MTIMERS_vSetInterval_CTC_Asynch+0xa>
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	9a 83       	std	Y+2, r25	; 0x02
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	7c 83       	std	Y+4, r23	; 0x04
     ca6:	6b 83       	std	Y+3, r22	; 0x03
     ca8:	5e 83       	std	Y+6, r21	; 0x06
     caa:	4d 83       	std	Y+5, r20	; 0x05
	G_u32IntervalCount = A_u16IntervalCounts ;
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	9a 81       	ldd	r25, Y+2	; 0x02
     cb0:	cc 01       	movw	r24, r24
     cb2:	a0 e0       	ldi	r26, 0x00	; 0
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	80 93 78 00 	sts	0x0078, r24
     cba:	90 93 79 00 	sts	0x0079, r25
     cbe:	a0 93 7a 00 	sts	0x007A, r26
     cc2:	b0 93 7b 00 	sts	0x007B, r27
	G_TIM0_CTC_Callback = A_fptr ;
     cc6:	8d 81       	ldd	r24, Y+5	; 0x05
     cc8:	9e 81       	ldd	r25, Y+6	; 0x06
     cca:	90 93 75 00 	sts	0x0075, r25
     cce:	80 93 74 00 	sts	0x0074, r24
//	G_TIM0_Callback[TIM_CB_CTC] = AfPtr;

//	MTIMERS_vSetCompareValue(A_u16CompareValue);
	/*  start timer */
	MTIMERS_vStartTimer();
     cd2:	0e 94 74 06 	call	0xce8	; 0xce8 <MTIMERS_vStartTimer>

}
     cd6:	26 96       	adiw	r28, 0x06	; 6
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	f8 94       	cli
     cdc:	de bf       	out	0x3e, r29	; 62
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	cd bf       	out	0x3d, r28	; 61
     ce2:	cf 91       	pop	r28
     ce4:	df 91       	pop	r29
     ce6:	08 95       	ret

00000ce8 <MTIMERS_vStartTimer>:

void MTIMERS_vStartTimer(/* Timer ID ?*/)
{
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (TCCR0 & 0xF8) | (TIMER0_PRESCALER) ;
     cf0:	a3 e5       	ldi	r26, 0x53	; 83
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e3 e5       	ldi	r30, 0x53	; 83
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	88 7f       	andi	r24, 0xF8	; 248
     cfc:	82 60       	ori	r24, 0x02	; 2
     cfe:	8c 93       	st	X, r24
}
     d00:	cf 91       	pop	r28
     d02:	df 91       	pop	r29
     d04:	08 95       	ret

00000d06 <MTIMERS_vStopTimer>:

void MTIMERS_vStopTimer(/* Timer ID ?*/)
{
     d06:	df 93       	push	r29
     d08:	cf 93       	push	r28
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (TCCR0 & 0xF8) | (0b000) ;
     d0e:	a3 e5       	ldi	r26, 0x53	; 83
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e3 e5       	ldi	r30, 0x53	; 83
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	88 7f       	andi	r24, 0xF8	; 248
     d1a:	8c 93       	st	X, r24
}
     d1c:	cf 91       	pop	r28
     d1e:	df 91       	pop	r29
     d20:	08 95       	ret

00000d22 <MTIMERS_u16GetElapsedTime>:




u16 MTIMERS_u16GetElapsedTime(u8 A_u8TimerId)
{
     d22:	df 93       	push	r29
     d24:	cf 93       	push	r28
     d26:	00 d0       	rcall	.+0      	; 0xd28 <MTIMERS_u16GetElapsedTime+0x6>
     d28:	00 d0       	rcall	.+0      	; 0xd2a <MTIMERS_u16GetElapsedTime+0x8>
     d2a:	0f 92       	push	r0
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	8b 83       	std	Y+3, r24	; 0x03

	u16 L_u16ElapsedTime =0 ;
     d32:	1a 82       	std	Y+2, r1	; 0x02
     d34:	19 82       	std	Y+1, r1	; 0x01
	switch(A_u8TimerId)
     d36:	8b 81       	ldd	r24, Y+3	; 0x03
     d38:	28 2f       	mov	r18, r24
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	3d 83       	std	Y+5, r19	; 0x05
     d3e:	2c 83       	std	Y+4, r18	; 0x04
     d40:	8c 81       	ldd	r24, Y+4	; 0x04
     d42:	9d 81       	ldd	r25, Y+5	; 0x05
     d44:	00 97       	sbiw	r24, 0x00	; 0
     d46:	31 f0       	breq	.+12     	; 0xd54 <MTIMERS_u16GetElapsedTime+0x32>
     d48:	2c 81       	ldd	r18, Y+4	; 0x04
     d4a:	3d 81       	ldd	r19, Y+5	; 0x05
     d4c:	22 30       	cpi	r18, 0x02	; 2
     d4e:	31 05       	cpc	r19, r1
     d50:	49 f0       	breq	.+18     	; 0xd64 <MTIMERS_u16GetElapsedTime+0x42>
     d52:	0e c0       	rjmp	.+28     	; 0xd70 <MTIMERS_u16GetElapsedTime+0x4e>
	{
	case TIMER0:
		L_u16ElapsedTime =TCNT0;
     d54:	e2 e5       	ldi	r30, 0x52	; 82
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	88 2f       	mov	r24, r24
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	9a 83       	std	Y+2, r25	; 0x02
     d60:	89 83       	std	Y+1, r24	; 0x01
     d62:	06 c0       	rjmp	.+12     	; 0xd70 <MTIMERS_u16GetElapsedTime+0x4e>
		break;
	case TIMER1:
		L_u16ElapsedTime =TCNT1;
     d64:	ec e4       	ldi	r30, 0x4C	; 76
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	91 81       	ldd	r25, Z+1	; 0x01
     d6c:	9a 83       	std	Y+2, r25	; 0x02
     d6e:	89 83       	std	Y+1, r24	; 0x01
		break;

	}

	return L_u16ElapsedTime;
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	9a 81       	ldd	r25, Y+2	; 0x02

}
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	08 95       	ret

00000d84 <MTIMERS_u16GetCapturedTme>:

u16 MTIMERS_u16GetCapturedTme(void){
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
     d8c:	e6 e4       	ldi	r30, 0x46	; 70
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	91 81       	ldd	r25, Z+1	; 0x01

}
     d94:	cf 91       	pop	r28
     d96:	df 91       	pop	r29
     d98:	08 95       	ret

00000d9a <MTIMERS_vSetIcuTrigger>:


void MTIMERS_vSetIcuTrigger(ICU_Trigger_t A_xIcuTrigger){
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <MTIMERS_vSetIcuTrigger+0x6>
     da0:	0f 92       	push	r0
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	89 83       	std	Y+1, r24	; 0x01

	switch(A_xIcuTrigger){
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	3b 83       	std	Y+3, r19	; 0x03
     db0:	2a 83       	std	Y+2, r18	; 0x02
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	9b 81       	ldd	r25, Y+3	; 0x03
     db6:	00 97       	sbiw	r24, 0x00	; 0
     db8:	31 f0       	breq	.+12     	; 0xdc6 <MTIMERS_vSetIcuTrigger+0x2c>
     dba:	2a 81       	ldd	r18, Y+2	; 0x02
     dbc:	3b 81       	ldd	r19, Y+3	; 0x03
     dbe:	21 30       	cpi	r18, 0x01	; 1
     dc0:	31 05       	cpc	r19, r1
     dc2:	49 f0       	breq	.+18     	; 0xdd6 <MTIMERS_vSetIcuTrigger+0x3c>
     dc4:	0f c0       	rjmp	.+30     	; 0xde4 <MTIMERS_vSetIcuTrigger+0x4a>
	case ICU_Falling:
		CLR_BIT(TCCR1B,6); //ICES
     dc6:	ae e4       	ldi	r26, 0x4E	; 78
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	ee e4       	ldi	r30, 0x4E	; 78
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	8f 7b       	andi	r24, 0xBF	; 191
     dd2:	8c 93       	st	X, r24
     dd4:	07 c0       	rjmp	.+14     	; 0xde4 <MTIMERS_vSetIcuTrigger+0x4a>
		break;
	case ICU_Rising:
		SET_BIT(TCCR1B,6);
     dd6:	ae e4       	ldi	r26, 0x4E	; 78
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	ee e4       	ldi	r30, 0x4E	; 78
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	80 64       	ori	r24, 0x40	; 64
     de2:	8c 93       	st	X, r24
		break;

	}

}
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <MTIMERS_vEnableInterrupt>:
void MTIMERS_vEnableInterrupt()/* Timer ID ?*/ //u8 A_u8InterruptType){
{
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,5);
     df8:	a9 e5       	ldi	r26, 0x59	; 89
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e9 e5       	ldi	r30, 0x59	; 89
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	80 62       	ori	r24, 0x20	; 32
     e04:	8c 93       	st	X, r24
}
     e06:	cf 91       	pop	r28
     e08:	df 91       	pop	r29
     e0a:	08 95       	ret

00000e0c <MTIMERS_vDisableInterrupt>:
void MTIMERS_vDisableInterrupt(/* Timer ID ?*/ u8 A_u8InterruptType){
     e0c:	df 93       	push	r29
     e0e:	cf 93       	push	r28
     e10:	0f 92       	push	r0
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
     e16:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(TIMSK,5);
     e18:	a9 e5       	ldi	r26, 0x59	; 89
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e9 e5       	ldi	r30, 0x59	; 89
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	8f 7d       	andi	r24, 0xDF	; 223
     e24:	8c 93       	st	X, r24

}
     e26:	0f 90       	pop	r0
     e28:	cf 91       	pop	r28
     e2a:	df 91       	pop	r29
     e2c:	08 95       	ret

00000e2e <MTIMERS_vSetCallback>:
void MTIMERS_vSetCallback( /* Timer ID ?*/ void (*A_xfptr)(void))
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <MTIMERS_vSetCallback+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
	GS_TIM1_ICU_Callback=A_xfptr;
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	90 93 77 00 	sts	0x0077, r25
     e44:	80 93 76 00 	sts	0x0076, r24
}
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <__vector_11>:


/* Timer 0 Overflow ISR */
void __vector_11(void)  __attribute__((signal));
void __vector_11(void)
{
     e52:	1f 92       	push	r1
     e54:	0f 92       	push	r0
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	0f 92       	push	r0
     e5a:	11 24       	eor	r1, r1
     e5c:	2f 93       	push	r18
     e5e:	3f 93       	push	r19
     e60:	4f 93       	push	r20
     e62:	5f 93       	push	r21
     e64:	6f 93       	push	r22
     e66:	7f 93       	push	r23
     e68:	8f 93       	push	r24
     e6a:	9f 93       	push	r25
     e6c:	af 93       	push	r26
     e6e:	bf 93       	push	r27
     e70:	ef 93       	push	r30
     e72:	ff 93       	push	r31
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
	static u32 LS_u32Counter = 0;

	LS_u32Counter++ ;
     e7c:	80 91 6a 00 	lds	r24, 0x006A
     e80:	90 91 6b 00 	lds	r25, 0x006B
     e84:	a0 91 6c 00 	lds	r26, 0x006C
     e88:	b0 91 6d 00 	lds	r27, 0x006D
     e8c:	01 96       	adiw	r24, 0x01	; 1
     e8e:	a1 1d       	adc	r26, r1
     e90:	b1 1d       	adc	r27, r1
     e92:	80 93 6a 00 	sts	0x006A, r24
     e96:	90 93 6b 00 	sts	0x006B, r25
     e9a:	a0 93 6c 00 	sts	0x006C, r26
     e9e:	b0 93 6d 00 	sts	0x006D, r27

	if(LS_u32Counter == G_u32IntervalCount)
     ea2:	20 91 6a 00 	lds	r18, 0x006A
     ea6:	30 91 6b 00 	lds	r19, 0x006B
     eaa:	40 91 6c 00 	lds	r20, 0x006C
     eae:	50 91 6d 00 	lds	r21, 0x006D
     eb2:	80 91 78 00 	lds	r24, 0x0078
     eb6:	90 91 79 00 	lds	r25, 0x0079
     eba:	a0 91 7a 00 	lds	r26, 0x007A
     ebe:	b0 91 7b 00 	lds	r27, 0x007B
     ec2:	28 17       	cp	r18, r24
     ec4:	39 07       	cpc	r19, r25
     ec6:	4a 07       	cpc	r20, r26
     ec8:	5b 07       	cpc	r21, r27
     eca:	99 f4       	brne	.+38     	; 0xef2 <__vector_11+0xa0>
	{
		if(G_TIM0_OVF_Callback != NULL)
     ecc:	80 91 72 00 	lds	r24, 0x0072
     ed0:	90 91 73 00 	lds	r25, 0x0073
     ed4:	00 97       	sbiw	r24, 0x00	; 0
     ed6:	69 f0       	breq	.+26     	; 0xef2 <__vector_11+0xa0>
		{
			G_TIM0_OVF_Callback();
     ed8:	e0 91 72 00 	lds	r30, 0x0072
     edc:	f0 91 73 00 	lds	r31, 0x0073
     ee0:	09 95       	icall
			LS_u32Counter = 0;
     ee2:	10 92 6a 00 	sts	0x006A, r1
     ee6:	10 92 6b 00 	sts	0x006B, r1
     eea:	10 92 6c 00 	sts	0x006C, r1
     eee:	10 92 6d 00 	sts	0x006D, r1
		}
	}
}
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	ff 91       	pop	r31
     ef8:	ef 91       	pop	r30
     efa:	bf 91       	pop	r27
     efc:	af 91       	pop	r26
     efe:	9f 91       	pop	r25
     f00:	8f 91       	pop	r24
     f02:	7f 91       	pop	r23
     f04:	6f 91       	pop	r22
     f06:	5f 91       	pop	r21
     f08:	4f 91       	pop	r20
     f0a:	3f 91       	pop	r19
     f0c:	2f 91       	pop	r18
     f0e:	0f 90       	pop	r0
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	0f 90       	pop	r0
     f14:	1f 90       	pop	r1
     f16:	18 95       	reti

00000f18 <__vector_10>:

/* Timer 0 CTC ISR */
void __vector_10(void) __attribute__((signal))  ;
void __vector_10(void)
{
     f18:	1f 92       	push	r1
     f1a:	0f 92       	push	r0
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	0f 92       	push	r0
     f20:	11 24       	eor	r1, r1
     f22:	2f 93       	push	r18
     f24:	3f 93       	push	r19
     f26:	4f 93       	push	r20
     f28:	5f 93       	push	r21
     f2a:	6f 93       	push	r22
     f2c:	7f 93       	push	r23
     f2e:	8f 93       	push	r24
     f30:	9f 93       	push	r25
     f32:	af 93       	push	r26
     f34:	bf 93       	push	r27
     f36:	ef 93       	push	r30
     f38:	ff 93       	push	r31
     f3a:	df 93       	push	r29
     f3c:	cf 93       	push	r28
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
	static u32 LS_u32Counter = 0;

	LS_u32Counter++ ;
     f42:	80 91 6e 00 	lds	r24, 0x006E
     f46:	90 91 6f 00 	lds	r25, 0x006F
     f4a:	a0 91 70 00 	lds	r26, 0x0070
     f4e:	b0 91 71 00 	lds	r27, 0x0071
     f52:	01 96       	adiw	r24, 0x01	; 1
     f54:	a1 1d       	adc	r26, r1
     f56:	b1 1d       	adc	r27, r1
     f58:	80 93 6e 00 	sts	0x006E, r24
     f5c:	90 93 6f 00 	sts	0x006F, r25
     f60:	a0 93 70 00 	sts	0x0070, r26
     f64:	b0 93 71 00 	sts	0x0071, r27

	if(LS_u32Counter == G_u32IntervalCount)
     f68:	20 91 6e 00 	lds	r18, 0x006E
     f6c:	30 91 6f 00 	lds	r19, 0x006F
     f70:	40 91 70 00 	lds	r20, 0x0070
     f74:	50 91 71 00 	lds	r21, 0x0071
     f78:	80 91 78 00 	lds	r24, 0x0078
     f7c:	90 91 79 00 	lds	r25, 0x0079
     f80:	a0 91 7a 00 	lds	r26, 0x007A
     f84:	b0 91 7b 00 	lds	r27, 0x007B
     f88:	28 17       	cp	r18, r24
     f8a:	39 07       	cpc	r19, r25
     f8c:	4a 07       	cpc	r20, r26
     f8e:	5b 07       	cpc	r21, r27
     f90:	99 f4       	brne	.+38     	; 0xfb8 <__vector_10+0xa0>
	{
		if(G_TIM0_CTC_Callback != NULL)
     f92:	80 91 74 00 	lds	r24, 0x0074
     f96:	90 91 75 00 	lds	r25, 0x0075
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	69 f0       	breq	.+26     	; 0xfb8 <__vector_10+0xa0>
		{
			G_TIM0_CTC_Callback();
     f9e:	e0 91 74 00 	lds	r30, 0x0074
     fa2:	f0 91 75 00 	lds	r31, 0x0075
     fa6:	09 95       	icall
			LS_u32Counter = 0;
     fa8:	10 92 6e 00 	sts	0x006E, r1
     fac:	10 92 6f 00 	sts	0x006F, r1
     fb0:	10 92 70 00 	sts	0x0070, r1
     fb4:	10 92 71 00 	sts	0x0071, r1
		}
	}
}
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	ff 91       	pop	r31
     fbe:	ef 91       	pop	r30
     fc0:	bf 91       	pop	r27
     fc2:	af 91       	pop	r26
     fc4:	9f 91       	pop	r25
     fc6:	8f 91       	pop	r24
     fc8:	7f 91       	pop	r23
     fca:	6f 91       	pop	r22
     fcc:	5f 91       	pop	r21
     fce:	4f 91       	pop	r20
     fd0:	3f 91       	pop	r19
     fd2:	2f 91       	pop	r18
     fd4:	0f 90       	pop	r0
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	0f 90       	pop	r0
     fda:	1f 90       	pop	r1
     fdc:	18 95       	reti

00000fde <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
     fde:	1f 92       	push	r1
     fe0:	0f 92       	push	r0
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	0f 92       	push	r0
     fe6:	11 24       	eor	r1, r1
     fe8:	2f 93       	push	r18
     fea:	3f 93       	push	r19
     fec:	4f 93       	push	r20
     fee:	5f 93       	push	r21
     ff0:	6f 93       	push	r22
     ff2:	7f 93       	push	r23
     ff4:	8f 93       	push	r24
     ff6:	9f 93       	push	r25
     ff8:	af 93       	push	r26
     ffa:	bf 93       	push	r27
     ffc:	ef 93       	push	r30
     ffe:	ff 93       	push	r31
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
	GS_TIM1_ICU_Callback();
    1008:	e0 91 76 00 	lds	r30, 0x0076
    100c:	f0 91 77 00 	lds	r31, 0x0077
    1010:	09 95       	icall
}
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	ff 91       	pop	r31
    1018:	ef 91       	pop	r30
    101a:	bf 91       	pop	r27
    101c:	af 91       	pop	r26
    101e:	9f 91       	pop	r25
    1020:	8f 91       	pop	r24
    1022:	7f 91       	pop	r23
    1024:	6f 91       	pop	r22
    1026:	5f 91       	pop	r21
    1028:	4f 91       	pop	r20
    102a:	3f 91       	pop	r19
    102c:	2f 91       	pop	r18
    102e:	0f 90       	pop	r0
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	0f 90       	pop	r0
    1034:	1f 90       	pop	r1
    1036:	18 95       	reti

00001038 <MGIE_vEnableGlobalInterrupt>:

#include"GIE_int.h"



void MGIE_vEnableGlobalInterrupt(void){
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(SREG,7);
    1040:	af e5       	ldi	r26, 0x5F	; 95
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	ef e5       	ldi	r30, 0x5F	; 95
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	80 68       	ori	r24, 0x80	; 128
    104c:	8c 93       	st	X, r24

}
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	08 95       	ret

00001054 <MGIE_vDisableGlobalInterrupt>:
void MGIE_vDisableGlobalInterrupt(void){
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    105c:	af e5       	ldi	r26, 0x5F	; 95
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	ef e5       	ldi	r30, 0x5F	; 95
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	8f 77       	andi	r24, 0x7F	; 127
    1068:	8c 93       	st	X, r24


}
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <MEXTI_vInit>:

#include "EXTI_int.h"
#include "EXTI_cfg.h"

void MEXTI_vInit(void)
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62

#if EXTI_LINE0==ENABLE
	/* 1- Sense control    */
#if EXTI_LIN0_SENSE_CTRL==EXTI_FALLING
	/* Falling Edge for INT0 */
	SET_BIT(MCUCR, 3);
    1078:	a5 e5       	ldi	r26, 0x55	; 85
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e5 e5       	ldi	r30, 0x55	; 85
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	88 60       	ori	r24, 0x08	; 8
    1084:	8c 93       	st	X, r24
	CLR_BIT(MCUCR, 2);
    1086:	a5 e5       	ldi	r26, 0x55	; 85
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e5 e5       	ldi	r30, 0x55	; 85
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	8b 7f       	andi	r24, 0xFB	; 251
    1092:	8c 93       	st	X, r24
	SET_BIT(MCUCR, 2);
#else
#error "Sense Control must be Falling, Rising, ..."
#endif
	/* 2- Enable interrupt */
	SET_BIT(GICR, 6);
    1094:	ab e5       	ldi	r26, 0x5B	; 91
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	eb e5       	ldi	r30, 0x5B	; 91
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	80 64       	ori	r24, 0x40	; 64
    10a0:	8c 93       	st	X, r24
#endif

#if EXTI_LINE1==ENABLE
	/* 1- Sense control    */
	/* Falling Edge for INT0 */
	SET_BIT(MCUCR, 1);
    10a2:	a5 e5       	ldi	r26, 0x55	; 85
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e5 e5       	ldi	r30, 0x55	; 85
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	82 60       	ori	r24, 0x02	; 2
    10ae:	8c 93       	st	X, r24
	CLR_BIT(MCUCR, 0);
    10b0:	a5 e5       	ldi	r26, 0x55	; 85
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e5 e5       	ldi	r30, 0x55	; 85
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	8e 7f       	andi	r24, 0xFE	; 254
    10bc:	8c 93       	st	X, r24
	/* 2- Enable interrupt */
	SET_BIT(GICR, 6);
    10be:	ab e5       	ldi	r26, 0x5B	; 91
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	eb e5       	ldi	r30, 0x5B	; 91
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	80 64       	ori	r24, 0x40	; 64
    10ca:	8c 93       	st	X, r24
#endif

#if EXTI_LINE2==ENABLE
	/* 1- Sense control    */
	/* Falling Edge for INT0 */
	SET_BIT(MCUCSR, 6);
    10cc:	a4 e5       	ldi	r26, 0x54	; 84
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e4 e5       	ldi	r30, 0x54	; 84
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	80 64       	ori	r24, 0x40	; 64
    10d8:	8c 93       	st	X, r24
	/* 2- Enable interrupt */
	SET_BIT(GICR, 6);
    10da:	ab e5       	ldi	r26, 0x5B	; 91
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	eb e5       	ldi	r30, 0x5B	; 91
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	80 64       	ori	r24, 0x40	; 64
    10e6:	8c 93       	st	X, r24
#endif



}
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	08 95       	ret

000010ee <MEXTI_vEnableInterrupt>:

void MEXTI_vEnableInterrupt(u8 A_u8ExtiLineNo)
{
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	0f 92       	push	r0
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
    10f8:	89 83       	std	Y+1, r24	; 0x01

}
    10fa:	0f 90       	pop	r0
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <MEXTI_vDisableInterrupt>:

void MEXTI_vDisableInterrupt(u8 A_u8ExtiLineNo)
{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	0f 92       	push	r0
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	89 83       	std	Y+1, r24	; 0x01

}
    110e:	0f 90       	pop	r0
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	08 95       	ret

00001116 <MEXTI_vSetSenseControl>:

void MEXTI_vSetSenseControl(u8 A_u8ExtiLineNo, u8 A_u8SenseCtrl)
{
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	00 d0       	rcall	.+0      	; 0x111c <MEXTI_vSetSenseControl+0x6>
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    1120:	89 83       	std	Y+1, r24	; 0x01
    1122:	6a 83       	std	Y+2, r22	; 0x02

}
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <MDIO_vSetPinDIR>:




Error_t MDIO_vSetPinDIR(u8 A_u8PortNo , u8 A_u8PinNo , u8 A_u8Dir)
{
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	28 97       	sbiw	r28, 0x08	; 8
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	8a 83       	std	Y+2, r24	; 0x02
    1144:	6b 83       	std	Y+3, r22	; 0x03
    1146:	4c 83       	std	Y+4, r20	; 0x04
	Error_t err= OK;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	89 83       	std	Y+1, r24	; 0x01
	if (A_u8Dir== DIO_OUTPUT)
    114c:	8c 81       	ldd	r24, Y+4	; 0x04
    114e:	81 30       	cpi	r24, 0x01	; 1
    1150:	09 f0       	breq	.+2      	; 0x1154 <MDIO_vSetPinDIR+0x26>
    1152:	6f c0       	rjmp	.+222    	; 0x1232 <MDIO_vSetPinDIR+0x104>
	{
		switch(A_u8PortNo)
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	38 87       	std	Y+8, r19	; 0x08
    115c:	2f 83       	std	Y+7, r18	; 0x07
    115e:	8f 81       	ldd	r24, Y+7	; 0x07
    1160:	98 85       	ldd	r25, Y+8	; 0x08
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	91 05       	cpc	r25, r1
    1166:	49 f1       	breq	.+82     	; 0x11ba <MDIO_vSetPinDIR+0x8c>
    1168:	2f 81       	ldd	r18, Y+7	; 0x07
    116a:	38 85       	ldd	r19, Y+8	; 0x08
    116c:	22 30       	cpi	r18, 0x02	; 2
    116e:	31 05       	cpc	r19, r1
    1170:	2c f4       	brge	.+10     	; 0x117c <MDIO_vSetPinDIR+0x4e>
    1172:	8f 81       	ldd	r24, Y+7	; 0x07
    1174:	98 85       	ldd	r25, Y+8	; 0x08
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	61 f0       	breq	.+24     	; 0x1192 <MDIO_vSetPinDIR+0x64>
    117a:	d4 c0       	rjmp	.+424    	; 0x1324 <MDIO_vSetPinDIR+0x1f6>
    117c:	2f 81       	ldd	r18, Y+7	; 0x07
    117e:	38 85       	ldd	r19, Y+8	; 0x08
    1180:	22 30       	cpi	r18, 0x02	; 2
    1182:	31 05       	cpc	r19, r1
    1184:	71 f1       	breq	.+92     	; 0x11e2 <MDIO_vSetPinDIR+0xb4>
    1186:	8f 81       	ldd	r24, Y+7	; 0x07
    1188:	98 85       	ldd	r25, Y+8	; 0x08
    118a:	83 30       	cpi	r24, 0x03	; 3
    118c:	91 05       	cpc	r25, r1
    118e:	e9 f1       	breq	.+122    	; 0x120a <MDIO_vSetPinDIR+0xdc>
    1190:	c9 c0       	rjmp	.+402    	; 0x1324 <MDIO_vSetPinDIR+0x1f6>
		{
			case DIO_PORTA:
				SET_BIT(DDRA , A_u8PinNo);
    1192:	aa e3       	ldi	r26, 0x3A	; 58
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	ea e3       	ldi	r30, 0x3A	; 58
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 2e       	mov	r0, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <MDIO_vSetPinDIR+0x82>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <MDIO_vSetPinDIR+0x7e>
    11b4:	84 2b       	or	r24, r20
    11b6:	8c 93       	st	X, r24
    11b8:	b5 c0       	rjmp	.+362    	; 0x1324 <MDIO_vSetPinDIR+0x1f6>
				break;
			case DIO_PORTB:
				SET_BIT(DDRB , A_u8PinNo);
    11ba:	a7 e3       	ldi	r26, 0x37	; 55
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e7 e3       	ldi	r30, 0x37	; 55
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	48 2f       	mov	r20, r24
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 2e       	mov	r0, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <MDIO_vSetPinDIR+0xaa>
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	0a 94       	dec	r0
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <MDIO_vSetPinDIR+0xa6>
    11dc:	84 2b       	or	r24, r20
    11de:	8c 93       	st	X, r24
    11e0:	a1 c0       	rjmp	.+322    	; 0x1324 <MDIO_vSetPinDIR+0x1f6>
				break;
			case DIO_PORTC:
				SET_BIT(DDRC , A_u8PinNo);
    11e2:	a4 e3       	ldi	r26, 0x34	; 52
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e4 e3       	ldi	r30, 0x34	; 52
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	48 2f       	mov	r20, r24
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	02 2e       	mov	r0, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <MDIO_vSetPinDIR+0xd2>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	0a 94       	dec	r0
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <MDIO_vSetPinDIR+0xce>
    1204:	84 2b       	or	r24, r20
    1206:	8c 93       	st	X, r24
    1208:	8d c0       	rjmp	.+282    	; 0x1324 <MDIO_vSetPinDIR+0x1f6>
				break;
			case DIO_PORTD:
				SET_BIT(DDRD , A_u8PinNo);
    120a:	a1 e3       	ldi	r26, 0x31	; 49
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e1 e3       	ldi	r30, 0x31	; 49
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <MDIO_vSetPinDIR+0xfa>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <MDIO_vSetPinDIR+0xf6>
    122c:	84 2b       	or	r24, r20
    122e:	8c 93       	st	X, r24
    1230:	79 c0       	rjmp	.+242    	; 0x1324 <MDIO_vSetPinDIR+0x1f6>
				break;
		}
	}
	else if(A_u8Dir== DIO_INPUT)
    1232:	8c 81       	ldd	r24, Y+4	; 0x04
    1234:	88 23       	and	r24, r24
    1236:	09 f0       	breq	.+2      	; 0x123a <MDIO_vSetPinDIR+0x10c>
    1238:	74 c0       	rjmp	.+232    	; 0x1322 <MDIO_vSetPinDIR+0x1f4>
	{
		switch(A_u8PortNo)
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	3e 83       	std	Y+6, r19	; 0x06
    1242:	2d 83       	std	Y+5, r18	; 0x05
    1244:	8d 81       	ldd	r24, Y+5	; 0x05
    1246:	9e 81       	ldd	r25, Y+6	; 0x06
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	91 05       	cpc	r25, r1
    124c:	59 f1       	breq	.+86     	; 0x12a4 <MDIO_vSetPinDIR+0x176>
    124e:	2d 81       	ldd	r18, Y+5	; 0x05
    1250:	3e 81       	ldd	r19, Y+6	; 0x06
    1252:	22 30       	cpi	r18, 0x02	; 2
    1254:	31 05       	cpc	r19, r1
    1256:	2c f4       	brge	.+10     	; 0x1262 <MDIO_vSetPinDIR+0x134>
    1258:	8d 81       	ldd	r24, Y+5	; 0x05
    125a:	9e 81       	ldd	r25, Y+6	; 0x06
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	69 f0       	breq	.+26     	; 0x127a <MDIO_vSetPinDIR+0x14c>
    1260:	61 c0       	rjmp	.+194    	; 0x1324 <MDIO_vSetPinDIR+0x1f6>
    1262:	2d 81       	ldd	r18, Y+5	; 0x05
    1264:	3e 81       	ldd	r19, Y+6	; 0x06
    1266:	22 30       	cpi	r18, 0x02	; 2
    1268:	31 05       	cpc	r19, r1
    126a:	89 f1       	breq	.+98     	; 0x12ce <MDIO_vSetPinDIR+0x1a0>
    126c:	8d 81       	ldd	r24, Y+5	; 0x05
    126e:	9e 81       	ldd	r25, Y+6	; 0x06
    1270:	83 30       	cpi	r24, 0x03	; 3
    1272:	91 05       	cpc	r25, r1
    1274:	09 f4       	brne	.+2      	; 0x1278 <MDIO_vSetPinDIR+0x14a>
    1276:	40 c0       	rjmp	.+128    	; 0x12f8 <MDIO_vSetPinDIR+0x1ca>
    1278:	55 c0       	rjmp	.+170    	; 0x1324 <MDIO_vSetPinDIR+0x1f6>
		{
			case DIO_PORTA:
				CLR_BIT(DDRA , A_u8PinNo);
    127a:	aa e3       	ldi	r26, 0x3A	; 58
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	ea e3       	ldi	r30, 0x3A	; 58
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	48 2f       	mov	r20, r24
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	02 2e       	mov	r0, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <MDIO_vSetPinDIR+0x16a>
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	0a 94       	dec	r0
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <MDIO_vSetPinDIR+0x166>
    129c:	80 95       	com	r24
    129e:	84 23       	and	r24, r20
    12a0:	8c 93       	st	X, r24
    12a2:	40 c0       	rjmp	.+128    	; 0x1324 <MDIO_vSetPinDIR+0x1f6>
				break;
			case DIO_PORTB:
				CLR_BIT(DDRB , A_u8PinNo);
    12a4:	a7 e3       	ldi	r26, 0x37	; 55
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e7 e3       	ldi	r30, 0x37	; 55
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	48 2f       	mov	r20, r24
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 2e       	mov	r0, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <MDIO_vSetPinDIR+0x194>
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	0a 94       	dec	r0
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <MDIO_vSetPinDIR+0x190>
    12c6:	80 95       	com	r24
    12c8:	84 23       	and	r24, r20
    12ca:	8c 93       	st	X, r24
    12cc:	2b c0       	rjmp	.+86     	; 0x1324 <MDIO_vSetPinDIR+0x1f6>
				break;
			case DIO_PORTC:
				CLR_BIT(DDRC , A_u8PinNo);
    12ce:	a4 e3       	ldi	r26, 0x34	; 52
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e4 e3       	ldi	r30, 0x34	; 52
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	48 2f       	mov	r20, r24
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	02 2e       	mov	r0, r18
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <MDIO_vSetPinDIR+0x1be>
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	0a 94       	dec	r0
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <MDIO_vSetPinDIR+0x1ba>
    12f0:	80 95       	com	r24
    12f2:	84 23       	and	r24, r20
    12f4:	8c 93       	st	X, r24
    12f6:	16 c0       	rjmp	.+44     	; 0x1324 <MDIO_vSetPinDIR+0x1f6>
				break;
			case DIO_PORTD:
				CLR_BIT(DDRD , A_u8PinNo);
    12f8:	a1 e3       	ldi	r26, 0x31	; 49
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e1 e3       	ldi	r30, 0x31	; 49
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <MDIO_vSetPinDIR+0x1e8>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <MDIO_vSetPinDIR+0x1e4>
    131a:	80 95       	com	r24
    131c:	84 23       	and	r24, r20
    131e:	8c 93       	st	X, r24
    1320:	01 c0       	rjmp	.+2      	; 0x1324 <MDIO_vSetPinDIR+0x1f6>
		}
	}
	else{


		err= NOK;
    1322:	19 82       	std	Y+1, r1	; 0x01
	}
	return err;
    1324:	89 81       	ldd	r24, Y+1	; 0x01
}
    1326:	28 96       	adiw	r28, 0x08	; 8
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	de bf       	out	0x3e, r29	; 62
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	cd bf       	out	0x3d, r28	; 61
    1332:	cf 91       	pop	r28
    1334:	df 91       	pop	r29
    1336:	08 95       	ret

00001338 <MDIO_vSetPinVal>:
void MDIO_vSetPinVal(u8 A_u8PortNo , u8 A_u8PinNo , u8 A_u8Val)
{
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	27 97       	sbiw	r28, 0x07	; 7
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	cd bf       	out	0x3d, r28	; 61
    134c:	89 83       	std	Y+1, r24	; 0x01
    134e:	6a 83       	std	Y+2, r22	; 0x02
    1350:	4b 83       	std	Y+3, r20	; 0x03

	if (A_u8Val== DIO_HIGH)
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	09 f0       	breq	.+2      	; 0x135a <MDIO_vSetPinVal+0x22>
    1358:	6f c0       	rjmp	.+222    	; 0x1438 <MDIO_vSetPinVal+0x100>
	{
		switch(A_u8PortNo)
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	3f 83       	std	Y+7, r19	; 0x07
    1362:	2e 83       	std	Y+6, r18	; 0x06
    1364:	8e 81       	ldd	r24, Y+6	; 0x06
    1366:	9f 81       	ldd	r25, Y+7	; 0x07
    1368:	81 30       	cpi	r24, 0x01	; 1
    136a:	91 05       	cpc	r25, r1
    136c:	49 f1       	breq	.+82     	; 0x13c0 <MDIO_vSetPinVal+0x88>
    136e:	2e 81       	ldd	r18, Y+6	; 0x06
    1370:	3f 81       	ldd	r19, Y+7	; 0x07
    1372:	22 30       	cpi	r18, 0x02	; 2
    1374:	31 05       	cpc	r19, r1
    1376:	2c f4       	brge	.+10     	; 0x1382 <MDIO_vSetPinVal+0x4a>
    1378:	8e 81       	ldd	r24, Y+6	; 0x06
    137a:	9f 81       	ldd	r25, Y+7	; 0x07
    137c:	00 97       	sbiw	r24, 0x00	; 0
    137e:	61 f0       	breq	.+24     	; 0x1398 <MDIO_vSetPinVal+0x60>
    1380:	d2 c0       	rjmp	.+420    	; 0x1526 <MDIO_vSetPinVal+0x1ee>
    1382:	2e 81       	ldd	r18, Y+6	; 0x06
    1384:	3f 81       	ldd	r19, Y+7	; 0x07
    1386:	22 30       	cpi	r18, 0x02	; 2
    1388:	31 05       	cpc	r19, r1
    138a:	71 f1       	breq	.+92     	; 0x13e8 <MDIO_vSetPinVal+0xb0>
    138c:	8e 81       	ldd	r24, Y+6	; 0x06
    138e:	9f 81       	ldd	r25, Y+7	; 0x07
    1390:	83 30       	cpi	r24, 0x03	; 3
    1392:	91 05       	cpc	r25, r1
    1394:	e9 f1       	breq	.+122    	; 0x1410 <MDIO_vSetPinVal+0xd8>
    1396:	c7 c0       	rjmp	.+398    	; 0x1526 <MDIO_vSetPinVal+0x1ee>
		{
			case DIO_PORTA:
				SET_BIT(PORTA , A_u8PinNo);
    1398:	ab e3       	ldi	r26, 0x3B	; 59
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	eb e3       	ldi	r30, 0x3B	; 59
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	48 2f       	mov	r20, r24
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	02 2e       	mov	r0, r18
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <MDIO_vSetPinVal+0x7e>
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	0a 94       	dec	r0
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <MDIO_vSetPinVal+0x7a>
    13ba:	84 2b       	or	r24, r20
    13bc:	8c 93       	st	X, r24
    13be:	b3 c0       	rjmp	.+358    	; 0x1526 <MDIO_vSetPinVal+0x1ee>
				break;
			case DIO_PORTB:
				SET_BIT(PORTB , A_u8PinNo);
    13c0:	a8 e3       	ldi	r26, 0x38	; 56
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e8 e3       	ldi	r30, 0x38	; 56
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	48 2f       	mov	r20, r24
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	02 2e       	mov	r0, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <MDIO_vSetPinVal+0xa6>
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	0a 94       	dec	r0
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <MDIO_vSetPinVal+0xa2>
    13e2:	84 2b       	or	r24, r20
    13e4:	8c 93       	st	X, r24
    13e6:	9f c0       	rjmp	.+318    	; 0x1526 <MDIO_vSetPinVal+0x1ee>
				break;
			case DIO_PORTC:
				SET_BIT(PORTC , A_u8PinNo);
    13e8:	a5 e3       	ldi	r26, 0x35	; 53
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e5 e3       	ldi	r30, 0x35	; 53
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	48 2f       	mov	r20, r24
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	02 2e       	mov	r0, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <MDIO_vSetPinVal+0xce>
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	0a 94       	dec	r0
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <MDIO_vSetPinVal+0xca>
    140a:	84 2b       	or	r24, r20
    140c:	8c 93       	st	X, r24
    140e:	8b c0       	rjmp	.+278    	; 0x1526 <MDIO_vSetPinVal+0x1ee>
				break;
			case DIO_PORTD:
				SET_BIT(PORTD , A_u8PinNo);
    1410:	a2 e3       	ldi	r26, 0x32	; 50
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e2 e3       	ldi	r30, 0x32	; 50
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <MDIO_vSetPinVal+0xf6>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <MDIO_vSetPinVal+0xf2>
    1432:	84 2b       	or	r24, r20
    1434:	8c 93       	st	X, r24
    1436:	77 c0       	rjmp	.+238    	; 0x1526 <MDIO_vSetPinVal+0x1ee>
				break;
		}
	}
	else if(A_u8Val== DIO_LOW)
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	88 23       	and	r24, r24
    143c:	09 f0       	breq	.+2      	; 0x1440 <MDIO_vSetPinVal+0x108>
    143e:	73 c0       	rjmp	.+230    	; 0x1526 <MDIO_vSetPinVal+0x1ee>
	{
		switch(A_u8PortNo)
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	3d 83       	std	Y+5, r19	; 0x05
    1448:	2c 83       	std	Y+4, r18	; 0x04
    144a:	8c 81       	ldd	r24, Y+4	; 0x04
    144c:	9d 81       	ldd	r25, Y+5	; 0x05
    144e:	81 30       	cpi	r24, 0x01	; 1
    1450:	91 05       	cpc	r25, r1
    1452:	59 f1       	breq	.+86     	; 0x14aa <MDIO_vSetPinVal+0x172>
    1454:	2c 81       	ldd	r18, Y+4	; 0x04
    1456:	3d 81       	ldd	r19, Y+5	; 0x05
    1458:	22 30       	cpi	r18, 0x02	; 2
    145a:	31 05       	cpc	r19, r1
    145c:	2c f4       	brge	.+10     	; 0x1468 <MDIO_vSetPinVal+0x130>
    145e:	8c 81       	ldd	r24, Y+4	; 0x04
    1460:	9d 81       	ldd	r25, Y+5	; 0x05
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	69 f0       	breq	.+26     	; 0x1480 <MDIO_vSetPinVal+0x148>
    1466:	5f c0       	rjmp	.+190    	; 0x1526 <MDIO_vSetPinVal+0x1ee>
    1468:	2c 81       	ldd	r18, Y+4	; 0x04
    146a:	3d 81       	ldd	r19, Y+5	; 0x05
    146c:	22 30       	cpi	r18, 0x02	; 2
    146e:	31 05       	cpc	r19, r1
    1470:	89 f1       	breq	.+98     	; 0x14d4 <MDIO_vSetPinVal+0x19c>
    1472:	8c 81       	ldd	r24, Y+4	; 0x04
    1474:	9d 81       	ldd	r25, Y+5	; 0x05
    1476:	83 30       	cpi	r24, 0x03	; 3
    1478:	91 05       	cpc	r25, r1
    147a:	09 f4       	brne	.+2      	; 0x147e <MDIO_vSetPinVal+0x146>
    147c:	40 c0       	rjmp	.+128    	; 0x14fe <MDIO_vSetPinVal+0x1c6>
    147e:	53 c0       	rjmp	.+166    	; 0x1526 <MDIO_vSetPinVal+0x1ee>
		{
			case DIO_PORTA:
				CLR_BIT(PORTA , A_u8PinNo);
    1480:	ab e3       	ldi	r26, 0x3B	; 59
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	eb e3       	ldi	r30, 0x3B	; 59
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 2e       	mov	r0, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <MDIO_vSetPinVal+0x166>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	0a 94       	dec	r0
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <MDIO_vSetPinVal+0x162>
    14a2:	80 95       	com	r24
    14a4:	84 23       	and	r24, r20
    14a6:	8c 93       	st	X, r24
    14a8:	3e c0       	rjmp	.+124    	; 0x1526 <MDIO_vSetPinVal+0x1ee>
				break;
			case DIO_PORTB:
				CLR_BIT(PORTB , A_u8PinNo);
    14aa:	a8 e3       	ldi	r26, 0x38	; 56
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e8 e3       	ldi	r30, 0x38	; 56
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	48 2f       	mov	r20, r24
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	02 2e       	mov	r0, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <MDIO_vSetPinVal+0x190>
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	0a 94       	dec	r0
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <MDIO_vSetPinVal+0x18c>
    14cc:	80 95       	com	r24
    14ce:	84 23       	and	r24, r20
    14d0:	8c 93       	st	X, r24
    14d2:	29 c0       	rjmp	.+82     	; 0x1526 <MDIO_vSetPinVal+0x1ee>
				break;
			case DIO_PORTC:
				CLR_BIT(PORTC , A_u8PinNo);
    14d4:	a5 e3       	ldi	r26, 0x35	; 53
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e5 e3       	ldi	r30, 0x35	; 53
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	48 2f       	mov	r20, r24
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	02 2e       	mov	r0, r18
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <MDIO_vSetPinVal+0x1ba>
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	0a 94       	dec	r0
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <MDIO_vSetPinVal+0x1b6>
    14f6:	80 95       	com	r24
    14f8:	84 23       	and	r24, r20
    14fa:	8c 93       	st	X, r24
    14fc:	14 c0       	rjmp	.+40     	; 0x1526 <MDIO_vSetPinVal+0x1ee>
				break;
			case DIO_PORTD:
				CLR_BIT(PORTD , A_u8PinNo);
    14fe:	a2 e3       	ldi	r26, 0x32	; 50
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e2 e3       	ldi	r30, 0x32	; 50
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	48 2f       	mov	r20, r24
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	02 2e       	mov	r0, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <MDIO_vSetPinVal+0x1e4>
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	0a 94       	dec	r0
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <MDIO_vSetPinVal+0x1e0>
    1520:	80 95       	com	r24
    1522:	84 23       	and	r24, r20
    1524:	8c 93       	st	X, r24
				break;
		}
	}
}
    1526:	27 96       	adiw	r28, 0x07	; 7
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	cd bf       	out	0x3d, r28	; 61
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	08 95       	ret

00001538 <MDIO_u8GetPinVal>:
u8   MDIO_u8GetPinVal(u8 A_u8PortNo , u8 A_u8PinNo)
{
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	00 d0       	rcall	.+0      	; 0x153e <MDIO_u8GetPinVal+0x6>
    153e:	00 d0       	rcall	.+0      	; 0x1540 <MDIO_u8GetPinVal+0x8>
    1540:	0f 92       	push	r0
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	8a 83       	std	Y+2, r24	; 0x02
    1548:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8PinVal=0;   //local variable
    154a:	19 82       	std	Y+1, r1	; 0x01
	switch(A_u8PortNo)
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	3d 83       	std	Y+5, r19	; 0x05
    1554:	2c 83       	std	Y+4, r18	; 0x04
    1556:	4c 81       	ldd	r20, Y+4	; 0x04
    1558:	5d 81       	ldd	r21, Y+5	; 0x05
    155a:	41 30       	cpi	r20, 0x01	; 1
    155c:	51 05       	cpc	r21, r1
    155e:	41 f1       	breq	.+80     	; 0x15b0 <MDIO_u8GetPinVal+0x78>
    1560:	8c 81       	ldd	r24, Y+4	; 0x04
    1562:	9d 81       	ldd	r25, Y+5	; 0x05
    1564:	82 30       	cpi	r24, 0x02	; 2
    1566:	91 05       	cpc	r25, r1
    1568:	34 f4       	brge	.+12     	; 0x1576 <MDIO_u8GetPinVal+0x3e>
    156a:	2c 81       	ldd	r18, Y+4	; 0x04
    156c:	3d 81       	ldd	r19, Y+5	; 0x05
    156e:	21 15       	cp	r18, r1
    1570:	31 05       	cpc	r19, r1
    1572:	61 f0       	breq	.+24     	; 0x158c <MDIO_u8GetPinVal+0x54>
    1574:	52 c0       	rjmp	.+164    	; 0x161a <MDIO_u8GetPinVal+0xe2>
    1576:	4c 81       	ldd	r20, Y+4	; 0x04
    1578:	5d 81       	ldd	r21, Y+5	; 0x05
    157a:	42 30       	cpi	r20, 0x02	; 2
    157c:	51 05       	cpc	r21, r1
    157e:	51 f1       	breq	.+84     	; 0x15d4 <MDIO_u8GetPinVal+0x9c>
    1580:	8c 81       	ldd	r24, Y+4	; 0x04
    1582:	9d 81       	ldd	r25, Y+5	; 0x05
    1584:	83 30       	cpi	r24, 0x03	; 3
    1586:	91 05       	cpc	r25, r1
    1588:	b9 f1       	breq	.+110    	; 0x15f8 <MDIO_u8GetPinVal+0xc0>
    158a:	47 c0       	rjmp	.+142    	; 0x161a <MDIO_u8GetPinVal+0xe2>
	{
		case DIO_PORTA:
			L_u8PinVal=GET_BIT(PINA , A_u8PinNo);
    158c:	e9 e3       	ldi	r30, 0x39	; 57
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	88 2f       	mov	r24, r24
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	a9 01       	movw	r20, r18
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <MDIO_u8GetPinVal+0x6c>
    15a0:	55 95       	asr	r21
    15a2:	47 95       	ror	r20
    15a4:	8a 95       	dec	r24
    15a6:	e2 f7       	brpl	.-8      	; 0x15a0 <MDIO_u8GetPinVal+0x68>
    15a8:	ca 01       	movw	r24, r20
    15aa:	81 70       	andi	r24, 0x01	; 1
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	35 c0       	rjmp	.+106    	; 0x161a <MDIO_u8GetPinVal+0xe2>
			break;
		case DIO_PORTB:
			L_u8PinVal=GET_BIT(PINB , A_u8PinNo);
    15b0:	e6 e3       	ldi	r30, 0x36	; 54
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	88 2f       	mov	r24, r24
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	a9 01       	movw	r20, r18
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <MDIO_u8GetPinVal+0x90>
    15c4:	55 95       	asr	r21
    15c6:	47 95       	ror	r20
    15c8:	8a 95       	dec	r24
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <MDIO_u8GetPinVal+0x8c>
    15cc:	ca 01       	movw	r24, r20
    15ce:	81 70       	andi	r24, 0x01	; 1
    15d0:	89 83       	std	Y+1, r24	; 0x01
    15d2:	23 c0       	rjmp	.+70     	; 0x161a <MDIO_u8GetPinVal+0xe2>
			break;
		case DIO_PORTC:
			L_u8PinVal=GET_BIT(PINC , A_u8PinNo);
    15d4:	e3 e3       	ldi	r30, 0x33	; 51
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	88 2f       	mov	r24, r24
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	a9 01       	movw	r20, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <MDIO_u8GetPinVal+0xb4>
    15e8:	55 95       	asr	r21
    15ea:	47 95       	ror	r20
    15ec:	8a 95       	dec	r24
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <MDIO_u8GetPinVal+0xb0>
    15f0:	ca 01       	movw	r24, r20
    15f2:	81 70       	andi	r24, 0x01	; 1
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	11 c0       	rjmp	.+34     	; 0x161a <MDIO_u8GetPinVal+0xe2>
			break;
		case DIO_PORTD:
			L_u8PinVal=GET_BIT(PIND , A_u8PinNo);
    15f8:	e0 e3       	ldi	r30, 0x30	; 48
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	88 2f       	mov	r24, r24
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	a9 01       	movw	r20, r18
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <MDIO_u8GetPinVal+0xd8>
    160c:	55 95       	asr	r21
    160e:	47 95       	ror	r20
    1610:	8a 95       	dec	r24
    1612:	e2 f7       	brpl	.-8      	; 0x160c <MDIO_u8GetPinVal+0xd4>
    1614:	ca 01       	movw	r24, r20
    1616:	81 70       	andi	r24, 0x01	; 1
    1618:	89 83       	std	Y+1, r24	; 0x01
			break;
	}

	return L_u8PinVal;
    161a:	89 81       	ldd	r24, Y+1	; 0x01
}
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <MDIO_vSetPortDIR>:
void MDIO_vSetPortDIR(u8 A_u8PortNo , u8 A_u8Dir)
{
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	00 d0       	rcall	.+0      	; 0x1632 <MDIO_vSetPortDIR+0x6>
    1632:	00 d0       	rcall	.+0      	; 0x1634 <MDIO_vSetPortDIR+0x8>
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
    1638:	89 83       	std	Y+1, r24	; 0x01
    163a:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNo)
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	3c 83       	std	Y+4, r19	; 0x04
    1644:	2b 83       	std	Y+3, r18	; 0x03
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	9c 81       	ldd	r25, Y+4	; 0x04
    164a:	81 30       	cpi	r24, 0x01	; 1
    164c:	91 05       	cpc	r25, r1
    164e:	d1 f0       	breq	.+52     	; 0x1684 <MDIO_vSetPortDIR+0x58>
    1650:	2b 81       	ldd	r18, Y+3	; 0x03
    1652:	3c 81       	ldd	r19, Y+4	; 0x04
    1654:	22 30       	cpi	r18, 0x02	; 2
    1656:	31 05       	cpc	r19, r1
    1658:	2c f4       	brge	.+10     	; 0x1664 <MDIO_vSetPortDIR+0x38>
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	9c 81       	ldd	r25, Y+4	; 0x04
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	61 f0       	breq	.+24     	; 0x167a <MDIO_vSetPortDIR+0x4e>
    1662:	1e c0       	rjmp	.+60     	; 0x16a0 <MDIO_vSetPortDIR+0x74>
    1664:	2b 81       	ldd	r18, Y+3	; 0x03
    1666:	3c 81       	ldd	r19, Y+4	; 0x04
    1668:	22 30       	cpi	r18, 0x02	; 2
    166a:	31 05       	cpc	r19, r1
    166c:	81 f0       	breq	.+32     	; 0x168e <MDIO_vSetPortDIR+0x62>
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	9c 81       	ldd	r25, Y+4	; 0x04
    1672:	83 30       	cpi	r24, 0x03	; 3
    1674:	91 05       	cpc	r25, r1
    1676:	81 f0       	breq	.+32     	; 0x1698 <MDIO_vSetPortDIR+0x6c>
    1678:	13 c0       	rjmp	.+38     	; 0x16a0 <MDIO_vSetPortDIR+0x74>
	{
		case DIO_PORTA:
			DDRA = A_u8Dir;
    167a:	ea e3       	ldi	r30, 0x3A	; 58
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	80 83       	st	Z, r24
    1682:	0e c0       	rjmp	.+28     	; 0x16a0 <MDIO_vSetPortDIR+0x74>
			break;
		case DIO_PORTB:
			DDRB = A_u8Dir;
    1684:	e7 e3       	ldi	r30, 0x37	; 55
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	80 83       	st	Z, r24
    168c:	09 c0       	rjmp	.+18     	; 0x16a0 <MDIO_vSetPortDIR+0x74>
			break;
		case DIO_PORTC:
			DDRC = A_u8Dir;
    168e:	e4 e3       	ldi	r30, 0x34	; 52
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	80 83       	st	Z, r24
    1696:	04 c0       	rjmp	.+8      	; 0x16a0 <MDIO_vSetPortDIR+0x74>
			break;
		case DIO_PORTD:
			DDRD = A_u8Dir;
    1698:	e1 e3       	ldi	r30, 0x31	; 49
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	80 83       	st	Z, r24
			break;
	}
}
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <MDIO_vSetPortVal>:
void MDIO_vSetPortVal(u8 A_u8PortNo , u8 A_u8Val)
{
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <MDIO_vSetPortVal+0x6>
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <MDIO_vSetPortVal+0x8>
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	89 83       	std	Y+1, r24	; 0x01
    16bc:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNo)
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	3c 83       	std	Y+4, r19	; 0x04
    16c6:	2b 83       	std	Y+3, r18	; 0x03
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	9c 81       	ldd	r25, Y+4	; 0x04
    16cc:	81 30       	cpi	r24, 0x01	; 1
    16ce:	91 05       	cpc	r25, r1
    16d0:	d1 f0       	breq	.+52     	; 0x1706 <MDIO_vSetPortVal+0x58>
    16d2:	2b 81       	ldd	r18, Y+3	; 0x03
    16d4:	3c 81       	ldd	r19, Y+4	; 0x04
    16d6:	22 30       	cpi	r18, 0x02	; 2
    16d8:	31 05       	cpc	r19, r1
    16da:	2c f4       	brge	.+10     	; 0x16e6 <MDIO_vSetPortVal+0x38>
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	9c 81       	ldd	r25, Y+4	; 0x04
    16e0:	00 97       	sbiw	r24, 0x00	; 0
    16e2:	61 f0       	breq	.+24     	; 0x16fc <MDIO_vSetPortVal+0x4e>
    16e4:	1e c0       	rjmp	.+60     	; 0x1722 <MDIO_vSetPortVal+0x74>
    16e6:	2b 81       	ldd	r18, Y+3	; 0x03
    16e8:	3c 81       	ldd	r19, Y+4	; 0x04
    16ea:	22 30       	cpi	r18, 0x02	; 2
    16ec:	31 05       	cpc	r19, r1
    16ee:	81 f0       	breq	.+32     	; 0x1710 <MDIO_vSetPortVal+0x62>
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	9c 81       	ldd	r25, Y+4	; 0x04
    16f4:	83 30       	cpi	r24, 0x03	; 3
    16f6:	91 05       	cpc	r25, r1
    16f8:	81 f0       	breq	.+32     	; 0x171a <MDIO_vSetPortVal+0x6c>
    16fa:	13 c0       	rjmp	.+38     	; 0x1722 <MDIO_vSetPortVal+0x74>
	{
		case DIO_PORTA:
			PORTA = A_u8Val;
    16fc:	eb e3       	ldi	r30, 0x3B	; 59
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	80 83       	st	Z, r24
    1704:	0e c0       	rjmp	.+28     	; 0x1722 <MDIO_vSetPortVal+0x74>
			break;
		case DIO_PORTB:
			PORTB = A_u8Val;
    1706:	e8 e3       	ldi	r30, 0x38	; 56
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	80 83       	st	Z, r24
    170e:	09 c0       	rjmp	.+18     	; 0x1722 <MDIO_vSetPortVal+0x74>
			break;
		case DIO_PORTC:
			PORTC = A_u8Val;
    1710:	e5 e3       	ldi	r30, 0x35	; 53
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	80 83       	st	Z, r24
    1718:	04 c0       	rjmp	.+8      	; 0x1722 <MDIO_vSetPortVal+0x74>
			break;
		case DIO_PORTD:
			PORTD = A_u8Val;
    171a:	e2 e3       	ldi	r30, 0x32	; 50
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	80 83       	st	Z, r24
			break;
	}
}
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	cf 91       	pop	r28
    172c:	df 91       	pop	r29
    172e:	08 95       	ret

00001730 <MDIO_vTogPinVal>:
//u8   DIO_u8GetPortVal(u8 A_u8PortNo )
//{}
void MDIO_vTogPinVal(u8 A_u8PortNo , u8 A_u8PinNo)

{
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	00 d0       	rcall	.+0      	; 0x1736 <MDIO_vTogPinVal+0x6>
    1736:	00 d0       	rcall	.+0      	; 0x1738 <MDIO_vTogPinVal+0x8>
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
    173c:	89 83       	std	Y+1, r24	; 0x01
    173e:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNo)
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	3c 83       	std	Y+4, r19	; 0x04
    1748:	2b 83       	std	Y+3, r18	; 0x03
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	9c 81       	ldd	r25, Y+4	; 0x04
    174e:	81 30       	cpi	r24, 0x01	; 1
    1750:	91 05       	cpc	r25, r1
    1752:	49 f1       	breq	.+82     	; 0x17a6 <MDIO_vTogPinVal+0x76>
    1754:	2b 81       	ldd	r18, Y+3	; 0x03
    1756:	3c 81       	ldd	r19, Y+4	; 0x04
    1758:	22 30       	cpi	r18, 0x02	; 2
    175a:	31 05       	cpc	r19, r1
    175c:	2c f4       	brge	.+10     	; 0x1768 <MDIO_vTogPinVal+0x38>
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	9c 81       	ldd	r25, Y+4	; 0x04
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	61 f0       	breq	.+24     	; 0x177e <MDIO_vTogPinVal+0x4e>
    1766:	5a c0       	rjmp	.+180    	; 0x181c <MDIO_vTogPinVal+0xec>
    1768:	2b 81       	ldd	r18, Y+3	; 0x03
    176a:	3c 81       	ldd	r19, Y+4	; 0x04
    176c:	22 30       	cpi	r18, 0x02	; 2
    176e:	31 05       	cpc	r19, r1
    1770:	71 f1       	breq	.+92     	; 0x17ce <MDIO_vTogPinVal+0x9e>
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	9c 81       	ldd	r25, Y+4	; 0x04
    1776:	83 30       	cpi	r24, 0x03	; 3
    1778:	91 05       	cpc	r25, r1
    177a:	e9 f1       	breq	.+122    	; 0x17f6 <MDIO_vTogPinVal+0xc6>
    177c:	4f c0       	rjmp	.+158    	; 0x181c <MDIO_vTogPinVal+0xec>
	{
		case DIO_PORTA:
			TOGGLE_BIT(PORTA , A_u8PinNo);
    177e:	ab e3       	ldi	r26, 0x3B	; 59
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	eb e3       	ldi	r30, 0x3B	; 59
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	48 2f       	mov	r20, r24
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	02 2e       	mov	r0, r18
    1796:	02 c0       	rjmp	.+4      	; 0x179c <MDIO_vTogPinVal+0x6c>
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	0a 94       	dec	r0
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <MDIO_vTogPinVal+0x68>
    17a0:	84 27       	eor	r24, r20
    17a2:	8c 93       	st	X, r24
    17a4:	3b c0       	rjmp	.+118    	; 0x181c <MDIO_vTogPinVal+0xec>
			break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB , A_u8PinNo);
    17a6:	a8 e3       	ldi	r26, 0x38	; 56
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e8 e3       	ldi	r30, 0x38	; 56
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	48 2f       	mov	r20, r24
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	02 2e       	mov	r0, r18
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <MDIO_vTogPinVal+0x94>
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	0a 94       	dec	r0
    17c6:	e2 f7       	brpl	.-8      	; 0x17c0 <MDIO_vTogPinVal+0x90>
    17c8:	84 27       	eor	r24, r20
    17ca:	8c 93       	st	X, r24
    17cc:	27 c0       	rjmp	.+78     	; 0x181c <MDIO_vTogPinVal+0xec>
			break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC , A_u8PinNo);
    17ce:	a5 e3       	ldi	r26, 0x35	; 53
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e5 e3       	ldi	r30, 0x35	; 53
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	48 2f       	mov	r20, r24
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	02 2e       	mov	r0, r18
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <MDIO_vTogPinVal+0xbc>
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	0a 94       	dec	r0
    17ee:	e2 f7       	brpl	.-8      	; 0x17e8 <MDIO_vTogPinVal+0xb8>
    17f0:	84 27       	eor	r24, r20
    17f2:	8c 93       	st	X, r24
    17f4:	13 c0       	rjmp	.+38     	; 0x181c <MDIO_vTogPinVal+0xec>
			break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD , A_u8PinNo);
    17f6:	a2 e3       	ldi	r26, 0x32	; 50
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e2 e3       	ldi	r30, 0x32	; 50
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	48 2f       	mov	r20, r24
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	02 2e       	mov	r0, r18
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <MDIO_vTogPinVal+0xe4>
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	0a 94       	dec	r0
    1816:	e2 f7       	brpl	.-8      	; 0x1810 <MDIO_vTogPinVal+0xe0>
    1818:	84 27       	eor	r24, r20
    181a:	8c 93       	st	X, r24
			break;
	}

}
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <MADC_vInit>:

FlagStatus_t xADCFlag =DOWN;


void MADC_vInit(void)
{
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
	/* 1- referance voltage selection */
#if ADC_REF_VOLT==AVCC
	CLR_BIT(ADMUX,REFS1);
    1832:	a7 e2       	ldi	r26, 0x27	; 39
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e7 e2       	ldi	r30, 0x27	; 39
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	8f 77       	andi	r24, 0x7F	; 127
    183e:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS0);
    1840:	a7 e2       	ldi	r26, 0x27	; 39
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e7 e2       	ldi	r30, 0x27	; 39
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	80 64       	ori	r24, 0x40	; 64
    184c:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS0);
#else
#error "PLEASE ENTER ONE OF THE OPTIONS"
#endif
	/* 2- data direction adjustment */
	CLR_BIT(ADMUX,ADLAR);
    184e:	a7 e2       	ldi	r26, 0x27	; 39
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e7 e2       	ldi	r30, 0x27	; 39
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	8f 7d       	andi	r24, 0xDF	; 223
    185a:	8c 93       	st	X, r24
	/* 3- prescaler bits selection */
	ADCSRA = (ADCSRA & 0XF8 ) | ( ADC_PRESCALER );
    185c:	a6 e2       	ldi	r26, 0x26	; 38
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e6 e2       	ldi	r30, 0x26	; 38
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	88 7f       	andi	r24, 0xF8	; 248
    1868:	83 60       	ori	r24, 0x03	; 3
    186a:	8c 93       	st	X, r24
	/* 4- auto trigger enable*/
	/* 4a auto trigger source*/
	CLR_BIT(ADCSRA,ADATE);
    186c:	a6 e2       	ldi	r26, 0x26	; 38
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	e6 e2       	ldi	r30, 0x26	; 38
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	8f 7d       	andi	r24, 0xDF	; 223
    1878:	8c 93       	st	X, r24
	/* 5-interrupt enable disable */
#if ADC_INTERUPT_VOLT==DISABLE
	CLR_BIT(ADCSRA,ADIE);
#elif ADC_INTERUPT_VOLT==ENABLE
	SET_BIT(ADCSRA,ADIE);
    187a:	a6 e2       	ldi	r26, 0x26	; 38
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e6 e2       	ldi	r30, 0x26	; 38
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	88 60       	ori	r24, 0x08	; 8
    1886:	8c 93       	st	X, r24
#endif
	/*  6-enable adc peripheral*/
	SET_BIT(ADCSRA,ADEN);
    1888:	a6 e2       	ldi	r26, 0x26	; 38
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	e6 e2       	ldi	r30, 0x26	; 38
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	80 68       	ori	r24, 0x80	; 128
    1894:	8c 93       	st	X, r24


}
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <MADC_u16AnalogRead>:
u16  MADC_u16AnalogRead(u8 A_u8ChannelNo ){
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	0f 92       	push	r0
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	89 83       	std	Y+1, r24	; 0x01

	/*1- select channel */
	ADMUX=(ADMUX & 0XE0) | (A_u8ChannelNo & 0X07);  //(A_u8ChannelNo & 0X1F)      DIFFERENTIAL
    18a8:	a7 e2       	ldi	r26, 0x27	; 39
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	e7 e2       	ldi	r30, 0x27	; 39
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	98 2f       	mov	r25, r24
    18b4:	90 7e       	andi	r25, 0xE0	; 224
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	87 70       	andi	r24, 0x07	; 7
    18ba:	89 2b       	or	r24, r25
    18bc:	8c 93       	st	X, r24
	/*2- start conversion */
	SET_BIT(ADCSRA,ADSC);
    18be:	a6 e2       	ldi	r26, 0x26	; 38
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	e6 e2       	ldi	r30, 0x26	; 38
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	80 64       	ori	r24, 0x40	; 64
    18ca:	8c 93       	st	X, r24
	/*3- poll on flag */
	while (GET_BIT(ADCSRA,ADIF) != 1){}
    18cc:	e6 e2       	ldi	r30, 0x26	; 38
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	82 95       	swap	r24
    18d4:	8f 70       	andi	r24, 0x0F	; 15
    18d6:	88 2f       	mov	r24, r24
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	81 70       	andi	r24, 0x01	; 1
    18dc:	90 70       	andi	r25, 0x00	; 0
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	a9 f3       	breq	.-22     	; 0x18cc <MADC_u16AnalogRead+0x30>
	/*4- clear flag */
	SET_BIT(ADCSRA,ADIF);
    18e2:	a6 e2       	ldi	r26, 0x26	; 38
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e6 e2       	ldi	r30, 0x26	; 38
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	80 61       	ori	r24, 0x10	; 16
    18ee:	8c 93       	st	X, r24

	/*5- return adc data */

	return ADC;
    18f0:	e4 e2       	ldi	r30, 0x24	; 36
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	91 81       	ldd	r25, Z+1	; 0x01


}
    18f8:	0f 90       	pop	r0
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	08 95       	ret

00001900 <MADC_vStartConversion>:
/*INTERUPT BASED APIs*/
void MADC_vStartConversion(u8 A_u8ChannelNo){
    1900:	df 93       	push	r29
    1902:	cf 93       	push	r28
    1904:	0f 92       	push	r0
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	89 83       	std	Y+1, r24	; 0x01
	/*1- select channel */
	ADMUX=(ADMUX & 0XE0) | (A_u8ChannelNo & 0X07);  //(A_u8ChannelNo & 0X1F)      DIFFERENTIAL
    190c:	a7 e2       	ldi	r26, 0x27	; 39
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	e7 e2       	ldi	r30, 0x27	; 39
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	98 2f       	mov	r25, r24
    1918:	90 7e       	andi	r25, 0xE0	; 224
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	87 70       	andi	r24, 0x07	; 7
    191e:	89 2b       	or	r24, r25
    1920:	8c 93       	st	X, r24
	/*2- start conversion */
	SET_BIT(ADCSRA,ADSC);
    1922:	a6 e2       	ldi	r26, 0x26	; 38
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e6 e2       	ldi	r30, 0x26	; 38
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	80 64       	ori	r24, 0x40	; 64
    192e:	8c 93       	st	X, r24
}
    1930:	0f 90       	pop	r0
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <MADC_u16GetADCData>:
u16  MADC_u16GetADCData(void){
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62

	/*5- return adc data */

	return ADC;
    1940:	e4 e2       	ldi	r30, 0x24	; 36
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	91 81       	ldd	r25, Z+1	; 0x01

}
    1948:	cf 91       	pop	r28
    194a:	df 91       	pop	r29
    194c:	08 95       	ret

0000194e <MADC_vSetCallback>:
void MADC_vSetCallback(void(*A_fptr)(void)){
    194e:	df 93       	push	r29
    1950:	cf 93       	push	r28
    1952:	00 d0       	rcall	.+0      	; 0x1954 <MADC_vSetCallback+0x6>
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
    1958:	9a 83       	std	Y+2, r25	; 0x02
    195a:	89 83       	std	Y+1, r24	; 0x01

	ADC_Callback=A_fptr;
    195c:	89 81       	ldd	r24, Y+1	; 0x01
    195e:	9a 81       	ldd	r25, Y+2	; 0x02
    1960:	90 93 7f 00 	sts	0x007F, r25
    1964:	80 93 7e 00 	sts	0x007E, r24
}
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <MADC_vStartADCConversion_Asynch>:

/*alternative method for the three top APIs*/

void MADC_vStartADCConversion_Asynch(u8 A_u8ChannelNo,
										u16* A_pu16ADCData,
											void(*A_fptr)(void) ){
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	00 d0       	rcall	.+0      	; 0x1978 <MADC_vStartADCConversion_Asynch+0x6>
    1978:	00 d0       	rcall	.+0      	; 0x197a <MADC_vStartADCConversion_Asynch+0x8>
    197a:	0f 92       	push	r0
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	89 83       	std	Y+1, r24	; 0x01
    1982:	7b 83       	std	Y+3, r23	; 0x03
    1984:	6a 83       	std	Y+2, r22	; 0x02
    1986:	5d 83       	std	Y+5, r21	; 0x05
    1988:	4c 83       	std	Y+4, r20	; 0x04
	/*1- set callback function pointer */
	ADC_Callback = A_fptr;
    198a:	8c 81       	ldd	r24, Y+4	; 0x04
    198c:	9d 81       	ldd	r25, Y+5	; 0x05
    198e:	90 93 7f 00 	sts	0x007F, r25
    1992:	80 93 7e 00 	sts	0x007E, r24
	/*2- set adc data pointer */
	G_pu16ADC_Data = A_pu16ADCData;
    1996:	8a 81       	ldd	r24, Y+2	; 0x02
    1998:	9b 81       	ldd	r25, Y+3	; 0x03
    199a:	90 93 81 00 	sts	0x0081, r25
    199e:	80 93 80 00 	sts	0x0080, r24

	/*3- select channel */
	ADMUX=(ADMUX & 0XE0) | (A_u8ChannelNo & 0X07);  //(A_u8ChannelNo & 0X1F)      DIFFERENTIAL
    19a2:	a7 e2       	ldi	r26, 0x27	; 39
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e7 e2       	ldi	r30, 0x27	; 39
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	98 2f       	mov	r25, r24
    19ae:	90 7e       	andi	r25, 0xE0	; 224
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
    19b2:	87 70       	andi	r24, 0x07	; 7
    19b4:	89 2b       	or	r24, r25
    19b6:	8c 93       	st	X, r24
	/*4- start conversion */
	SET_BIT(ADCSRA,ADSC);
    19b8:	a6 e2       	ldi	r26, 0x26	; 38
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	e6 e2       	ldi	r30, 0x26	; 38
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	80 64       	ori	r24, 0x40	; 64
    19c4:	8c 93       	st	X, r24


}
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	cf 91       	pop	r28
    19d2:	df 91       	pop	r29
    19d4:	08 95       	ret

000019d6 <MADC_xGetFlagStatus>:


FlagStatus_t   MADC_xGetFlagStatus(void){
    19d6:	df 93       	push	r29
    19d8:	cf 93       	push	r28
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
	if(GET_BIT(ADCSRA,ADIF)==1){
    19de:	e6 e2       	ldi	r30, 0x26	; 38
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	82 95       	swap	r24
    19e6:	8f 70       	andi	r24, 0x0F	; 15
    19e8:	88 2f       	mov	r24, r24
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	81 70       	andi	r24, 0x01	; 1
    19ee:	90 70       	andi	r25, 0x00	; 0
    19f0:	88 23       	and	r24, r24
    19f2:	11 f0       	breq	.+4      	; 0x19f8 <MADC_xGetFlagStatus+0x22>
		xADCFlag =UP;
    19f4:	10 92 68 00 	sts	0x0068, r1
	}
	return xADCFlag;
    19f8:	80 91 68 00 	lds	r24, 0x0068
}
    19fc:	cf 91       	pop	r28
    19fe:	df 91       	pop	r29
    1a00:	08 95       	ret

00001a02 <__vector_16>:

/*ADC_ISR*/

void __vector_16(void)  __attribute__((signal));
void __vector_16(void)
{
    1a02:	1f 92       	push	r1
    1a04:	0f 92       	push	r0
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	0f 92       	push	r0
    1a0a:	11 24       	eor	r1, r1
    1a0c:	2f 93       	push	r18
    1a0e:	3f 93       	push	r19
    1a10:	4f 93       	push	r20
    1a12:	5f 93       	push	r21
    1a14:	6f 93       	push	r22
    1a16:	7f 93       	push	r23
    1a18:	8f 93       	push	r24
    1a1a:	9f 93       	push	r25
    1a1c:	af 93       	push	r26
    1a1e:	bf 93       	push	r27
    1a20:	ef 93       	push	r30
    1a22:	ff 93       	push	r31
    1a24:	df 93       	push	r29
    1a26:	cf 93       	push	r28
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
	if (G_pu16ADC_Data!=NULL)
    1a2c:	80 91 80 00 	lds	r24, 0x0080
    1a30:	90 91 81 00 	lds	r25, 0x0081
    1a34:	00 97       	sbiw	r24, 0x00	; 0
    1a36:	59 f0       	breq	.+22     	; 0x1a4e <__vector_16+0x4c>
	{
		*G_pu16ADC_Data=ADC; //FIRST U GET DATA THEN U EXCUTE CALLBACK MECHANISM
    1a38:	e0 91 80 00 	lds	r30, 0x0080
    1a3c:	f0 91 81 00 	lds	r31, 0x0081
    1a40:	a4 e2       	ldi	r26, 0x24	; 36
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	8d 91       	ld	r24, X+
    1a46:	9c 91       	ld	r25, X
    1a48:	11 97       	sbiw	r26, 0x01	; 1
    1a4a:	91 83       	std	Z+1, r25	; 0x01
    1a4c:	80 83       	st	Z, r24
	}
	if (ADC_Callback!=NULL)
    1a4e:	80 91 7e 00 	lds	r24, 0x007E
    1a52:	90 91 7f 00 	lds	r25, 0x007F
    1a56:	00 97       	sbiw	r24, 0x00	; 0
    1a58:	49 f0       	breq	.+18     	; 0x1a6c <__vector_16+0x6a>
	{
//		ADC_Callback();
		ADC_Callback_2(ADC);
    1a5a:	e0 91 7c 00 	lds	r30, 0x007C
    1a5e:	f0 91 7d 00 	lds	r31, 0x007D
    1a62:	a4 e2       	ldi	r26, 0x24	; 36
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	8d 91       	ld	r24, X+
    1a68:	9c 91       	ld	r25, X
    1a6a:	09 95       	icall

	}
	xADCFlag =UP;
    1a6c:	10 92 68 00 	sts	0x0068, r1


}
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	ff 91       	pop	r31
    1a76:	ef 91       	pop	r30
    1a78:	bf 91       	pop	r27
    1a7a:	af 91       	pop	r26
    1a7c:	9f 91       	pop	r25
    1a7e:	8f 91       	pop	r24
    1a80:	7f 91       	pop	r23
    1a82:	6f 91       	pop	r22
    1a84:	5f 91       	pop	r21
    1a86:	4f 91       	pop	r20
    1a88:	3f 91       	pop	r19
    1a8a:	2f 91       	pop	r18
    1a8c:	0f 90       	pop	r0
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	0f 90       	pop	r0
    1a92:	1f 90       	pop	r1
    1a94:	18 95       	reti

00001a96 <HLCD_vSendCommand>:




void HLCD_vSendCommand(u8 A_u8Comand)
{
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    1a9e:	6d 97       	sbiw	r28, 0x1d	; 29
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	f8 94       	cli
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	cd bf       	out	0x3d, r28	; 61
    1aaa:	8d 8f       	std	Y+29, r24	; 0x1d

	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RS_PIN , DIO_LOW);
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	60 e0       	ldi	r22, 0x00	; 0
    1ab0:	40 e0       	ldi	r20, 0x00	; 0
    1ab2:	0e 94 9c 09 	call	0x1338	; 0x1338 <MDIO_vSetPinVal>
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RW_PIN , DIO_LOW);
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	61 e0       	ldi	r22, 0x01	; 1
    1aba:	40 e0       	ldi	r20, 0x00	; 0
    1abc:	0e 94 9c 09 	call	0x1338	; 0x1338 <MDIO_vSetPinVal>
	MDIO_vSetPortVal(LCD_DATA_PORT , A_u8Comand);
    1ac0:	82 e0       	ldi	r24, 0x02	; 2
    1ac2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ac4:	0e 94 57 0b 	call	0x16ae	; 0x16ae <MDIO_vSetPortVal>

	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_EN_PIN , DIO_HIGH);
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	62 e0       	ldi	r22, 0x02	; 2
    1acc:	41 e0       	ldi	r20, 0x01	; 1
    1ace:	0e 94 9c 09 	call	0x1338	; 0x1338 <MDIO_vSetPinVal>
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	a0 e8       	ldi	r26, 0x80	; 128
    1ad8:	bf e3       	ldi	r27, 0x3F	; 63
    1ada:	89 8f       	std	Y+25, r24	; 0x19
    1adc:	9a 8f       	std	Y+26, r25	; 0x1a
    1ade:	ab 8f       	std	Y+27, r26	; 0x1b
    1ae0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ae4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ae6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ae8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	4a ef       	ldi	r20, 0xFA	; 250
    1af0:	54 e4       	ldi	r21, 0x44	; 68
    1af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	8d 8b       	std	Y+21, r24	; 0x15
    1afc:	9e 8b       	std	Y+22, r25	; 0x16
    1afe:	af 8b       	std	Y+23, r26	; 0x17
    1b00:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b02:	6d 89       	ldd	r22, Y+21	; 0x15
    1b04:	7e 89       	ldd	r23, Y+22	; 0x16
    1b06:	8f 89       	ldd	r24, Y+23	; 0x17
    1b08:	98 8d       	ldd	r25, Y+24	; 0x18
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	40 e8       	ldi	r20, 0x80	; 128
    1b10:	5f e3       	ldi	r21, 0x3F	; 63
    1b12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b16:	88 23       	and	r24, r24
    1b18:	2c f4       	brge	.+10     	; 0x1b24 <HLCD_vSendCommand+0x8e>
		__ticks = 1;
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	9c 8b       	std	Y+20, r25	; 0x14
    1b20:	8b 8b       	std	Y+19, r24	; 0x13
    1b22:	3f c0       	rjmp	.+126    	; 0x1ba2 <HLCD_vSendCommand+0x10c>
	else if (__tmp > 65535)
    1b24:	6d 89       	ldd	r22, Y+21	; 0x15
    1b26:	7e 89       	ldd	r23, Y+22	; 0x16
    1b28:	8f 89       	ldd	r24, Y+23	; 0x17
    1b2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	3f ef       	ldi	r19, 0xFF	; 255
    1b30:	4f e7       	ldi	r20, 0x7F	; 127
    1b32:	57 e4       	ldi	r21, 0x47	; 71
    1b34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b38:	18 16       	cp	r1, r24
    1b3a:	4c f5       	brge	.+82     	; 0x1b8e <HLCD_vSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b3c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	40 e2       	ldi	r20, 0x20	; 32
    1b4a:	51 e4       	ldi	r21, 0x41	; 65
    1b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	bc 01       	movw	r22, r24
    1b56:	cd 01       	movw	r24, r26
    1b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	9c 8b       	std	Y+20, r25	; 0x14
    1b62:	8b 8b       	std	Y+19, r24	; 0x13
    1b64:	0f c0       	rjmp	.+30     	; 0x1b84 <HLCD_vSendCommand+0xee>
    1b66:	88 ec       	ldi	r24, 0xC8	; 200
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	9a 8b       	std	Y+18, r25	; 0x12
    1b6c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b6e:	89 89       	ldd	r24, Y+17	; 0x11
    1b70:	9a 89       	ldd	r25, Y+18	; 0x12
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <HLCD_vSendCommand+0xdc>
    1b76:	9a 8b       	std	Y+18, r25	; 0x12
    1b78:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b7c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	9c 8b       	std	Y+20, r25	; 0x14
    1b82:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b84:	8b 89       	ldd	r24, Y+19	; 0x13
    1b86:	9c 89       	ldd	r25, Y+20	; 0x14
    1b88:	00 97       	sbiw	r24, 0x00	; 0
    1b8a:	69 f7       	brne	.-38     	; 0x1b66 <HLCD_vSendCommand+0xd0>
    1b8c:	14 c0       	rjmp	.+40     	; 0x1bb6 <HLCD_vSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b8e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b90:	7e 89       	ldd	r23, Y+22	; 0x16
    1b92:	8f 89       	ldd	r24, Y+23	; 0x17
    1b94:	98 8d       	ldd	r25, Y+24	; 0x18
    1b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	9c 8b       	std	Y+20, r25	; 0x14
    1ba0:	8b 8b       	std	Y+19, r24	; 0x13
    1ba2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba6:	98 8b       	std	Y+16, r25	; 0x10
    1ba8:	8f 87       	std	Y+15, r24	; 0x0f
    1baa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bac:	98 89       	ldd	r25, Y+16	; 0x10
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	f1 f7       	brne	.-4      	; 0x1bae <HLCD_vSendCommand+0x118>
    1bb2:	98 8b       	std	Y+16, r25	; 0x10
    1bb4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_EN_PIN , DIO_LOW);
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	62 e0       	ldi	r22, 0x02	; 2
    1bba:	40 e0       	ldi	r20, 0x00	; 0
    1bbc:	0e 94 9c 09 	call	0x1338	; 0x1338 <MDIO_vSetPinVal>
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	a0 e8       	ldi	r26, 0x80	; 128
    1bc6:	bf e3       	ldi	r27, 0x3F	; 63
    1bc8:	8b 87       	std	Y+11, r24	; 0x0b
    1bca:	9c 87       	std	Y+12, r25	; 0x0c
    1bcc:	ad 87       	std	Y+13, r26	; 0x0d
    1bce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	4a ef       	ldi	r20, 0xFA	; 250
    1bde:	54 e4       	ldi	r21, 0x44	; 68
    1be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	8f 83       	std	Y+7, r24	; 0x07
    1bea:	98 87       	std	Y+8, r25	; 0x08
    1bec:	a9 87       	std	Y+9, r26	; 0x09
    1bee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bf0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf2:	78 85       	ldd	r23, Y+8	; 0x08
    1bf4:	89 85       	ldd	r24, Y+9	; 0x09
    1bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e8       	ldi	r20, 0x80	; 128
    1bfe:	5f e3       	ldi	r21, 0x3F	; 63
    1c00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c04:	88 23       	and	r24, r24
    1c06:	2c f4       	brge	.+10     	; 0x1c12 <HLCD_vSendCommand+0x17c>
		__ticks = 1;
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	9e 83       	std	Y+6, r25	; 0x06
    1c0e:	8d 83       	std	Y+5, r24	; 0x05
    1c10:	3f c0       	rjmp	.+126    	; 0x1c90 <HLCD_vSendCommand+0x1fa>
	else if (__tmp > 65535)
    1c12:	6f 81       	ldd	r22, Y+7	; 0x07
    1c14:	78 85       	ldd	r23, Y+8	; 0x08
    1c16:	89 85       	ldd	r24, Y+9	; 0x09
    1c18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	3f ef       	ldi	r19, 0xFF	; 255
    1c1e:	4f e7       	ldi	r20, 0x7F	; 127
    1c20:	57 e4       	ldi	r21, 0x47	; 71
    1c22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c26:	18 16       	cp	r1, r24
    1c28:	4c f5       	brge	.+82     	; 0x1c7c <HLCD_vSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	40 e2       	ldi	r20, 0x20	; 32
    1c38:	51 e4       	ldi	r21, 0x41	; 65
    1c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	bc 01       	movw	r22, r24
    1c44:	cd 01       	movw	r24, r26
    1c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	9e 83       	std	Y+6, r25	; 0x06
    1c50:	8d 83       	std	Y+5, r24	; 0x05
    1c52:	0f c0       	rjmp	.+30     	; 0x1c72 <HLCD_vSendCommand+0x1dc>
    1c54:	88 ec       	ldi	r24, 0xC8	; 200
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	9c 83       	std	Y+4, r25	; 0x04
    1c5a:	8b 83       	std	Y+3, r24	; 0x03
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <HLCD_vSendCommand+0x1ca>
    1c64:	9c 83       	std	Y+4, r25	; 0x04
    1c66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c68:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	9e 83       	std	Y+6, r25	; 0x06
    1c70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c72:	8d 81       	ldd	r24, Y+5	; 0x05
    1c74:	9e 81       	ldd	r25, Y+6	; 0x06
    1c76:	00 97       	sbiw	r24, 0x00	; 0
    1c78:	69 f7       	brne	.-38     	; 0x1c54 <HLCD_vSendCommand+0x1be>
    1c7a:	14 c0       	rjmp	.+40     	; 0x1ca4 <HLCD_vSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7e:	78 85       	ldd	r23, Y+8	; 0x08
    1c80:	89 85       	ldd	r24, Y+9	; 0x09
    1c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	9e 83       	std	Y+6, r25	; 0x06
    1c8e:	8d 83       	std	Y+5, r24	; 0x05
    1c90:	8d 81       	ldd	r24, Y+5	; 0x05
    1c92:	9e 81       	ldd	r25, Y+6	; 0x06
    1c94:	9a 83       	std	Y+2, r25	; 0x02
    1c96:	89 83       	std	Y+1, r24	; 0x01
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
    1c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	f1 f7       	brne	.-4      	; 0x1c9c <HLCD_vSendCommand+0x206>
    1ca0:	9a 83       	std	Y+2, r25	; 0x02
    1ca2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    1ca4:	6d 96       	adiw	r28, 0x1d	; 29
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	f8 94       	cli
    1caa:	de bf       	out	0x3e, r29	; 62
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	cd bf       	out	0x3d, r28	; 61
    1cb0:	cf 91       	pop	r28
    1cb2:	df 91       	pop	r29
    1cb4:	08 95       	ret

00001cb6 <HLCD_vSendChar>:

void HLCD_vSendChar(u8 A_u8Char)
{
    1cb6:	df 93       	push	r29
    1cb8:	cf 93       	push	r28
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	6d 97       	sbiw	r28, 0x1d	; 29
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	cd bf       	out	0x3d, r28	; 61
    1cca:	8d 8f       	std	Y+29, r24	; 0x1d

	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RS_PIN , DIO_HIGH);
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	60 e0       	ldi	r22, 0x00	; 0
    1cd0:	41 e0       	ldi	r20, 0x01	; 1
    1cd2:	0e 94 9c 09 	call	0x1338	; 0x1338 <MDIO_vSetPinVal>
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RW_PIN , DIO_LOW);
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	61 e0       	ldi	r22, 0x01	; 1
    1cda:	40 e0       	ldi	r20, 0x00	; 0
    1cdc:	0e 94 9c 09 	call	0x1338	; 0x1338 <MDIO_vSetPinVal>
	MDIO_vSetPortVal(LCD_DATA_PORT , A_u8Char);
    1ce0:	82 e0       	ldi	r24, 0x02	; 2
    1ce2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ce4:	0e 94 57 0b 	call	0x16ae	; 0x16ae <MDIO_vSetPortVal>

	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_EN_PIN , DIO_HIGH);
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	62 e0       	ldi	r22, 0x02	; 2
    1cec:	41 e0       	ldi	r20, 0x01	; 1
    1cee:	0e 94 9c 09 	call	0x1338	; 0x1338 <MDIO_vSetPinVal>
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	a0 e8       	ldi	r26, 0x80	; 128
    1cf8:	bf e3       	ldi	r27, 0x3F	; 63
    1cfa:	89 8f       	std	Y+25, r24	; 0x19
    1cfc:	9a 8f       	std	Y+26, r25	; 0x1a
    1cfe:	ab 8f       	std	Y+27, r26	; 0x1b
    1d00:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d02:	69 8d       	ldd	r22, Y+25	; 0x19
    1d04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	4a ef       	ldi	r20, 0xFA	; 250
    1d10:	54 e4       	ldi	r21, 0x44	; 68
    1d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	8d 8b       	std	Y+21, r24	; 0x15
    1d1c:	9e 8b       	std	Y+22, r25	; 0x16
    1d1e:	af 8b       	std	Y+23, r26	; 0x17
    1d20:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d22:	6d 89       	ldd	r22, Y+21	; 0x15
    1d24:	7e 89       	ldd	r23, Y+22	; 0x16
    1d26:	8f 89       	ldd	r24, Y+23	; 0x17
    1d28:	98 8d       	ldd	r25, Y+24	; 0x18
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	40 e8       	ldi	r20, 0x80	; 128
    1d30:	5f e3       	ldi	r21, 0x3F	; 63
    1d32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d36:	88 23       	and	r24, r24
    1d38:	2c f4       	brge	.+10     	; 0x1d44 <HLCD_vSendChar+0x8e>
		__ticks = 1;
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	9c 8b       	std	Y+20, r25	; 0x14
    1d40:	8b 8b       	std	Y+19, r24	; 0x13
    1d42:	3f c0       	rjmp	.+126    	; 0x1dc2 <HLCD_vSendChar+0x10c>
	else if (__tmp > 65535)
    1d44:	6d 89       	ldd	r22, Y+21	; 0x15
    1d46:	7e 89       	ldd	r23, Y+22	; 0x16
    1d48:	8f 89       	ldd	r24, Y+23	; 0x17
    1d4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	3f ef       	ldi	r19, 0xFF	; 255
    1d50:	4f e7       	ldi	r20, 0x7F	; 127
    1d52:	57 e4       	ldi	r21, 0x47	; 71
    1d54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d58:	18 16       	cp	r1, r24
    1d5a:	4c f5       	brge	.+82     	; 0x1dae <HLCD_vSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d5c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e2       	ldi	r20, 0x20	; 32
    1d6a:	51 e4       	ldi	r21, 0x41	; 65
    1d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	bc 01       	movw	r22, r24
    1d76:	cd 01       	movw	r24, r26
    1d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	9c 8b       	std	Y+20, r25	; 0x14
    1d82:	8b 8b       	std	Y+19, r24	; 0x13
    1d84:	0f c0       	rjmp	.+30     	; 0x1da4 <HLCD_vSendChar+0xee>
    1d86:	88 ec       	ldi	r24, 0xC8	; 200
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	9a 8b       	std	Y+18, r25	; 0x12
    1d8c:	89 8b       	std	Y+17, r24	; 0x11
    1d8e:	89 89       	ldd	r24, Y+17	; 0x11
    1d90:	9a 89       	ldd	r25, Y+18	; 0x12
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <HLCD_vSendChar+0xdc>
    1d96:	9a 8b       	std	Y+18, r25	; 0x12
    1d98:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	9c 8b       	std	Y+20, r25	; 0x14
    1da2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da4:	8b 89       	ldd	r24, Y+19	; 0x13
    1da6:	9c 89       	ldd	r25, Y+20	; 0x14
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	69 f7       	brne	.-38     	; 0x1d86 <HLCD_vSendChar+0xd0>
    1dac:	14 c0       	rjmp	.+40     	; 0x1dd6 <HLCD_vSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dae:	6d 89       	ldd	r22, Y+21	; 0x15
    1db0:	7e 89       	ldd	r23, Y+22	; 0x16
    1db2:	8f 89       	ldd	r24, Y+23	; 0x17
    1db4:	98 8d       	ldd	r25, Y+24	; 0x18
    1db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	9c 8b       	std	Y+20, r25	; 0x14
    1dc0:	8b 8b       	std	Y+19, r24	; 0x13
    1dc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1dc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1dc6:	98 8b       	std	Y+16, r25	; 0x10
    1dc8:	8f 87       	std	Y+15, r24	; 0x0f
    1dca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dcc:	98 89       	ldd	r25, Y+16	; 0x10
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	f1 f7       	brne	.-4      	; 0x1dce <HLCD_vSendChar+0x118>
    1dd2:	98 8b       	std	Y+16, r25	; 0x10
    1dd4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_EN_PIN , DIO_LOW);
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	62 e0       	ldi	r22, 0x02	; 2
    1dda:	40 e0       	ldi	r20, 0x00	; 0
    1ddc:	0e 94 9c 09 	call	0x1338	; 0x1338 <MDIO_vSetPinVal>
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	a0 e8       	ldi	r26, 0x80	; 128
    1de6:	bf e3       	ldi	r27, 0x3F	; 63
    1de8:	8b 87       	std	Y+11, r24	; 0x0b
    1dea:	9c 87       	std	Y+12, r25	; 0x0c
    1dec:	ad 87       	std	Y+13, r26	; 0x0d
    1dee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	4a ef       	ldi	r20, 0xFA	; 250
    1dfe:	54 e4       	ldi	r21, 0x44	; 68
    1e00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	8f 83       	std	Y+7, r24	; 0x07
    1e0a:	98 87       	std	Y+8, r25	; 0x08
    1e0c:	a9 87       	std	Y+9, r26	; 0x09
    1e0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e10:	6f 81       	ldd	r22, Y+7	; 0x07
    1e12:	78 85       	ldd	r23, Y+8	; 0x08
    1e14:	89 85       	ldd	r24, Y+9	; 0x09
    1e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	40 e8       	ldi	r20, 0x80	; 128
    1e1e:	5f e3       	ldi	r21, 0x3F	; 63
    1e20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e24:	88 23       	and	r24, r24
    1e26:	2c f4       	brge	.+10     	; 0x1e32 <HLCD_vSendChar+0x17c>
		__ticks = 1;
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	9e 83       	std	Y+6, r25	; 0x06
    1e2e:	8d 83       	std	Y+5, r24	; 0x05
    1e30:	3f c0       	rjmp	.+126    	; 0x1eb0 <HLCD_vSendChar+0x1fa>
	else if (__tmp > 65535)
    1e32:	6f 81       	ldd	r22, Y+7	; 0x07
    1e34:	78 85       	ldd	r23, Y+8	; 0x08
    1e36:	89 85       	ldd	r24, Y+9	; 0x09
    1e38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	3f ef       	ldi	r19, 0xFF	; 255
    1e3e:	4f e7       	ldi	r20, 0x7F	; 127
    1e40:	57 e4       	ldi	r21, 0x47	; 71
    1e42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e46:	18 16       	cp	r1, r24
    1e48:	4c f5       	brge	.+82     	; 0x1e9c <HLCD_vSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	40 e2       	ldi	r20, 0x20	; 32
    1e58:	51 e4       	ldi	r21, 0x41	; 65
    1e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	bc 01       	movw	r22, r24
    1e64:	cd 01       	movw	r24, r26
    1e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	9e 83       	std	Y+6, r25	; 0x06
    1e70:	8d 83       	std	Y+5, r24	; 0x05
    1e72:	0f c0       	rjmp	.+30     	; 0x1e92 <HLCD_vSendChar+0x1dc>
    1e74:	88 ec       	ldi	r24, 0xC8	; 200
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	9c 83       	std	Y+4, r25	; 0x04
    1e7a:	8b 83       	std	Y+3, r24	; 0x03
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <HLCD_vSendChar+0x1ca>
    1e84:	9c 83       	std	Y+4, r25	; 0x04
    1e86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e88:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	9e 83       	std	Y+6, r25	; 0x06
    1e90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e92:	8d 81       	ldd	r24, Y+5	; 0x05
    1e94:	9e 81       	ldd	r25, Y+6	; 0x06
    1e96:	00 97       	sbiw	r24, 0x00	; 0
    1e98:	69 f7       	brne	.-38     	; 0x1e74 <HLCD_vSendChar+0x1be>
    1e9a:	14 c0       	rjmp	.+40     	; 0x1ec4 <HLCD_vSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9e:	78 85       	ldd	r23, Y+8	; 0x08
    1ea0:	89 85       	ldd	r24, Y+9	; 0x09
    1ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	9e 83       	std	Y+6, r25	; 0x06
    1eae:	8d 83       	std	Y+5, r24	; 0x05
    1eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb4:	9a 83       	std	Y+2, r25	; 0x02
    1eb6:	89 83       	std	Y+1, r24	; 0x01
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	9a 81       	ldd	r25, Y+2	; 0x02
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	f1 f7       	brne	.-4      	; 0x1ebc <HLCD_vSendChar+0x206>
    1ec0:	9a 83       	std	Y+2, r25	; 0x02
    1ec2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);


}
    1ec4:	6d 96       	adiw	r28, 0x1d	; 29
    1ec6:	0f b6       	in	r0, 0x3f	; 63
    1ec8:	f8 94       	cli
    1eca:	de bf       	out	0x3e, r29	; 62
    1ecc:	0f be       	out	0x3f, r0	; 63
    1ece:	cd bf       	out	0x3d, r28	; 61
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	08 95       	ret

00001ed6 <HLCD_vInit>:
void HLCD_vInit(void)
{
    1ed6:	0f 93       	push	r16
    1ed8:	1f 93       	push	r17
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
    1ee2:	c6 54       	subi	r28, 0x46	; 70
    1ee4:	d0 40       	sbci	r29, 0x00	; 0
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	f8 94       	cli
    1eea:	de bf       	out	0x3e, r29	; 62
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	cd bf       	out	0x3d, r28	; 61

	//set pin direction
	MDIO_vSetPortDIR(LCD_DATA_PORT , 0XFF);
    1ef0:	82 e0       	ldi	r24, 0x02	; 2
    1ef2:	6f ef       	ldi	r22, 0xFF	; 255
    1ef4:	0e 94 16 0b 	call	0x162c	; 0x162c <MDIO_vSetPortDIR>
	MDIO_vSetPinDIR(LCD_CTRL_PORT,LCD_RS_PIN,DIO_OUTPUT);
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	60 e0       	ldi	r22, 0x00	; 0
    1efc:	41 e0       	ldi	r20, 0x01	; 1
    1efe:	0e 94 97 08 	call	0x112e	; 0x112e <MDIO_vSetPinDIR>
	MDIO_vSetPinDIR(LCD_CTRL_PORT,LCD_RW_PIN,DIO_OUTPUT);
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	61 e0       	ldi	r22, 0x01	; 1
    1f06:	41 e0       	ldi	r20, 0x01	; 1
    1f08:	0e 94 97 08 	call	0x112e	; 0x112e <MDIO_vSetPinDIR>
	MDIO_vSetPinDIR(LCD_CTRL_PORT,LCD_EN_PIN,DIO_OUTPUT);
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	62 e0       	ldi	r22, 0x02	; 2
    1f10:	41 e0       	ldi	r20, 0x01	; 1
    1f12:	0e 94 97 08 	call	0x112e	; 0x112e <MDIO_vSetPinDIR>
    1f16:	fe 01       	movw	r30, r28
    1f18:	ed 5b       	subi	r30, 0xBD	; 189
    1f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	a8 e4       	ldi	r26, 0x48	; 72
    1f22:	b2 e4       	ldi	r27, 0x42	; 66
    1f24:	80 83       	st	Z, r24
    1f26:	91 83       	std	Z+1, r25	; 0x01
    1f28:	a2 83       	std	Z+2, r26	; 0x02
    1f2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2c:	8e 01       	movw	r16, r28
    1f2e:	01 5c       	subi	r16, 0xC1	; 193
    1f30:	1f 4f       	sbci	r17, 0xFF	; 255
    1f32:	fe 01       	movw	r30, r28
    1f34:	ed 5b       	subi	r30, 0xBD	; 189
    1f36:	ff 4f       	sbci	r31, 0xFF	; 255
    1f38:	60 81       	ld	r22, Z
    1f3a:	71 81       	ldd	r23, Z+1	; 0x01
    1f3c:	82 81       	ldd	r24, Z+2	; 0x02
    1f3e:	93 81       	ldd	r25, Z+3	; 0x03
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	4a ef       	ldi	r20, 0xFA	; 250
    1f46:	54 e4       	ldi	r21, 0x44	; 68
    1f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	f8 01       	movw	r30, r16
    1f52:	80 83       	st	Z, r24
    1f54:	91 83       	std	Z+1, r25	; 0x01
    1f56:	a2 83       	std	Z+2, r26	; 0x02
    1f58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	ff 96       	adiw	r30, 0x3f	; 63
    1f5e:	60 81       	ld	r22, Z
    1f60:	71 81       	ldd	r23, Z+1	; 0x01
    1f62:	82 81       	ldd	r24, Z+2	; 0x02
    1f64:	93 81       	ldd	r25, Z+3	; 0x03
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	40 e8       	ldi	r20, 0x80	; 128
    1f6c:	5f e3       	ldi	r21, 0x3F	; 63
    1f6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f72:	88 23       	and	r24, r24
    1f74:	2c f4       	brge	.+10     	; 0x1f80 <HLCD_vInit+0xaa>
		__ticks = 1;
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	9e af       	std	Y+62, r25	; 0x3e
    1f7c:	8d af       	std	Y+61, r24	; 0x3d
    1f7e:	46 c0       	rjmp	.+140    	; 0x200c <HLCD_vInit+0x136>
	else if (__tmp > 65535)
    1f80:	fe 01       	movw	r30, r28
    1f82:	ff 96       	adiw	r30, 0x3f	; 63
    1f84:	60 81       	ld	r22, Z
    1f86:	71 81       	ldd	r23, Z+1	; 0x01
    1f88:	82 81       	ldd	r24, Z+2	; 0x02
    1f8a:	93 81       	ldd	r25, Z+3	; 0x03
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	3f ef       	ldi	r19, 0xFF	; 255
    1f90:	4f e7       	ldi	r20, 0x7F	; 127
    1f92:	57 e4       	ldi	r21, 0x47	; 71
    1f94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f98:	18 16       	cp	r1, r24
    1f9a:	64 f5       	brge	.+88     	; 0x1ff4 <HLCD_vInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	ed 5b       	subi	r30, 0xBD	; 189
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	60 81       	ld	r22, Z
    1fa4:	71 81       	ldd	r23, Z+1	; 0x01
    1fa6:	82 81       	ldd	r24, Z+2	; 0x02
    1fa8:	93 81       	ldd	r25, Z+3	; 0x03
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	40 e2       	ldi	r20, 0x20	; 32
    1fb0:	51 e4       	ldi	r21, 0x41	; 65
    1fb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	bc 01       	movw	r22, r24
    1fbc:	cd 01       	movw	r24, r26
    1fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	9e af       	std	Y+62, r25	; 0x3e
    1fc8:	8d af       	std	Y+61, r24	; 0x3d
    1fca:	0f c0       	rjmp	.+30     	; 0x1fea <HLCD_vInit+0x114>
    1fcc:	88 ec       	ldi	r24, 0xC8	; 200
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	9c af       	std	Y+60, r25	; 0x3c
    1fd2:	8b af       	std	Y+59, r24	; 0x3b
    1fd4:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fd6:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fd8:	01 97       	sbiw	r24, 0x01	; 1
    1fda:	f1 f7       	brne	.-4      	; 0x1fd8 <HLCD_vInit+0x102>
    1fdc:	9c af       	std	Y+60, r25	; 0x3c
    1fde:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fe2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	9e af       	std	Y+62, r25	; 0x3e
    1fe8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fea:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fec:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fee:	00 97       	sbiw	r24, 0x00	; 0
    1ff0:	69 f7       	brne	.-38     	; 0x1fcc <HLCD_vInit+0xf6>
    1ff2:	16 c0       	rjmp	.+44     	; 0x2020 <HLCD_vInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	ff 96       	adiw	r30, 0x3f	; 63
    1ff8:	60 81       	ld	r22, Z
    1ffa:	71 81       	ldd	r23, Z+1	; 0x01
    1ffc:	82 81       	ldd	r24, Z+2	; 0x02
    1ffe:	93 81       	ldd	r25, Z+3	; 0x03
    2000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	9e af       	std	Y+62, r25	; 0x3e
    200a:	8d af       	std	Y+61, r24	; 0x3d
    200c:	8d ad       	ldd	r24, Y+61	; 0x3d
    200e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2010:	9a af       	std	Y+58, r25	; 0x3a
    2012:	89 af       	std	Y+57, r24	; 0x39
    2014:	89 ad       	ldd	r24, Y+57	; 0x39
    2016:	9a ad       	ldd	r25, Y+58	; 0x3a
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	f1 f7       	brne	.-4      	; 0x2018 <HLCD_vInit+0x142>
    201c:	9a af       	std	Y+58, r25	; 0x3a
    201e:	89 af       	std	Y+57, r24	; 0x39

	//start init sequance

	_delay_ms(50);
	HLCD_vSendCommand(0b00111000);
    2020:	88 e3       	ldi	r24, 0x38	; 56
    2022:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <HLCD_vSendCommand>
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	a0 e8       	ldi	r26, 0x80	; 128
    202c:	bf e3       	ldi	r27, 0x3F	; 63
    202e:	8d ab       	std	Y+53, r24	; 0x35
    2030:	9e ab       	std	Y+54, r25	; 0x36
    2032:	af ab       	std	Y+55, r26	; 0x37
    2034:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2036:	6d a9       	ldd	r22, Y+53	; 0x35
    2038:	7e a9       	ldd	r23, Y+54	; 0x36
    203a:	8f a9       	ldd	r24, Y+55	; 0x37
    203c:	98 ad       	ldd	r25, Y+56	; 0x38
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	4a ef       	ldi	r20, 0xFA	; 250
    2044:	54 e4       	ldi	r21, 0x44	; 68
    2046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	89 ab       	std	Y+49, r24	; 0x31
    2050:	9a ab       	std	Y+50, r25	; 0x32
    2052:	ab ab       	std	Y+51, r26	; 0x33
    2054:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2056:	69 a9       	ldd	r22, Y+49	; 0x31
    2058:	7a a9       	ldd	r23, Y+50	; 0x32
    205a:	8b a9       	ldd	r24, Y+51	; 0x33
    205c:	9c a9       	ldd	r25, Y+52	; 0x34
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	40 e8       	ldi	r20, 0x80	; 128
    2064:	5f e3       	ldi	r21, 0x3F	; 63
    2066:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    206a:	88 23       	and	r24, r24
    206c:	2c f4       	brge	.+10     	; 0x2078 <HLCD_vInit+0x1a2>
		__ticks = 1;
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	98 ab       	std	Y+48, r25	; 0x30
    2074:	8f a7       	std	Y+47, r24	; 0x2f
    2076:	3f c0       	rjmp	.+126    	; 0x20f6 <HLCD_vInit+0x220>
	else if (__tmp > 65535)
    2078:	69 a9       	ldd	r22, Y+49	; 0x31
    207a:	7a a9       	ldd	r23, Y+50	; 0x32
    207c:	8b a9       	ldd	r24, Y+51	; 0x33
    207e:	9c a9       	ldd	r25, Y+52	; 0x34
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	3f ef       	ldi	r19, 0xFF	; 255
    2084:	4f e7       	ldi	r20, 0x7F	; 127
    2086:	57 e4       	ldi	r21, 0x47	; 71
    2088:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    208c:	18 16       	cp	r1, r24
    208e:	4c f5       	brge	.+82     	; 0x20e2 <HLCD_vInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2090:	6d a9       	ldd	r22, Y+53	; 0x35
    2092:	7e a9       	ldd	r23, Y+54	; 0x36
    2094:	8f a9       	ldd	r24, Y+55	; 0x37
    2096:	98 ad       	ldd	r25, Y+56	; 0x38
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	40 e2       	ldi	r20, 0x20	; 32
    209e:	51 e4       	ldi	r21, 0x41	; 65
    20a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	bc 01       	movw	r22, r24
    20aa:	cd 01       	movw	r24, r26
    20ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	98 ab       	std	Y+48, r25	; 0x30
    20b6:	8f a7       	std	Y+47, r24	; 0x2f
    20b8:	0f c0       	rjmp	.+30     	; 0x20d8 <HLCD_vInit+0x202>
    20ba:	88 ec       	ldi	r24, 0xC8	; 200
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	9e a7       	std	Y+46, r25	; 0x2e
    20c0:	8d a7       	std	Y+45, r24	; 0x2d
    20c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    20c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	f1 f7       	brne	.-4      	; 0x20c6 <HLCD_vInit+0x1f0>
    20ca:	9e a7       	std	Y+46, r25	; 0x2e
    20cc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    20d0:	98 a9       	ldd	r25, Y+48	; 0x30
    20d2:	01 97       	sbiw	r24, 0x01	; 1
    20d4:	98 ab       	std	Y+48, r25	; 0x30
    20d6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    20da:	98 a9       	ldd	r25, Y+48	; 0x30
    20dc:	00 97       	sbiw	r24, 0x00	; 0
    20de:	69 f7       	brne	.-38     	; 0x20ba <HLCD_vInit+0x1e4>
    20e0:	14 c0       	rjmp	.+40     	; 0x210a <HLCD_vInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e2:	69 a9       	ldd	r22, Y+49	; 0x31
    20e4:	7a a9       	ldd	r23, Y+50	; 0x32
    20e6:	8b a9       	ldd	r24, Y+51	; 0x33
    20e8:	9c a9       	ldd	r25, Y+52	; 0x34
    20ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	98 ab       	std	Y+48, r25	; 0x30
    20f4:	8f a7       	std	Y+47, r24	; 0x2f
    20f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    20f8:	98 a9       	ldd	r25, Y+48	; 0x30
    20fa:	9c a7       	std	Y+44, r25	; 0x2c
    20fc:	8b a7       	std	Y+43, r24	; 0x2b
    20fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2100:	9c a5       	ldd	r25, Y+44	; 0x2c
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	f1 f7       	brne	.-4      	; 0x2102 <HLCD_vInit+0x22c>
    2106:	9c a7       	std	Y+44, r25	; 0x2c
    2108:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	HLCD_vSendCommand(0b00001111);
    210a:	8f e0       	ldi	r24, 0x0F	; 15
    210c:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <HLCD_vSendCommand>
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	a0 e8       	ldi	r26, 0x80	; 128
    2116:	bf e3       	ldi	r27, 0x3F	; 63
    2118:	8f a3       	std	Y+39, r24	; 0x27
    211a:	98 a7       	std	Y+40, r25	; 0x28
    211c:	a9 a7       	std	Y+41, r26	; 0x29
    211e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2120:	6f a1       	ldd	r22, Y+39	; 0x27
    2122:	78 a5       	ldd	r23, Y+40	; 0x28
    2124:	89 a5       	ldd	r24, Y+41	; 0x29
    2126:	9a a5       	ldd	r25, Y+42	; 0x2a
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	4a ef       	ldi	r20, 0xFA	; 250
    212e:	54 e4       	ldi	r21, 0x44	; 68
    2130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	8b a3       	std	Y+35, r24	; 0x23
    213a:	9c a3       	std	Y+36, r25	; 0x24
    213c:	ad a3       	std	Y+37, r26	; 0x25
    213e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2140:	6b a1       	ldd	r22, Y+35	; 0x23
    2142:	7c a1       	ldd	r23, Y+36	; 0x24
    2144:	8d a1       	ldd	r24, Y+37	; 0x25
    2146:	9e a1       	ldd	r25, Y+38	; 0x26
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	40 e8       	ldi	r20, 0x80	; 128
    214e:	5f e3       	ldi	r21, 0x3F	; 63
    2150:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2154:	88 23       	and	r24, r24
    2156:	2c f4       	brge	.+10     	; 0x2162 <HLCD_vInit+0x28c>
		__ticks = 1;
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	9a a3       	std	Y+34, r25	; 0x22
    215e:	89 a3       	std	Y+33, r24	; 0x21
    2160:	3f c0       	rjmp	.+126    	; 0x21e0 <HLCD_vInit+0x30a>
	else if (__tmp > 65535)
    2162:	6b a1       	ldd	r22, Y+35	; 0x23
    2164:	7c a1       	ldd	r23, Y+36	; 0x24
    2166:	8d a1       	ldd	r24, Y+37	; 0x25
    2168:	9e a1       	ldd	r25, Y+38	; 0x26
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	3f ef       	ldi	r19, 0xFF	; 255
    216e:	4f e7       	ldi	r20, 0x7F	; 127
    2170:	57 e4       	ldi	r21, 0x47	; 71
    2172:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2176:	18 16       	cp	r1, r24
    2178:	4c f5       	brge	.+82     	; 0x21cc <HLCD_vInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217a:	6f a1       	ldd	r22, Y+39	; 0x27
    217c:	78 a5       	ldd	r23, Y+40	; 0x28
    217e:	89 a5       	ldd	r24, Y+41	; 0x29
    2180:	9a a5       	ldd	r25, Y+42	; 0x2a
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e2       	ldi	r20, 0x20	; 32
    2188:	51 e4       	ldi	r21, 0x41	; 65
    218a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	bc 01       	movw	r22, r24
    2194:	cd 01       	movw	r24, r26
    2196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	9a a3       	std	Y+34, r25	; 0x22
    21a0:	89 a3       	std	Y+33, r24	; 0x21
    21a2:	0f c0       	rjmp	.+30     	; 0x21c2 <HLCD_vInit+0x2ec>
    21a4:	88 ec       	ldi	r24, 0xC8	; 200
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	98 a3       	std	Y+32, r25	; 0x20
    21aa:	8f 8f       	std	Y+31, r24	; 0x1f
    21ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21ae:	98 a1       	ldd	r25, Y+32	; 0x20
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	f1 f7       	brne	.-4      	; 0x21b0 <HLCD_vInit+0x2da>
    21b4:	98 a3       	std	Y+32, r25	; 0x20
    21b6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b8:	89 a1       	ldd	r24, Y+33	; 0x21
    21ba:	9a a1       	ldd	r25, Y+34	; 0x22
    21bc:	01 97       	sbiw	r24, 0x01	; 1
    21be:	9a a3       	std	Y+34, r25	; 0x22
    21c0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c2:	89 a1       	ldd	r24, Y+33	; 0x21
    21c4:	9a a1       	ldd	r25, Y+34	; 0x22
    21c6:	00 97       	sbiw	r24, 0x00	; 0
    21c8:	69 f7       	brne	.-38     	; 0x21a4 <HLCD_vInit+0x2ce>
    21ca:	14 c0       	rjmp	.+40     	; 0x21f4 <HLCD_vInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21cc:	6b a1       	ldd	r22, Y+35	; 0x23
    21ce:	7c a1       	ldd	r23, Y+36	; 0x24
    21d0:	8d a1       	ldd	r24, Y+37	; 0x25
    21d2:	9e a1       	ldd	r25, Y+38	; 0x26
    21d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	9a a3       	std	Y+34, r25	; 0x22
    21de:	89 a3       	std	Y+33, r24	; 0x21
    21e0:	89 a1       	ldd	r24, Y+33	; 0x21
    21e2:	9a a1       	ldd	r25, Y+34	; 0x22
    21e4:	9e 8f       	std	Y+30, r25	; 0x1e
    21e6:	8d 8f       	std	Y+29, r24	; 0x1d
    21e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	f1 f7       	brne	.-4      	; 0x21ec <HLCD_vInit+0x316>
    21f0:	9e 8f       	std	Y+30, r25	; 0x1e
    21f2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	HLCD_vSendCommand(0b00000001);
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <HLCD_vSendCommand>
    21fa:	80 e0       	ldi	r24, 0x00	; 0
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	a0 e4       	ldi	r26, 0x40	; 64
    2200:	b0 e4       	ldi	r27, 0x40	; 64
    2202:	89 8f       	std	Y+25, r24	; 0x19
    2204:	9a 8f       	std	Y+26, r25	; 0x1a
    2206:	ab 8f       	std	Y+27, r26	; 0x1b
    2208:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220a:	69 8d       	ldd	r22, Y+25	; 0x19
    220c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    220e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2210:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	4a ef       	ldi	r20, 0xFA	; 250
    2218:	54 e4       	ldi	r21, 0x44	; 68
    221a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	8d 8b       	std	Y+21, r24	; 0x15
    2224:	9e 8b       	std	Y+22, r25	; 0x16
    2226:	af 8b       	std	Y+23, r26	; 0x17
    2228:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    222a:	6d 89       	ldd	r22, Y+21	; 0x15
    222c:	7e 89       	ldd	r23, Y+22	; 0x16
    222e:	8f 89       	ldd	r24, Y+23	; 0x17
    2230:	98 8d       	ldd	r25, Y+24	; 0x18
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	40 e8       	ldi	r20, 0x80	; 128
    2238:	5f e3       	ldi	r21, 0x3F	; 63
    223a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    223e:	88 23       	and	r24, r24
    2240:	2c f4       	brge	.+10     	; 0x224c <HLCD_vInit+0x376>
		__ticks = 1;
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	9c 8b       	std	Y+20, r25	; 0x14
    2248:	8b 8b       	std	Y+19, r24	; 0x13
    224a:	3f c0       	rjmp	.+126    	; 0x22ca <HLCD_vInit+0x3f4>
	else if (__tmp > 65535)
    224c:	6d 89       	ldd	r22, Y+21	; 0x15
    224e:	7e 89       	ldd	r23, Y+22	; 0x16
    2250:	8f 89       	ldd	r24, Y+23	; 0x17
    2252:	98 8d       	ldd	r25, Y+24	; 0x18
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	3f ef       	ldi	r19, 0xFF	; 255
    2258:	4f e7       	ldi	r20, 0x7F	; 127
    225a:	57 e4       	ldi	r21, 0x47	; 71
    225c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2260:	18 16       	cp	r1, r24
    2262:	4c f5       	brge	.+82     	; 0x22b6 <HLCD_vInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2264:	69 8d       	ldd	r22, Y+25	; 0x19
    2266:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2268:	8b 8d       	ldd	r24, Y+27	; 0x1b
    226a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	40 e2       	ldi	r20, 0x20	; 32
    2272:	51 e4       	ldi	r21, 0x41	; 65
    2274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	bc 01       	movw	r22, r24
    227e:	cd 01       	movw	r24, r26
    2280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	9c 8b       	std	Y+20, r25	; 0x14
    228a:	8b 8b       	std	Y+19, r24	; 0x13
    228c:	0f c0       	rjmp	.+30     	; 0x22ac <HLCD_vInit+0x3d6>
    228e:	88 ec       	ldi	r24, 0xC8	; 200
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	9a 8b       	std	Y+18, r25	; 0x12
    2294:	89 8b       	std	Y+17, r24	; 0x11
    2296:	89 89       	ldd	r24, Y+17	; 0x11
    2298:	9a 89       	ldd	r25, Y+18	; 0x12
    229a:	01 97       	sbiw	r24, 0x01	; 1
    229c:	f1 f7       	brne	.-4      	; 0x229a <HLCD_vInit+0x3c4>
    229e:	9a 8b       	std	Y+18, r25	; 0x12
    22a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a2:	8b 89       	ldd	r24, Y+19	; 0x13
    22a4:	9c 89       	ldd	r25, Y+20	; 0x14
    22a6:	01 97       	sbiw	r24, 0x01	; 1
    22a8:	9c 8b       	std	Y+20, r25	; 0x14
    22aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ac:	8b 89       	ldd	r24, Y+19	; 0x13
    22ae:	9c 89       	ldd	r25, Y+20	; 0x14
    22b0:	00 97       	sbiw	r24, 0x00	; 0
    22b2:	69 f7       	brne	.-38     	; 0x228e <HLCD_vInit+0x3b8>
    22b4:	14 c0       	rjmp	.+40     	; 0x22de <HLCD_vInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b6:	6d 89       	ldd	r22, Y+21	; 0x15
    22b8:	7e 89       	ldd	r23, Y+22	; 0x16
    22ba:	8f 89       	ldd	r24, Y+23	; 0x17
    22bc:	98 8d       	ldd	r25, Y+24	; 0x18
    22be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	9c 8b       	std	Y+20, r25	; 0x14
    22c8:	8b 8b       	std	Y+19, r24	; 0x13
    22ca:	8b 89       	ldd	r24, Y+19	; 0x13
    22cc:	9c 89       	ldd	r25, Y+20	; 0x14
    22ce:	98 8b       	std	Y+16, r25	; 0x10
    22d0:	8f 87       	std	Y+15, r24	; 0x0f
    22d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    22d4:	98 89       	ldd	r25, Y+16	; 0x10
    22d6:	01 97       	sbiw	r24, 0x01	; 1
    22d8:	f1 f7       	brne	.-4      	; 0x22d6 <HLCD_vInit+0x400>
    22da:	98 8b       	std	Y+16, r25	; 0x10
    22dc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3);
	HLCD_vSendCommand(0b00000110);
    22de:	86 e0       	ldi	r24, 0x06	; 6
    22e0:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <HLCD_vSendCommand>
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	a0 e8       	ldi	r26, 0x80	; 128
    22ea:	bf e3       	ldi	r27, 0x3F	; 63
    22ec:	8b 87       	std	Y+11, r24	; 0x0b
    22ee:	9c 87       	std	Y+12, r25	; 0x0c
    22f0:	ad 87       	std	Y+13, r26	; 0x0d
    22f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	4a ef       	ldi	r20, 0xFA	; 250
    2302:	54 e4       	ldi	r21, 0x44	; 68
    2304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	8f 83       	std	Y+7, r24	; 0x07
    230e:	98 87       	std	Y+8, r25	; 0x08
    2310:	a9 87       	std	Y+9, r26	; 0x09
    2312:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2314:	6f 81       	ldd	r22, Y+7	; 0x07
    2316:	78 85       	ldd	r23, Y+8	; 0x08
    2318:	89 85       	ldd	r24, Y+9	; 0x09
    231a:	9a 85       	ldd	r25, Y+10	; 0x0a
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	40 e8       	ldi	r20, 0x80	; 128
    2322:	5f e3       	ldi	r21, 0x3F	; 63
    2324:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2328:	88 23       	and	r24, r24
    232a:	2c f4       	brge	.+10     	; 0x2336 <HLCD_vInit+0x460>
		__ticks = 1;
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	9e 83       	std	Y+6, r25	; 0x06
    2332:	8d 83       	std	Y+5, r24	; 0x05
    2334:	3f c0       	rjmp	.+126    	; 0x23b4 <HLCD_vInit+0x4de>
	else if (__tmp > 65535)
    2336:	6f 81       	ldd	r22, Y+7	; 0x07
    2338:	78 85       	ldd	r23, Y+8	; 0x08
    233a:	89 85       	ldd	r24, Y+9	; 0x09
    233c:	9a 85       	ldd	r25, Y+10	; 0x0a
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	3f ef       	ldi	r19, 0xFF	; 255
    2342:	4f e7       	ldi	r20, 0x7F	; 127
    2344:	57 e4       	ldi	r21, 0x47	; 71
    2346:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    234a:	18 16       	cp	r1, r24
    234c:	4c f5       	brge	.+82     	; 0x23a0 <HLCD_vInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2350:	7c 85       	ldd	r23, Y+12	; 0x0c
    2352:	8d 85       	ldd	r24, Y+13	; 0x0d
    2354:	9e 85       	ldd	r25, Y+14	; 0x0e
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e2       	ldi	r20, 0x20	; 32
    235c:	51 e4       	ldi	r21, 0x41	; 65
    235e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	bc 01       	movw	r22, r24
    2368:	cd 01       	movw	r24, r26
    236a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	9e 83       	std	Y+6, r25	; 0x06
    2374:	8d 83       	std	Y+5, r24	; 0x05
    2376:	0f c0       	rjmp	.+30     	; 0x2396 <HLCD_vInit+0x4c0>
    2378:	88 ec       	ldi	r24, 0xC8	; 200
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	9c 83       	std	Y+4, r25	; 0x04
    237e:	8b 83       	std	Y+3, r24	; 0x03
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	9c 81       	ldd	r25, Y+4	; 0x04
    2384:	01 97       	sbiw	r24, 0x01	; 1
    2386:	f1 f7       	brne	.-4      	; 0x2384 <HLCD_vInit+0x4ae>
    2388:	9c 83       	std	Y+4, r25	; 0x04
    238a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238c:	8d 81       	ldd	r24, Y+5	; 0x05
    238e:	9e 81       	ldd	r25, Y+6	; 0x06
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	9e 83       	std	Y+6, r25	; 0x06
    2394:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2396:	8d 81       	ldd	r24, Y+5	; 0x05
    2398:	9e 81       	ldd	r25, Y+6	; 0x06
    239a:	00 97       	sbiw	r24, 0x00	; 0
    239c:	69 f7       	brne	.-38     	; 0x2378 <HLCD_vInit+0x4a2>
    239e:	14 c0       	rjmp	.+40     	; 0x23c8 <HLCD_vInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a0:	6f 81       	ldd	r22, Y+7	; 0x07
    23a2:	78 85       	ldd	r23, Y+8	; 0x08
    23a4:	89 85       	ldd	r24, Y+9	; 0x09
    23a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	9e 83       	std	Y+6, r25	; 0x06
    23b2:	8d 83       	std	Y+5, r24	; 0x05
    23b4:	8d 81       	ldd	r24, Y+5	; 0x05
    23b6:	9e 81       	ldd	r25, Y+6	; 0x06
    23b8:	9a 83       	std	Y+2, r25	; 0x02
    23ba:	89 83       	std	Y+1, r24	; 0x01
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	9a 81       	ldd	r25, Y+2	; 0x02
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	f1 f7       	brne	.-4      	; 0x23c0 <HLCD_vInit+0x4ea>
    23c4:	9a 83       	std	Y+2, r25	; 0x02
    23c6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    23c8:	ca 5b       	subi	r28, 0xBA	; 186
    23ca:	df 4f       	sbci	r29, 0xFF	; 255
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	f8 94       	cli
    23d0:	de bf       	out	0x3e, r29	; 62
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	cd bf       	out	0x3d, r28	; 61
    23d6:	cf 91       	pop	r28
    23d8:	df 91       	pop	r29
    23da:	1f 91       	pop	r17
    23dc:	0f 91       	pop	r16
    23de:	08 95       	ret

000023e0 <HLCD_vPrintString>:
void HLCD_vPrintString(u8 A_u8string[])
{
    23e0:	df 93       	push	r29
    23e2:	cf 93       	push	r28
    23e4:	00 d0       	rcall	.+0      	; 0x23e6 <HLCD_vPrintString+0x6>
    23e6:	0f 92       	push	r0
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
    23ec:	9b 83       	std	Y+3, r25	; 0x03
    23ee:	8a 83       	std	Y+2, r24	; 0x02

	for (u8 L_u8i =0 ; A_u8string[L_u8i] !='\0' ;L_u8i++)
    23f0:	19 82       	std	Y+1, r1	; 0x01
    23f2:	0e c0       	rjmp	.+28     	; 0x2410 <HLCD_vPrintString+0x30>
	{
		HLCD_vSendChar(A_u8string[L_u8i]);
    23f4:	89 81       	ldd	r24, Y+1	; 0x01
    23f6:	28 2f       	mov	r18, r24
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	8a 81       	ldd	r24, Y+2	; 0x02
    23fc:	9b 81       	ldd	r25, Y+3	; 0x03
    23fe:	fc 01       	movw	r30, r24
    2400:	e2 0f       	add	r30, r18
    2402:	f3 1f       	adc	r31, r19
    2404:	80 81       	ld	r24, Z
    2406:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <HLCD_vSendChar>

}
void HLCD_vPrintString(u8 A_u8string[])
{

	for (u8 L_u8i =0 ; A_u8string[L_u8i] !='\0' ;L_u8i++)
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	8f 5f       	subi	r24, 0xFF	; 255
    240e:	89 83       	std	Y+1, r24	; 0x01
    2410:	89 81       	ldd	r24, Y+1	; 0x01
    2412:	28 2f       	mov	r18, r24
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	8a 81       	ldd	r24, Y+2	; 0x02
    2418:	9b 81       	ldd	r25, Y+3	; 0x03
    241a:	fc 01       	movw	r30, r24
    241c:	e2 0f       	add	r30, r18
    241e:	f3 1f       	adc	r31, r19
    2420:	80 81       	ld	r24, Z
    2422:	88 23       	and	r24, r24
    2424:	39 f7       	brne	.-50     	; 0x23f4 <HLCD_vPrintString+0x14>
		HLCD_vSendChar(A_u8string[L_u8i]);

	}


}
    2426:	0f 90       	pop	r0
    2428:	0f 90       	pop	r0
    242a:	0f 90       	pop	r0
    242c:	cf 91       	pop	r28
    242e:	df 91       	pop	r29
    2430:	08 95       	ret

00002432 <HLCD_vPrintNumber>:

void HLCD_vPrintNumber(s32 A_s32Number)
{
    2432:	0f 93       	push	r16
    2434:	1f 93       	push	r17
    2436:	df 93       	push	r29
    2438:	cf 93       	push	r28
    243a:	cd b7       	in	r28, 0x3d	; 61
    243c:	de b7       	in	r29, 0x3e	; 62
    243e:	60 97       	sbiw	r28, 0x10	; 16
    2440:	0f b6       	in	r0, 0x3f	; 63
    2442:	f8 94       	cli
    2444:	de bf       	out	0x3e, r29	; 62
    2446:	0f be       	out	0x3f, r0	; 63
    2448:	cd bf       	out	0x3d, r28	; 61
    244a:	6d 87       	std	Y+13, r22	; 0x0d
    244c:	7e 87       	std	Y+14, r23	; 0x0e
    244e:	8f 87       	std	Y+15, r24	; 0x0f
    2450:	98 8b       	std	Y+16, r25	; 0x10
	u8 L_u8Digits[10]={0};
    2452:	8a e0       	ldi	r24, 0x0A	; 10
    2454:	fe 01       	movw	r30, r28
    2456:	33 96       	adiw	r30, 0x03	; 3
    2458:	df 01       	movw	r26, r30
    245a:	98 2f       	mov	r25, r24
    245c:	1d 92       	st	X+, r1
    245e:	9a 95       	dec	r25
    2460:	e9 f7       	brne	.-6      	; 0x245c <HLCD_vPrintNumber+0x2a>

	u8 L_u8Counter=0;
    2462:	1a 82       	std	Y+2, r1	; 0x02
    2464:	2e c0       	rjmp	.+92     	; 0x24c2 <HLCD_vPrintNumber+0x90>
	//TODO zero at the right

	while( A_s32Number > 0)
	{

		L_u8Digits[L_u8Counter] = A_s32Number%10+'0';
    2466:	8a 81       	ldd	r24, Y+2	; 0x02
    2468:	08 2f       	mov	r16, r24
    246a:	10 e0       	ldi	r17, 0x00	; 0
    246c:	8d 85       	ldd	r24, Y+13	; 0x0d
    246e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2470:	af 85       	ldd	r26, Y+15	; 0x0f
    2472:	b8 89       	ldd	r27, Y+16	; 0x10
    2474:	2a e0       	ldi	r18, 0x0A	; 10
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	40 e0       	ldi	r20, 0x00	; 0
    247a:	50 e0       	ldi	r21, 0x00	; 0
    247c:	bc 01       	movw	r22, r24
    247e:	cd 01       	movw	r24, r26
    2480:	0e 94 92 13 	call	0x2724	; 0x2724 <__divmodsi4>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	28 2f       	mov	r18, r24
    248a:	20 5d       	subi	r18, 0xD0	; 208
    248c:	ce 01       	movw	r24, r28
    248e:	03 96       	adiw	r24, 0x03	; 3
    2490:	fc 01       	movw	r30, r24
    2492:	e0 0f       	add	r30, r16
    2494:	f1 1f       	adc	r31, r17
    2496:	20 83       	st	Z, r18
		L_u8Counter++;
    2498:	8a 81       	ldd	r24, Y+2	; 0x02
    249a:	8f 5f       	subi	r24, 0xFF	; 255
    249c:	8a 83       	std	Y+2, r24	; 0x02
		A_s32Number/=10;
    249e:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a2:	af 85       	ldd	r26, Y+15	; 0x0f
    24a4:	b8 89       	ldd	r27, Y+16	; 0x10
    24a6:	2a e0       	ldi	r18, 0x0A	; 10
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	40 e0       	ldi	r20, 0x00	; 0
    24ac:	50 e0       	ldi	r21, 0x00	; 0
    24ae:	bc 01       	movw	r22, r24
    24b0:	cd 01       	movw	r24, r26
    24b2:	0e 94 92 13 	call	0x2724	; 0x2724 <__divmodsi4>
    24b6:	da 01       	movw	r26, r20
    24b8:	c9 01       	movw	r24, r18
    24ba:	8d 87       	std	Y+13, r24	; 0x0d
    24bc:	9e 87       	std	Y+14, r25	; 0x0e
    24be:	af 87       	std	Y+15, r26	; 0x0f
    24c0:	b8 8b       	std	Y+16, r27	; 0x10
	u8 L_u8Counter=0;

	//TODO negative number
	//TODO zero at the right

	while( A_s32Number > 0)
    24c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c6:	af 85       	ldd	r26, Y+15	; 0x0f
    24c8:	b8 89       	ldd	r27, Y+16	; 0x10
    24ca:	18 16       	cp	r1, r24
    24cc:	19 06       	cpc	r1, r25
    24ce:	1a 06       	cpc	r1, r26
    24d0:	1b 06       	cpc	r1, r27
    24d2:	4c f2       	brlt	.-110    	; 0x2466 <HLCD_vPrintNumber+0x34>
		L_u8Digits[L_u8Counter] = A_s32Number%10+'0';
		L_u8Counter++;
		A_s32Number/=10;
	}
	/* print array in reverese  */
	for(s8 L_s8PrintIndex=L_u8Counter-1; L_s8PrintIndex >= 0; L_s8PrintIndex-- )
    24d4:	8a 81       	ldd	r24, Y+2	; 0x02
    24d6:	81 50       	subi	r24, 0x01	; 1
    24d8:	89 83       	std	Y+1, r24	; 0x01
    24da:	10 c0       	rjmp	.+32     	; 0x24fc <HLCD_vPrintNumber+0xca>
	{
		HLCD_vSendChar(L_u8Digits[L_s8PrintIndex]);
    24dc:	89 81       	ldd	r24, Y+1	; 0x01
    24de:	28 2f       	mov	r18, r24
    24e0:	33 27       	eor	r19, r19
    24e2:	27 fd       	sbrc	r18, 7
    24e4:	30 95       	com	r19
    24e6:	ce 01       	movw	r24, r28
    24e8:	03 96       	adiw	r24, 0x03	; 3
    24ea:	fc 01       	movw	r30, r24
    24ec:	e2 0f       	add	r30, r18
    24ee:	f3 1f       	adc	r31, r19
    24f0:	80 81       	ld	r24, Z
    24f2:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <HLCD_vSendChar>
		L_u8Digits[L_u8Counter] = A_s32Number%10+'0';
		L_u8Counter++;
		A_s32Number/=10;
	}
	/* print array in reverese  */
	for(s8 L_s8PrintIndex=L_u8Counter-1; L_s8PrintIndex >= 0; L_s8PrintIndex-- )
    24f6:	89 81       	ldd	r24, Y+1	; 0x01
    24f8:	81 50       	subi	r24, 0x01	; 1
    24fa:	89 83       	std	Y+1, r24	; 0x01
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	88 23       	and	r24, r24
    2500:	6c f7       	brge	.-38     	; 0x24dc <HLCD_vPrintNumber+0xaa>
	{
		HLCD_vSendChar(L_u8Digits[L_s8PrintIndex]);
	}
}
    2502:	60 96       	adiw	r28, 0x10	; 16
    2504:	0f b6       	in	r0, 0x3f	; 63
    2506:	f8 94       	cli
    2508:	de bf       	out	0x3e, r29	; 62
    250a:	0f be       	out	0x3f, r0	; 63
    250c:	cd bf       	out	0x3d, r28	; 61
    250e:	cf 91       	pop	r28
    2510:	df 91       	pop	r29
    2512:	1f 91       	pop	r17
    2514:	0f 91       	pop	r16
    2516:	08 95       	ret

00002518 <HLCD_vSetCursorPosition>:

void HLCD_vSetCursorPosition(u8 A_u8LinePos,u8 A_u8LineNo)
{
    2518:	df 93       	push	r29
    251a:	cf 93       	push	r28
    251c:	00 d0       	rcall	.+0      	; 0x251e <HLCD_vSetCursorPosition+0x6>
    251e:	00 d0       	rcall	.+0      	; 0x2520 <HLCD_vSetCursorPosition+0x8>
    2520:	cd b7       	in	r28, 0x3d	; 61
    2522:	de b7       	in	r29, 0x3e	; 62
    2524:	89 83       	std	Y+1, r24	; 0x01
    2526:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8LineNo)
    2528:	8a 81       	ldd	r24, Y+2	; 0x02
    252a:	28 2f       	mov	r18, r24
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	3c 83       	std	Y+4, r19	; 0x04
    2530:	2b 83       	std	Y+3, r18	; 0x03
    2532:	8b 81       	ldd	r24, Y+3	; 0x03
    2534:	9c 81       	ldd	r25, Y+4	; 0x04
    2536:	00 97       	sbiw	r24, 0x00	; 0
    2538:	31 f0       	breq	.+12     	; 0x2546 <HLCD_vSetCursorPosition+0x2e>
    253a:	2b 81       	ldd	r18, Y+3	; 0x03
    253c:	3c 81       	ldd	r19, Y+4	; 0x04
    253e:	21 30       	cpi	r18, 0x01	; 1
    2540:	31 05       	cpc	r19, r1
    2542:	31 f0       	breq	.+12     	; 0x2550 <HLCD_vSetCursorPosition+0x38>
    2544:	17 c0       	rjmp	.+46     	; 0x2574 <HLCD_vSetCursorPosition+0x5c>
	{
	case LCD_LINE0:
		HLCD_vSendCommand(0x80+A_u8LinePos+0);
    2546:	89 81       	ldd	r24, Y+1	; 0x01
    2548:	80 58       	subi	r24, 0x80	; 128
    254a:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <HLCD_vSendCommand>
    254e:	12 c0       	rjmp	.+36     	; 0x2574 <HLCD_vSetCursorPosition+0x5c>
		break;
	case LCD_LINE1:
		HLCD_vSendCommand(0x80+A_u8LinePos+A_u8LineNo*64);
    2550:	8a 81       	ldd	r24, Y+2	; 0x02
    2552:	88 2f       	mov	r24, r24
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	00 24       	eor	r0, r0
    2558:	96 95       	lsr	r25
    255a:	87 95       	ror	r24
    255c:	07 94       	ror	r0
    255e:	96 95       	lsr	r25
    2560:	87 95       	ror	r24
    2562:	07 94       	ror	r0
    2564:	98 2f       	mov	r25, r24
    2566:	80 2d       	mov	r24, r0
    2568:	98 2f       	mov	r25, r24
    256a:	89 81       	ldd	r24, Y+1	; 0x01
    256c:	89 0f       	add	r24, r25
    256e:	80 58       	subi	r24, 0x80	; 128
    2570:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <HLCD_vSendCommand>





}
    2574:	0f 90       	pop	r0
    2576:	0f 90       	pop	r0
    2578:	0f 90       	pop	r0
    257a:	0f 90       	pop	r0
    257c:	cf 91       	pop	r28
    257e:	df 91       	pop	r29
    2580:	08 95       	ret

00002582 <HLCD_vSaveCustomChar>:

void HLCD_vSaveCustomChar(u8 A_u8CgramIndex,u8 A_u8CustomCharData[] )
{
    2582:	df 93       	push	r29
    2584:	cf 93       	push	r28
    2586:	00 d0       	rcall	.+0      	; 0x2588 <HLCD_vSaveCustomChar+0x6>
    2588:	00 d0       	rcall	.+0      	; 0x258a <HLCD_vSaveCustomChar+0x8>
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
    258e:	8a 83       	std	Y+2, r24	; 0x02
    2590:	7c 83       	std	Y+4, r23	; 0x04
    2592:	6b 83       	std	Y+3, r22	; 0x03
// 1  set cgram address

	HLCD_vSendCommand(0b01000000 + (A_u8CgramIndex*8) );
    2594:	8a 81       	ldd	r24, Y+2	; 0x02
    2596:	88 2f       	mov	r24, r24
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	08 96       	adiw	r24, 0x08	; 8
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	88 0f       	add	r24, r24
    25a2:	99 1f       	adc	r25, r25
    25a4:	88 0f       	add	r24, r24
    25a6:	99 1f       	adc	r25, r25
    25a8:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <HLCD_vSendCommand>
//2 send custom character data
	for (u8 L_u8Idx=0 ; L_u8Idx<8 ; L_u8Idx++)
    25ac:	19 82       	std	Y+1, r1	; 0x01
    25ae:	0e c0       	rjmp	.+28     	; 0x25cc <HLCD_vSaveCustomChar+0x4a>
	{

		HLCD_vSendChar(A_u8CustomCharData[L_u8Idx]);
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
    25b2:	28 2f       	mov	r18, r24
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	8b 81       	ldd	r24, Y+3	; 0x03
    25b8:	9c 81       	ldd	r25, Y+4	; 0x04
    25ba:	fc 01       	movw	r30, r24
    25bc:	e2 0f       	add	r30, r18
    25be:	f3 1f       	adc	r31, r19
    25c0:	80 81       	ld	r24, Z
    25c2:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <HLCD_vSendChar>
{
// 1  set cgram address

	HLCD_vSendCommand(0b01000000 + (A_u8CgramIndex*8) );
//2 send custom character data
	for (u8 L_u8Idx=0 ; L_u8Idx<8 ; L_u8Idx++)
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	8f 5f       	subi	r24, 0xFF	; 255
    25ca:	89 83       	std	Y+1, r24	; 0x01
    25cc:	89 81       	ldd	r24, Y+1	; 0x01
    25ce:	88 30       	cpi	r24, 0x08	; 8
    25d0:	78 f3       	brcs	.-34     	; 0x25b0 <HLCD_vSaveCustomChar+0x2e>
	{

		HLCD_vSendChar(A_u8CustomCharData[L_u8Idx]);
	}
	//3   set ddram address
	HLCD_vSendCommand(0x80);
    25d2:	80 e8       	ldi	r24, 0x80	; 128
    25d4:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <HLCD_vSendCommand>

}
    25d8:	0f 90       	pop	r0
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	cf 91       	pop	r28
    25e2:	df 91       	pop	r29
    25e4:	08 95       	ret

000025e6 <HLCD_vDisplayCustomChar>:

void HLCD_vDisplayCustomChar(u8 A_u8CgramIndex)
{
    25e6:	df 93       	push	r29
    25e8:	cf 93       	push	r28
    25ea:	0f 92       	push	r0
    25ec:	cd b7       	in	r28, 0x3d	; 61
    25ee:	de b7       	in	r29, 0x3e	; 62
    25f0:	89 83       	std	Y+1, r24	; 0x01
	if (A_u8CgramIndex >=0 && A_u8CgramIndex < 8)
    25f2:	89 81       	ldd	r24, Y+1	; 0x01
    25f4:	88 30       	cpi	r24, 0x08	; 8
    25f6:	18 f4       	brcc	.+6      	; 0x25fe <HLCD_vDisplayCustomChar+0x18>
	{

		HLCD_vSendChar(A_u8CgramIndex);
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <HLCD_vSendChar>

	}

}
    25fe:	0f 90       	pop	r0
    2600:	cf 91       	pop	r28
    2602:	df 91       	pop	r29
    2604:	08 95       	ret

00002606 <main>:
#include "../MCAL/DIO/DIO_int.h"
#include "../MCAL/WDT/WDT_int.h"

#include <util/delay.h>
int main(void)
{
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    260e:	2e 97       	sbiw	r28, 0x0e	; 14
    2610:	0f b6       	in	r0, 0x3f	; 63
    2612:	f8 94       	cli
    2614:	de bf       	out	0x3e, r29	; 62
    2616:	0f be       	out	0x3f, r0	; 63
    2618:	cd bf       	out	0x3d, r28	; 61
	MDIO_vSetPinDIR(DIO_PORTA,DIO_PIN0,DIO_OUTPUT);
    261a:	80 e0       	ldi	r24, 0x00	; 0
    261c:	60 e0       	ldi	r22, 0x00	; 0
    261e:	41 e0       	ldi	r20, 0x01	; 1
    2620:	0e 94 97 08 	call	0x112e	; 0x112e <MDIO_vSetPinDIR>


	MWDT_vTurnOn(WDT_1s);
    2624:	86 e0       	ldi	r24, 0x06	; 6
    2626:	0e 94 a3 05 	call	0xb46	; 0xb46 <MWDT_vTurnOn>
	MDIO_vSetPinVal(DIO_PORTA,DIO_PIN0,DIO_HIGH);
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	60 e0       	ldi	r22, 0x00	; 0
    262e:	41 e0       	ldi	r20, 0x01	; 1
    2630:	0e 94 9c 09 	call	0x1338	; 0x1338 <MDIO_vSetPinVal>
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	aa ef       	ldi	r26, 0xFA	; 250
    263a:	b3 e4       	ldi	r27, 0x43	; 67
    263c:	8b 87       	std	Y+11, r24	; 0x0b
    263e:	9c 87       	std	Y+12, r25	; 0x0c
    2640:	ad 87       	std	Y+13, r26	; 0x0d
    2642:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2644:	6b 85       	ldd	r22, Y+11	; 0x0b
    2646:	7c 85       	ldd	r23, Y+12	; 0x0c
    2648:	8d 85       	ldd	r24, Y+13	; 0x0d
    264a:	9e 85       	ldd	r25, Y+14	; 0x0e
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	4a ef       	ldi	r20, 0xFA	; 250
    2652:	54 e4       	ldi	r21, 0x44	; 68
    2654:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2658:	dc 01       	movw	r26, r24
    265a:	cb 01       	movw	r24, r22
    265c:	8f 83       	std	Y+7, r24	; 0x07
    265e:	98 87       	std	Y+8, r25	; 0x08
    2660:	a9 87       	std	Y+9, r26	; 0x09
    2662:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2664:	6f 81       	ldd	r22, Y+7	; 0x07
    2666:	78 85       	ldd	r23, Y+8	; 0x08
    2668:	89 85       	ldd	r24, Y+9	; 0x09
    266a:	9a 85       	ldd	r25, Y+10	; 0x0a
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	40 e8       	ldi	r20, 0x80	; 128
    2672:	5f e3       	ldi	r21, 0x3F	; 63
    2674:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2678:	88 23       	and	r24, r24
    267a:	2c f4       	brge	.+10     	; 0x2686 <main+0x80>
		__ticks = 1;
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	9e 83       	std	Y+6, r25	; 0x06
    2682:	8d 83       	std	Y+5, r24	; 0x05
    2684:	3f c0       	rjmp	.+126    	; 0x2704 <main+0xfe>
	else if (__tmp > 65535)
    2686:	6f 81       	ldd	r22, Y+7	; 0x07
    2688:	78 85       	ldd	r23, Y+8	; 0x08
    268a:	89 85       	ldd	r24, Y+9	; 0x09
    268c:	9a 85       	ldd	r25, Y+10	; 0x0a
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	3f ef       	ldi	r19, 0xFF	; 255
    2692:	4f e7       	ldi	r20, 0x7F	; 127
    2694:	57 e4       	ldi	r21, 0x47	; 71
    2696:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    269a:	18 16       	cp	r1, r24
    269c:	4c f5       	brge	.+82     	; 0x26f0 <main+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    269e:	6b 85       	ldd	r22, Y+11	; 0x0b
    26a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    26a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	40 e2       	ldi	r20, 0x20	; 32
    26ac:	51 e4       	ldi	r21, 0x41	; 65
    26ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	bc 01       	movw	r22, r24
    26b8:	cd 01       	movw	r24, r26
    26ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	9e 83       	std	Y+6, r25	; 0x06
    26c4:	8d 83       	std	Y+5, r24	; 0x05
    26c6:	0f c0       	rjmp	.+30     	; 0x26e6 <main+0xe0>
    26c8:	88 ec       	ldi	r24, 0xC8	; 200
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	9c 83       	std	Y+4, r25	; 0x04
    26ce:	8b 83       	std	Y+3, r24	; 0x03
    26d0:	8b 81       	ldd	r24, Y+3	; 0x03
    26d2:	9c 81       	ldd	r25, Y+4	; 0x04
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	f1 f7       	brne	.-4      	; 0x26d4 <main+0xce>
    26d8:	9c 83       	std	Y+4, r25	; 0x04
    26da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26dc:	8d 81       	ldd	r24, Y+5	; 0x05
    26de:	9e 81       	ldd	r25, Y+6	; 0x06
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	9e 83       	std	Y+6, r25	; 0x06
    26e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e6:	8d 81       	ldd	r24, Y+5	; 0x05
    26e8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ea:	00 97       	sbiw	r24, 0x00	; 0
    26ec:	69 f7       	brne	.-38     	; 0x26c8 <main+0xc2>
    26ee:	14 c0       	rjmp	.+40     	; 0x2718 <main+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f0:	6f 81       	ldd	r22, Y+7	; 0x07
    26f2:	78 85       	ldd	r23, Y+8	; 0x08
    26f4:	89 85       	ldd	r24, Y+9	; 0x09
    26f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	9e 83       	std	Y+6, r25	; 0x06
    2702:	8d 83       	std	Y+5, r24	; 0x05
    2704:	8d 81       	ldd	r24, Y+5	; 0x05
    2706:	9e 81       	ldd	r25, Y+6	; 0x06
    2708:	9a 83       	std	Y+2, r25	; 0x02
    270a:	89 83       	std	Y+1, r24	; 0x01
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	9a 81       	ldd	r25, Y+2	; 0x02
    2710:	01 97       	sbiw	r24, 0x01	; 1
    2712:	f1 f7       	brne	.-4      	; 0x2710 <main+0x10a>
    2714:	9a 83       	std	Y+2, r25	; 0x02
    2716:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	MDIO_vSetPinVal(DIO_PORTA,DIO_PIN0,DIO_LOW);
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	60 e0       	ldi	r22, 0x00	; 0
    271c:	40 e0       	ldi	r20, 0x00	; 0
    271e:	0e 94 9c 09 	call	0x1338	; 0x1338 <MDIO_vSetPinVal>
    2722:	ff cf       	rjmp	.-2      	; 0x2722 <main+0x11c>

00002724 <__divmodsi4>:
    2724:	97 fb       	bst	r25, 7
    2726:	09 2e       	mov	r0, r25
    2728:	05 26       	eor	r0, r21
    272a:	0e d0       	rcall	.+28     	; 0x2748 <__divmodsi4_neg1>
    272c:	57 fd       	sbrc	r21, 7
    272e:	04 d0       	rcall	.+8      	; 0x2738 <__divmodsi4_neg2>
    2730:	14 d0       	rcall	.+40     	; 0x275a <__udivmodsi4>
    2732:	0a d0       	rcall	.+20     	; 0x2748 <__divmodsi4_neg1>
    2734:	00 1c       	adc	r0, r0
    2736:	38 f4       	brcc	.+14     	; 0x2746 <__divmodsi4_exit>

00002738 <__divmodsi4_neg2>:
    2738:	50 95       	com	r21
    273a:	40 95       	com	r20
    273c:	30 95       	com	r19
    273e:	21 95       	neg	r18
    2740:	3f 4f       	sbci	r19, 0xFF	; 255
    2742:	4f 4f       	sbci	r20, 0xFF	; 255
    2744:	5f 4f       	sbci	r21, 0xFF	; 255

00002746 <__divmodsi4_exit>:
    2746:	08 95       	ret

00002748 <__divmodsi4_neg1>:
    2748:	f6 f7       	brtc	.-4      	; 0x2746 <__divmodsi4_exit>
    274a:	90 95       	com	r25
    274c:	80 95       	com	r24
    274e:	70 95       	com	r23
    2750:	61 95       	neg	r22
    2752:	7f 4f       	sbci	r23, 0xFF	; 255
    2754:	8f 4f       	sbci	r24, 0xFF	; 255
    2756:	9f 4f       	sbci	r25, 0xFF	; 255
    2758:	08 95       	ret

0000275a <__udivmodsi4>:
    275a:	a1 e2       	ldi	r26, 0x21	; 33
    275c:	1a 2e       	mov	r1, r26
    275e:	aa 1b       	sub	r26, r26
    2760:	bb 1b       	sub	r27, r27
    2762:	fd 01       	movw	r30, r26
    2764:	0d c0       	rjmp	.+26     	; 0x2780 <__udivmodsi4_ep>

00002766 <__udivmodsi4_loop>:
    2766:	aa 1f       	adc	r26, r26
    2768:	bb 1f       	adc	r27, r27
    276a:	ee 1f       	adc	r30, r30
    276c:	ff 1f       	adc	r31, r31
    276e:	a2 17       	cp	r26, r18
    2770:	b3 07       	cpc	r27, r19
    2772:	e4 07       	cpc	r30, r20
    2774:	f5 07       	cpc	r31, r21
    2776:	20 f0       	brcs	.+8      	; 0x2780 <__udivmodsi4_ep>
    2778:	a2 1b       	sub	r26, r18
    277a:	b3 0b       	sbc	r27, r19
    277c:	e4 0b       	sbc	r30, r20
    277e:	f5 0b       	sbc	r31, r21

00002780 <__udivmodsi4_ep>:
    2780:	66 1f       	adc	r22, r22
    2782:	77 1f       	adc	r23, r23
    2784:	88 1f       	adc	r24, r24
    2786:	99 1f       	adc	r25, r25
    2788:	1a 94       	dec	r1
    278a:	69 f7       	brne	.-38     	; 0x2766 <__udivmodsi4_loop>
    278c:	60 95       	com	r22
    278e:	70 95       	com	r23
    2790:	80 95       	com	r24
    2792:	90 95       	com	r25
    2794:	9b 01       	movw	r18, r22
    2796:	ac 01       	movw	r20, r24
    2798:	bd 01       	movw	r22, r26
    279a:	cf 01       	movw	r24, r30
    279c:	08 95       	ret

0000279e <__prologue_saves__>:
    279e:	2f 92       	push	r2
    27a0:	3f 92       	push	r3
    27a2:	4f 92       	push	r4
    27a4:	5f 92       	push	r5
    27a6:	6f 92       	push	r6
    27a8:	7f 92       	push	r7
    27aa:	8f 92       	push	r8
    27ac:	9f 92       	push	r9
    27ae:	af 92       	push	r10
    27b0:	bf 92       	push	r11
    27b2:	cf 92       	push	r12
    27b4:	df 92       	push	r13
    27b6:	ef 92       	push	r14
    27b8:	ff 92       	push	r15
    27ba:	0f 93       	push	r16
    27bc:	1f 93       	push	r17
    27be:	cf 93       	push	r28
    27c0:	df 93       	push	r29
    27c2:	cd b7       	in	r28, 0x3d	; 61
    27c4:	de b7       	in	r29, 0x3e	; 62
    27c6:	ca 1b       	sub	r28, r26
    27c8:	db 0b       	sbc	r29, r27
    27ca:	0f b6       	in	r0, 0x3f	; 63
    27cc:	f8 94       	cli
    27ce:	de bf       	out	0x3e, r29	; 62
    27d0:	0f be       	out	0x3f, r0	; 63
    27d2:	cd bf       	out	0x3d, r28	; 61
    27d4:	09 94       	ijmp

000027d6 <__epilogue_restores__>:
    27d6:	2a 88       	ldd	r2, Y+18	; 0x12
    27d8:	39 88       	ldd	r3, Y+17	; 0x11
    27da:	48 88       	ldd	r4, Y+16	; 0x10
    27dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    27de:	6e 84       	ldd	r6, Y+14	; 0x0e
    27e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    27e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    27e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    27e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    27e8:	b9 84       	ldd	r11, Y+9	; 0x09
    27ea:	c8 84       	ldd	r12, Y+8	; 0x08
    27ec:	df 80       	ldd	r13, Y+7	; 0x07
    27ee:	ee 80       	ldd	r14, Y+6	; 0x06
    27f0:	fd 80       	ldd	r15, Y+5	; 0x05
    27f2:	0c 81       	ldd	r16, Y+4	; 0x04
    27f4:	1b 81       	ldd	r17, Y+3	; 0x03
    27f6:	aa 81       	ldd	r26, Y+2	; 0x02
    27f8:	b9 81       	ldd	r27, Y+1	; 0x01
    27fa:	ce 0f       	add	r28, r30
    27fc:	d1 1d       	adc	r29, r1
    27fe:	0f b6       	in	r0, 0x3f	; 63
    2800:	f8 94       	cli
    2802:	de bf       	out	0x3e, r29	; 62
    2804:	0f be       	out	0x3f, r0	; 63
    2806:	cd bf       	out	0x3d, r28	; 61
    2808:	ed 01       	movw	r28, r26
    280a:	08 95       	ret

0000280c <_exit>:
    280c:	f8 94       	cli

0000280e <__stop_program>:
    280e:	ff cf       	rjmp	.-2      	; 0x280e <__stop_program>
